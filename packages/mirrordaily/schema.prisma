// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  urlOriginal   String    @default("")
  heroImage     Photo?    @relation("AudioFile_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  content       Json?
  tags          Tag[]     @relation("AudioFile_tags")
  apiData       Json?
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id                   Int        @id @default(autoincrement())
  name                 String     @unique @default("")
  slug                 String     @unique @default("")
  order                Int?
  state                String     @default("active")
  heroImage            Photo?     @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId          Int?       @map("heroImage")
  sections             Section[]  @relation("Category_sections")
  posts                Post[]     @relation("Category_posts")
  externals            External[] @relation("Category_externals")
  createdAt            DateTime?
  updatedAt            DateTime?
  createdBy            User?      @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById          Int?       @map("createdBy")
  updatedBy            User?      @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById          Int?       @map("updatedBy")
  from_Header_category Header[]   @relation("Header_category")

  @@index([state])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Contact {
  id                      Int              @id @default(autoincrement())
  name                    String           @default("")
  role                    ContactRoleType? @default(writer)
  content                 String           @default("")
  sections                Section[]        @relation("Contact_sections")
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?            @relation("Contact_createdBy", fields: [createdById], references: [id])
  createdById             Int?             @map("createdBy")
  updatedBy               User?            @relation("Contact_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?             @map("updatedBy")
  from_Post_writers       Post[]           @relation("Post_writers")
  from_Post_photographers Post[]           @relation("Post_photographers")
  from_Post_camera_man    Post[]           @relation("Post_camera_man")
  from_Post_designers     Post[]           @relation("Post_designers")
  from_Post_engineers     Post[]           @relation("Post_engineers")
  from_Post_vocals        Post[]           @relation("Post_vocals")
  from_User_author        User[]           @relation("User_author")

  @@index([name])
  @@index([createdById])
  @@index([updatedById])
}

model EditorChoice {
  id               Int       @id @default(autoincrement())
  order            Int?      @unique
  outlink          String    @default("")
  choices          Post?     @relation("EditorChoice_choices", fields: [choicesId], references: [id])
  choicesId        Int?      @map("choices")
  choiceexternal   External? @relation("EditorChoice_choiceexternal", fields: [choiceexternalId], references: [id])
  choiceexternalId Int?      @map("choiceexternal")
  state            String?   @default("draft")
  heroImage        Photo?    @relation("EditorChoice_heroImage", fields: [heroImageId], references: [id])
  heroImageId      Int?      @map("heroImage")
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?     @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById      Int?      @map("createdBy")
  updatedBy        User?     @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?      @map("updatedBy")

  @@index([choicesId])
  @@index([choiceexternalId])
  @@index([state])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model External {
  id                               Int            @id @default(autoincrement())
  slug                             String         @default("")
  partner                          Partner?       @relation("External_partner", fields: [partnerId], references: [id])
  partnerId                        Int?           @map("partner")
  title                            String         @default("")
  state                            String?        @default("draft")
  sections                         Section[]      @relation("External_sections")
  manualOrderOfSections            Json?
  categories                       Category[]     @relation("Category_externals")
  manualOrderOfCategories          Json?
  publishedDate                    DateTime?
  publishedDateString              String         @default("")
  extend_byline                    String         @default("")
  thumb                            String         @default("")
  brief                            String         @default("")
  content                          String         @default("")
  topics                           Topic?         @relation("External_topics", fields: [topicsId], references: [id])
  topicsId                         Int?           @map("topics")
  source                           String         @default("")
  tags                             Tag[]          @relation("External_tags")
  relateds                         Post[]         @relation("External_relateds")
  groups                           Group[]        @relation("External_groups")
  createdAt                        DateTime?
  updatedAt                        DateTime?
  createdBy                        User?          @relation("External_createdBy", fields: [createdById], references: [id])
  createdById                      Int?           @map("createdBy")
  updatedBy                        User?          @relation("External_updatedBy", fields: [updatedById], references: [id])
  updatedById                      Int?           @map("updatedBy")
  from_EditorChoice_choiceexternal EditorChoice[] @relation("EditorChoice_choiceexternal")
  from_Hot_hotexternal             Hot[]          @relation("Hot_hotexternal")

  @@index([partnerId])
  @@index([title])
  @@index([state])
  @@index([publishedDate])
  @@index([topicsId])
  @@index([createdById])
  @@index([updatedById])
}

model Event {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  slug          String    @unique @default("")
  state         String?   @default("draft")
  publishedDate DateTime?
  sections      Section[] @relation("Event_sections")
  eventType     String?
  startDate     DateTime
  endDate       DateTime?
  heroImage     Photo?    @relation("Event_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  link          String    @default("")
  isFeatured    Boolean   @default(false)
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([name])
  @@index([state])
  @@index([publishedDate])
  @@index([eventType])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Header {
  id          Int       @id @default(autoincrement())
  order       Int?      @unique
  section     Section?  @relation("Header_section", fields: [sectionId], references: [id])
  sectionId   Int?      @map("section")
  category    Category? @relation("Header_category", fields: [categoryId], references: [id])
  categoryId  Int?      @map("category")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Header_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Header_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([sectionId])
  @@index([categoryId])
  @@index([createdById])
  @@index([updatedById])
}

model Partner {
  id                    Int        @id @default(autoincrement())
  slug                  String     @unique @default("")
  name                  String     @default("")
  website               String     @default("")
  public                Boolean    @default(true)
  showOnIndex           Boolean    @default(true)
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?      @relation("Partner_createdBy", fields: [createdById], references: [id])
  createdById           Int?       @map("createdBy")
  updatedBy             User?      @relation("Partner_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?       @map("updatedBy")
  from_External_partner External[] @relation("External_partner")

  @@index([name])
  @@index([website])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  imageFile_filesize          Int?
  imageFile_extension         String?
  imageFile_width             Int?
  imageFile_height            Int?
  imageFile_id                String?
  waterMark                   Boolean        @default(false)
  defaultImage                Boolean        @default(false)
  topicKeywords               String         @default("")
  copyRight                   Boolean        @default(false)
  createdAt                   DateTime?
  updatedAt                   DateTime?
  createdBy                   User?          @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                 Int?           @map("createdBy")
  updatedBy                   User?          @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                 Int?           @map("updatedBy")
  from_AudioFile_heroImage    AudioFile[]    @relation("AudioFile_heroImage")
  from_Category_heroImage     Category[]     @relation("Category_heroImage")
  from_EditorChoice_heroImage EditorChoice[] @relation("EditorChoice_heroImage")
  from_Event_heroImage        Event[]        @relation("Event_heroImage")
  from_Post_heroImage         Post[]         @relation("Post_heroImage")
  from_Post_defaultHeroImage  Post[]         @relation("Post_defaultHeroImage")
  from_Post_og_image          Post[]         @relation("Post_og_image")
  from_Section_heroImage      Section[]      @relation("Section_heroImage")
  from_Topic_heroImage        Topic[]        @relation("Topic_heroImage")
  from_Topic_slideshow_images Topic[]        @relation("Topic_slideshow_images")
  from_Topic_og_image         Topic[]        @relation("Topic_og_image")
  from_Video_heroImage        Video[]        @relation("Video_heroImage")
  from_Game_heroImage         Game[]         @relation("Game_heroImage")
  from_Hot_heroImage          Hot[]          @relation("Hot_heroImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Post {
  id                         Int            @id @default(autoincrement())
  lockBy                     User?          @relation("Post_lockBy", fields: [lockById], references: [id])
  lockById                   Int?           @map("lockBy")
  lockExpireAt               DateTime?
  slug                       String         @default("")
  title                      String         @default("")
  subtitle                   String         @default("")
  sections                   Section[]      @relation("Post_sections")
  manualOrderOfSections      Json?
  categories                 Category[]     @relation("Category_posts")
  manualOrderOfCategories    Json?
  writers                    Contact[]      @relation("Post_writers")
  manualOrderOfWriters       Json?
  photographers              Contact[]      @relation("Post_photographers")
  camera_man                 Contact[]      @relation("Post_camera_man")
  designers                  Contact[]      @relation("Post_designers")
  engineers                  Contact[]      @relation("Post_engineers")
  vocals                     Contact[]      @relation("Post_vocals")
  extend_byline              String         @default("")
  heroVideo                  Video?         @relation("Post_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId                Int?           @map("heroVideo")
  heroImage                  Photo?         @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                Int?           @map("heroImage")
  defaultHeroImage           Photo?         @relation("Post_defaultHeroImage", fields: [defaultHeroImageId], references: [id])
  defaultHeroImageId         Int?           @map("defaultHeroImage")
  heroCaption                String         @default("")
  style                      String?        @default("article")
  brief                      Json?
  content                    Json?
  isMember                   Boolean        @default(false)
  topics                     Topic?         @relation("Post_topics", fields: [topicsId], references: [id])
  topicsId                   Int?           @map("topics")
  relateds                   Post[]         @relation("Post_relateds")
  from_External_relateds     External[]     @relation("External_relateds")
  groups                     Group[]        @relation("Group_posts")
  manualOrderOfRelateds      Json?
  tags                       Tag[]          @relation("Post_tags")
  tags_algo                  Tag[]          @relation("Post_tags_algo")
  og_title                   String         @default("")
  og_description             String         @default("")
  og_image                   Photo?         @relation("Post_og_image", fields: [og_imageId], references: [id])
  og_imageId                 Int?           @map("og_image")
  related_videos             Video[]        @relation("Post_related_videos")
  manualOrderOfRelatedVideos Json?
  state                      String?        @default("draft")
  publishedDate              DateTime       @default(now())
  publishedDateString        String         @default("")
  updateTimeStamp            Boolean        @default(true)
  isFeatured                 Boolean        @default(false)
  isAdvertised               Boolean        @default(false)
  hiddenAdvertised           Boolean        @default(false)
  isAdult                    Boolean        @default(false)
  Warning                    Warning?       @relation("Post_Warning", fields: [WarningId], references: [id])
  WarningId                  Int?           @map("Warning")
  redirect                   String         @default("")
  adTrace                    String         @default("")
  css                        String         @default("")
  apiDataBrief               Json?
  apiData                    Json?
  createdAt                  DateTime?
  updatedAt                  DateTime?
  createdBy                  User?          @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                Int?           @map("createdBy")
  updatedBy                  User?          @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                Int?           @map("updatedBy")
  from_EditorChoice_choices  EditorChoice[] @relation("EditorChoice_choices")
  from_Post_relateds         Post[]         @relation("Post_relateds")
  from_Hot_hotnews           Hot[]          @relation("Hot_hotnews")

  @@index([lockById])
  @@index([lockExpireAt])
  @@index([heroVideoId])
  @@index([heroImageId])
  @@index([defaultHeroImageId])
  @@index([style])
  @@index([topicsId])
  @@index([og_imageId])
  @@index([state])
  @@index([publishedDate])
  @@index([WarningId])
  @@index([createdById])
  @@index([updatedById])
}

model Section {
  id                    Int        @id @default(autoincrement())
  name                  String     @unique @default("")
  description           String     @default("")
  color                 String
  slug                  String     @unique @default("")
  order                 Int?
  state                 String     @default("active")
  isFeatured            Boolean    @default(false)
  heroImage             Photo?     @relation("Section_heroImage", fields: [heroImageId], references: [id])
  heroImageId           Int?       @map("heroImage")
  categories            Category[] @relation("Category_sections")
  posts                 Post[]     @relation("Post_sections")
  externals             External[] @relation("External_sections")
  topics                Topic[]    @relation("Section_topics")
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?      @relation("Section_createdBy", fields: [createdById], references: [id])
  createdById           Int?       @map("createdBy")
  updatedBy             User?      @relation("Section_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?       @map("updatedBy")
  from_Contact_sections Contact[]  @relation("Contact_sections")
  from_Event_sections   Event[]    @relation("Event_sections")
  from_Header_section   Header[]   @relation("Header_section")
  from_User_sections    User[]     @relation("User_sections")

  @@index([state])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id                      Int          @id @default(autoincrement())
  slug                    String       @unique @default("")
  name                    String       @unique @default("")
  posts                   Post[]       @relation("Post_tags")
  posts_algo              Post[]       @relation("Post_tags_algo")
  externals               External[]   @relation("External_tags")
  topics                  Topic[]      @relation("Tag_topics")
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?        @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById             Int?         @map("createdBy")
  updatedBy               User?        @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?         @map("updatedBy")
  from_AudioFile_tags     AudioFile[]  @relation("AudioFile_tags")
  from_Video_tags         Video[]      @relation("Video_tags")
  from_PopularTag_choices PopularTag[] @relation("PopularTag_choices")

  @@index([createdById])
  @@index([updatedById])
}

model Topic {
  id                           Int        @id @default(autoincrement())
  name                         String     @unique @default("")
  slug                         String     @unique @default("")
  sortOrder                    Int?
  state                        String?    @default("draft")
  brief                        Json?
  apiDataBrief                 Json?
  leading                      String?
  heroImage                    Photo?     @relation("Topic_heroImage", fields: [heroImageId], references: [id])
  heroImageId                  Int?       @map("heroImage")
  heroUrl                      String?
  heroVideo                    Video?     @relation("Topic_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId                  Int?       @map("heroVideo")
  slideshow_images             Photo[]    @relation("Topic_slideshow_images")
  manualOrderOfSlideshowImages Json?
  og_title                     String     @default("")
  og_description               String     @default("")
  og_image                     Photo?     @relation("Topic_og_image", fields: [og_imageId], references: [id])
  og_imageId                   Int?       @map("og_image")
  type                         String?    @default("list")
  tags                         Tag[]      @relation("Tag_topics")
  posts                        Post[]     @relation("Post_topics")
  externals                    External[] @relation("External_topics")
  style                        String     @default("")
  isFeatured                   Boolean    @default(false)
  title_style                  String?    @default("feature")
  sections                     Section[]  @relation("Section_topics")
  javascript                   String     @default("")
  dfp                          String     @default("")
  mobile_dfp                   String     @default("")
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?      @relation("Topic_createdBy", fields: [createdById], references: [id])
  createdById                  Int?       @map("createdBy")
  updatedBy                    User?      @relation("Topic_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?       @map("updatedBy")

  @@index([state])
  @@index([leading])
  @@index([heroImageId])
  @@index([heroVideoId])
  @@index([og_imageId])
  @@index([type])
  @@index([title_style])
  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  email                       String         @unique @default("")
  password                    String
  role                        String
  sections                    Section[]      @relation("User_sections")
  author                      Contact?       @relation("User_author", fields: [authorId], references: [id])
  authorId                    Int?           @map("author")
  isProtected                 Boolean        @default(false)
  from_AudioFile_createdBy    AudioFile[]    @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy    AudioFile[]    @relation("AudioFile_updatedBy")
  from_Category_createdBy     Category[]     @relation("Category_createdBy")
  from_Category_updatedBy     Category[]     @relation("Category_updatedBy")
  from_Contact_createdBy      Contact[]      @relation("Contact_createdBy")
  from_Contact_updatedBy      Contact[]      @relation("Contact_updatedBy")
  from_EditorChoice_createdBy EditorChoice[] @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy EditorChoice[] @relation("EditorChoice_updatedBy")
  from_External_createdBy     External[]     @relation("External_createdBy")
  from_External_updatedBy     External[]     @relation("External_updatedBy")
  from_Event_createdBy        Event[]        @relation("Event_createdBy")
  from_Event_updatedBy        Event[]        @relation("Event_updatedBy")
  from_Header_createdBy       Header[]       @relation("Header_createdBy")
  from_Header_updatedBy       Header[]       @relation("Header_updatedBy")
  from_Partner_createdBy      Partner[]      @relation("Partner_createdBy")
  from_Partner_updatedBy      Partner[]      @relation("Partner_updatedBy")
  from_Photo_createdBy        Photo[]        @relation("Photo_createdBy")
  from_Photo_updatedBy        Photo[]        @relation("Photo_updatedBy")
  from_Post_lockBy            Post[]         @relation("Post_lockBy")
  from_Post_createdBy         Post[]         @relation("Post_createdBy")
  from_Post_updatedBy         Post[]         @relation("Post_updatedBy")
  from_Section_createdBy      Section[]      @relation("Section_createdBy")
  from_Section_updatedBy      Section[]      @relation("Section_updatedBy")
  from_Tag_createdBy          Tag[]          @relation("Tag_createdBy")
  from_Tag_updatedBy          Tag[]          @relation("Tag_updatedBy")
  from_Topic_createdBy        Topic[]        @relation("Topic_createdBy")
  from_Topic_updatedBy        Topic[]        @relation("Topic_updatedBy")
  from_Video_createdBy        Video[]        @relation("Video_createdBy")
  from_Video_updatedBy        Video[]        @relation("Video_updatedBy")
  from_Group_createdBy        Group[]        @relation("Group_createdBy")
  from_Group_updatedBy        Group[]        @relation("Group_updatedBy")
  from_Game_createdBy         Game[]         @relation("Game_createdBy")
  from_Game_updatedBy         Game[]         @relation("Game_updatedBy")
  from_Warning_createdBy      Warning[]      @relation("Warning_createdBy")
  from_Warning_updatedBy      Warning[]      @relation("Warning_updatedBy")
  from_PopularTag_createdBy   PopularTag[]   @relation("PopularTag_createdBy")
  from_PopularTag_updatedBy   PopularTag[]   @relation("PopularTag_updatedBy")
  from_Hot_createdBy          Hot[]          @relation("Hot_createdBy")
  from_Hot_updatedBy          Hot[]          @relation("Hot_updatedBy")

  @@index([authorId])
}

model Video {
  id                        Int       @id @default(autoincrement())
  name                      String    @default("")
  isShorts                  Boolean   @default(false)
  youtubeUrl                String    @default("")
  file_filesize             Int?
  file_filename             String?
  content                   String    @default("")
  heroImage                 Photo?    @relation("Video_heroImage", fields: [heroImageId], references: [id])
  heroImageId               Int?      @map("heroImage")
  uploader                  String    @default("")
  uploaderEmail             String    @default("")
  isFeed                    Boolean   @default(false)
  related_posts             Post[]    @relation("Post_related_videos")
  manualOrderOfRelatedPosts Json?
  videoSection              String?   @default("news")
  state                     String?   @default("draft")
  publishedDate             DateTime?
  tags                      Tag[]     @relation("Video_tags")
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?     @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById               Int?      @map("createdBy")
  updatedBy                 User?     @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?      @map("updatedBy")
  from_Post_heroVideo       Post[]    @relation("Post_heroVideo")
  from_Topic_heroVideo      Topic[]   @relation("Topic_heroVideo")

  @@index([heroImageId])
  @@index([videoSection])
  @@index([state])
  @@index([publishedDate])
  @@index([createdById])
  @@index([updatedById])
}

model Group {
  id          Int        @id @default(autoincrement())
  keyword     String     @default("")
  posts       Post[]     @relation("Group_posts")
  externals   External[] @relation("External_groups")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("Group_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("Group_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Game {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  state         String?   @default("draft")
  publishedDate DateTime?
  heroImage     Photo?    @relation("Game_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  link          String    @default("")
  isFeatured    Boolean   @default(false)
  descriptions  String    @default("")
  sortOrder     Int?
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Game_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Game_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([name])
  @@index([state])
  @@index([publishedDate])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Warning {
  id                Int       @id @default(autoincrement())
  content           String    @default("")
  createdAt         DateTime?
  updatedAt         DateTime?
  createdBy         User?     @relation("Warning_createdBy", fields: [createdById], references: [id])
  createdById       Int?      @map("createdBy")
  updatedBy         User?     @relation("Warning_updatedBy", fields: [updatedById], references: [id])
  updatedById       Int?      @map("updatedBy")
  from_Post_Warning Post[]    @relation("Post_Warning")

  @@index([createdById])
  @@index([updatedById])
}

model PopularTag {
  id          Int       @id @default(autoincrement())
  order       Int?      @unique
  choices     Tag?      @relation("PopularTag_choices", fields: [choicesId], references: [id])
  choicesId   Int?      @map("choices")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("PopularTag_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("PopularTag_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([choicesId])
  @@index([createdById])
  @@index([updatedById])
}

model Hot {
  id            Int       @id @default(autoincrement())
  order         Int?      @unique
  outlink       String    @default("")
  hotnews       Post?     @relation("Hot_hotnews", fields: [hotnewsId], references: [id])
  hotnewsId     Int?      @map("hotnews")
  hotexternal   External? @relation("Hot_hotexternal", fields: [hotexternalId], references: [id])
  hotexternalId Int?      @map("hotexternal")
  state         String?   @default("draft")
  heroImage     Photo?    @relation("Hot_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Hot_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Hot_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([hotnewsId])
  @@index([hotexternalId])
  @@index([state])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

enum ContactRoleType {
  writer
  photographer
  camera_man
  designer
  engineer
}
