# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type Post {
  id: ID!
  label: String
  other_label: String
  role: String
  organization: Organization
  area: Area
  start_date: DateTime
  end_date: DateTime
  links: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  label: StringFilter
  other_label: StringFilter
  role: StringFilter
  organization: OrganizationWhereInput
  area: AreaWhereInput
  start_date: DateTimeNullableFilter
  end_date: DateTimeNullableFilter
  links: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  label: OrderDirection
  other_label: OrderDirection
  role: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  links: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  label: String
  other_label: String
  role: String
  organization: OrganizationRelateToOneForUpdateInput
  area: AreaRelateToOneForUpdateInput
  start_date: DateTime
  end_date: DateTime
  links: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input AreaRelateToOneForUpdateInput {
  create: AreaCreateInput
  connect: AreaWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  label: String
  other_label: String
  role: String
  organization: OrganizationRelateToOneForCreateInput
  area: AreaRelateToOneForCreateInput
  start_date: DateTime
  end_date: DateTime
  links: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input AreaRelateToOneForCreateInput {
  create: AreaCreateInput
  connect: AreaWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Area {
  id: ID!
  name: String
  identifiers: String
  classification: String
  parent: Area
  geometry: String
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  posts: String
  children(where: AreaWhereInput! = {}, orderBy: [AreaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AreaWhereUniqueInput): [Area!]
  childrenCount(where: AreaWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AreaWhereUniqueInput {
  id: ID
}

input AreaWhereInput {
  AND: [AreaWhereInput!]
  OR: [AreaWhereInput!]
  NOT: [AreaWhereInput!]
  id: IDFilter
  name: StringFilter
  identifiers: StringFilter
  classification: StringFilter
  parent: AreaWhereInput
  geometry: StringFilter
  organizations: OrganizationManyRelationFilter
  posts: StringFilter
  children: AreaManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input OrganizationManyRelationFilter {
  every: OrganizationWhereInput
  some: OrganizationWhereInput
  none: OrganizationWhereInput
}

input AreaManyRelationFilter {
  every: AreaWhereInput
  some: AreaWhereInput
  none: AreaWhereInput
}

input AreaOrderByInput {
  id: OrderDirection
  name: OrderDirection
  identifiers: OrderDirection
  classification: OrderDirection
  geometry: OrderDirection
  posts: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AreaUpdateInput {
  name: String
  identifiers: String
  classification: String
  parent: AreaRelateToOneForUpdateInput
  geometry: String
  organizations: OrganizationRelateToManyForUpdateInput
  posts: String
  children: AreaRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input OrganizationRelateToManyForUpdateInput {
  disconnect: [OrganizationWhereUniqueInput!]
  set: [OrganizationWhereUniqueInput!]
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input AreaRelateToManyForUpdateInput {
  disconnect: [AreaWhereUniqueInput!]
  set: [AreaWhereUniqueInput!]
  create: [AreaCreateInput!]
  connect: [AreaWhereUniqueInput!]
}

input AreaUpdateArgs {
  where: AreaWhereUniqueInput!
  data: AreaUpdateInput!
}

input AreaCreateInput {
  name: String
  identifiers: String
  classification: String
  parent: AreaRelateToOneForCreateInput
  geometry: String
  organizations: OrganizationRelateToManyForCreateInput
  posts: String
  children: AreaRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input OrganizationRelateToManyForCreateInput {
  create: [OrganizationCreateInput!]
  connect: [OrganizationWhereUniqueInput!]
}

input AreaRelateToManyForCreateInput {
  create: [AreaCreateInput!]
  connect: [AreaWhereUniqueInput!]
}

type Event {
  id: ID!
  name: String
  description: String
  start_date: String
  end_date: String
  location: String
  status: String
  identifier: String
  motion: String
  classification: String
  organization: String
  attendees: String
  parent: String
  sub: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EventWhereUniqueInput {
  id: ID
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  start_date: StringFilter
  end_date: StringFilter
  location: StringFilter
  status: StringFilter
  identifier: StringFilter
  motion: StringFilter
  classification: StringFilter
  organization: StringFilter
  attendees: StringFilter
  parent: StringFilter
  sub: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  location: OrderDirection
  status: OrderDirection
  identifier: OrderDirection
  motion: OrderDirection
  classification: OrderDirection
  organization: OrderDirection
  attendees: OrderDirection
  parent: OrderDirection
  sub: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  description: String
  start_date: String
  end_date: String
  location: String
  status: String
  identifier: String
  motion: String
  classification: String
  organization: String
  attendees: String
  parent: String
  sub: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  description: String
  start_date: String
  end_date: String
  location: String
  status: String
  identifier: String
  motion: String
  classification: String
  organization: String
  attendees: String
  parent: String
  sub: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Election {
  id: ID!
  name: String
  description: String
  election_year_year: Int
  election_year_month: Int
  election_year_day: Int
  level: String
  type: String
  register_date: String
  location: String
  electionArea(where: ElectionAreaWhereInput! = {}, orderBy: [ElectionAreaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionAreaWhereUniqueInput): [ElectionArea!]
  electionAreaCount(where: ElectionAreaWhereInput! = {}): Int
  status: String
  hidePoliticDetail: DateTime
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  addComments: Boolean
  organizationsElection: OrganizationsElection
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ElectionWhereUniqueInput {
  id: ID
}

input ElectionWhereInput {
  AND: [ElectionWhereInput!]
  OR: [ElectionWhereInput!]
  NOT: [ElectionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  election_year_year: IntNullableFilter
  election_year_month: IntNullableFilter
  election_year_day: IntNullableFilter
  level: StringNullableFilter
  type: StringNullableFilter
  register_date: StringFilter
  location: StringFilter
  electionArea: ElectionAreaManyRelationFilter
  status: StringNullableFilter
  hidePoliticDetail: DateTimeNullableFilter
  tags: TagManyRelationFilter
  addComments: BooleanFilter
  organizationsElection: OrganizationsElectionWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ElectionAreaManyRelationFilter {
  every: ElectionAreaWhereInput
  some: ElectionAreaWhereInput
  none: ElectionAreaWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ElectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  election_year_year: OrderDirection
  election_year_month: OrderDirection
  election_year_day: OrderDirection
  level: OrderDirection
  type: OrderDirection
  register_date: OrderDirection
  location: OrderDirection
  status: OrderDirection
  hidePoliticDetail: OrderDirection
  addComments: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ElectionUpdateInput {
  name: String
  description: String
  election_year_year: Int
  election_year_month: Int
  election_year_day: Int
  level: String
  type: String
  register_date: String
  location: String
  electionArea: ElectionAreaRelateToManyForUpdateInput
  status: String
  hidePoliticDetail: DateTime
  tags: TagRelateToManyForUpdateInput
  addComments: Boolean
  organizationsElection: OrganizationsElectionRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ElectionAreaRelateToManyForUpdateInput {
  disconnect: [ElectionAreaWhereUniqueInput!]
  set: [ElectionAreaWhereUniqueInput!]
  create: [ElectionAreaCreateInput!]
  connect: [ElectionAreaWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input OrganizationsElectionRelateToOneForUpdateInput {
  create: OrganizationsElectionCreateInput
  connect: OrganizationsElectionWhereUniqueInput
  disconnect: Boolean
}

input ElectionUpdateArgs {
  where: ElectionWhereUniqueInput!
  data: ElectionUpdateInput!
}

input ElectionCreateInput {
  name: String
  description: String
  election_year_year: Int
  election_year_month: Int
  election_year_day: Int
  level: String
  type: String
  register_date: String
  location: String
  electionArea: ElectionAreaRelateToManyForCreateInput
  status: String
  hidePoliticDetail: DateTime
  tags: TagRelateToManyForCreateInput
  addComments: Boolean
  organizationsElection: OrganizationsElectionRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ElectionAreaRelateToManyForCreateInput {
  create: [ElectionAreaCreateInput!]
  connect: [ElectionAreaWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input OrganizationsElectionRelateToOneForCreateInput {
  create: OrganizationsElectionCreateInput
  connect: OrganizationsElectionWhereUniqueInput
}

type ElectionArea {
  id: ID!
  name: String
  election: Election
  indigenous: String
  description: String
  status: String
  city: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ElectionAreaWhereUniqueInput {
  id: ID
}

input ElectionAreaWhereInput {
  AND: [ElectionAreaWhereInput!]
  OR: [ElectionAreaWhereInput!]
  NOT: [ElectionAreaWhereInput!]
  id: IDFilter
  name: StringFilter
  election: ElectionWhereInput
  indigenous: StringNullableFilter
  description: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ElectionAreaOrderByInput {
  id: OrderDirection
  name: OrderDirection
  indigenous: OrderDirection
  description: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ElectionAreaUpdateInput {
  name: String
  election: ElectionRelateToOneForUpdateInput
  indigenous: String
  description: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ElectionRelateToOneForUpdateInput {
  create: ElectionCreateInput
  connect: ElectionWhereUniqueInput
  disconnect: Boolean
}

input ElectionAreaUpdateArgs {
  where: ElectionAreaWhereUniqueInput!
  data: ElectionAreaUpdateInput!
}

input ElectionAreaCreateInput {
  name: String
  election: ElectionRelateToOneForCreateInput
  indigenous: String
  description: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ElectionRelateToOneForCreateInput {
  create: ElectionCreateInput
  connect: ElectionWhereUniqueInput
}

type Politic {
  id: ID!
  person: PersonElection
  organization: OrganizationsElection
  thread_parent: Politic
  changeLog: String
  desc: String
  content: String
  current_progress: String
  positionChange(where: PoliticPositionChangeWhereInput! = {}, orderBy: [PoliticPositionChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticPositionChangeWhereUniqueInput): [PoliticPositionChange!]
  positionChangeCount(where: PoliticPositionChangeWhereInput! = {}): Int
  factCheck(where: PoliticFactCheckWhereInput! = {}, orderBy: [PoliticFactCheckOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticFactCheckWhereUniqueInput): [PoliticFactCheck!]
  factCheckCount(where: PoliticFactCheckWhereInput! = {}): Int
  expertPoint(where: PoliticExpertWhereInput! = {}, orderBy: [PoliticExpertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticExpertWhereUniqueInput): [PoliticExpert!]
  expertPointCount(where: PoliticExpertWhereInput! = {}): Int
  repeat(where: PoliticRepeatWhereInput! = {}, orderBy: [PoliticRepeatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticRepeatWhereUniqueInput): [PoliticRepeat!]
  repeatCount(where: PoliticRepeatWhereInput! = {}): Int
  controversies(where: PoliticControversieWhereInput! = {}, orderBy: [PoliticControversieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticControversieWhereUniqueInput): [PoliticControversie!]
  controversiesCount(where: PoliticControversieWhereInput! = {}): Int
  response(where: PoliticResponseWhereInput! = {}, orderBy: [PoliticResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticResponseWhereUniqueInput): [PoliticResponse!]
  responseCount(where: PoliticResponseWhereInput! = {}): Int
  source: String
  contributer: String
  timeline(where: PoliticTimelineWhereInput! = {}, orderBy: [PoliticTimelineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticTimelineWhereUniqueInput): [PoliticTimeline!]
  timelineCount(where: PoliticTimelineWhereInput! = {}): Int
  status: String
  tag: Tag
  politicCategory: PoliticCategory
  checked: Boolean
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticWhereUniqueInput {
  id: ID
}

input PoliticWhereInput {
  AND: [PoliticWhereInput!]
  OR: [PoliticWhereInput!]
  NOT: [PoliticWhereInput!]
  id: IDFilter
  person: PersonElectionWhereInput
  organization: OrganizationsElectionWhereInput
  thread_parent: PoliticWhereInput
  changeLog: StringFilter
  desc: StringFilter
  content: StringFilter
  current_progress: StringNullableFilter
  positionChange: PoliticPositionChangeManyRelationFilter
  factCheck: PoliticFactCheckManyRelationFilter
  expertPoint: PoliticExpertManyRelationFilter
  repeat: PoliticRepeatManyRelationFilter
  controversies: PoliticControversieManyRelationFilter
  response: PoliticResponseManyRelationFilter
  source: StringFilter
  contributer: StringFilter
  timeline: PoliticTimelineManyRelationFilter
  status: StringNullableFilter
  tag: TagWhereInput
  politicCategory: PoliticCategoryWhereInput
  checked: BooleanFilter
  reviewed: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticPositionChangeManyRelationFilter {
  every: PoliticPositionChangeWhereInput
  some: PoliticPositionChangeWhereInput
  none: PoliticPositionChangeWhereInput
}

input PoliticFactCheckManyRelationFilter {
  every: PoliticFactCheckWhereInput
  some: PoliticFactCheckWhereInput
  none: PoliticFactCheckWhereInput
}

input PoliticExpertManyRelationFilter {
  every: PoliticExpertWhereInput
  some: PoliticExpertWhereInput
  none: PoliticExpertWhereInput
}

input PoliticRepeatManyRelationFilter {
  every: PoliticRepeatWhereInput
  some: PoliticRepeatWhereInput
  none: PoliticRepeatWhereInput
}

input PoliticControversieManyRelationFilter {
  every: PoliticControversieWhereInput
  some: PoliticControversieWhereInput
  none: PoliticControversieWhereInput
}

input PoliticResponseManyRelationFilter {
  every: PoliticResponseWhereInput
  some: PoliticResponseWhereInput
  none: PoliticResponseWhereInput
}

input PoliticTimelineManyRelationFilter {
  every: PoliticTimelineWhereInput
  some: PoliticTimelineWhereInput
  none: PoliticTimelineWhereInput
}

input PoliticOrderByInput {
  id: OrderDirection
  changeLog: OrderDirection
  desc: OrderDirection
  content: OrderDirection
  current_progress: OrderDirection
  source: OrderDirection
  contributer: OrderDirection
  status: OrderDirection
  checked: OrderDirection
  reviewed: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticUpdateInput {
  person: PersonElectionRelateToOneForUpdateInput
  organization: OrganizationsElectionRelateToOneForUpdateInput
  thread_parent: PoliticRelateToOneForUpdateInput
  changeLog: String
  desc: String
  content: String
  current_progress: String
  positionChange: PoliticPositionChangeRelateToManyForUpdateInput
  factCheck: PoliticFactCheckRelateToManyForUpdateInput
  expertPoint: PoliticExpertRelateToManyForUpdateInput
  repeat: PoliticRepeatRelateToManyForUpdateInput
  controversies: PoliticControversieRelateToManyForUpdateInput
  response: PoliticResponseRelateToManyForUpdateInput
  source: String
  contributer: String
  timeline: PoliticTimelineRelateToManyForUpdateInput
  status: String
  tag: TagRelateToOneForUpdateInput
  politicCategory: PoliticCategoryRelateToOneForUpdateInput
  checked: Boolean
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PersonElectionRelateToOneForUpdateInput {
  create: PersonElectionCreateInput
  connect: PersonElectionWhereUniqueInput
  disconnect: Boolean
}

input PoliticRelateToOneForUpdateInput {
  create: PoliticCreateInput
  connect: PoliticWhereUniqueInput
  disconnect: Boolean
}

input PoliticPositionChangeRelateToManyForUpdateInput {
  disconnect: [PoliticPositionChangeWhereUniqueInput!]
  set: [PoliticPositionChangeWhereUniqueInput!]
  create: [PoliticPositionChangeCreateInput!]
  connect: [PoliticPositionChangeWhereUniqueInput!]
}

input PoliticFactCheckRelateToManyForUpdateInput {
  disconnect: [PoliticFactCheckWhereUniqueInput!]
  set: [PoliticFactCheckWhereUniqueInput!]
  create: [PoliticFactCheckCreateInput!]
  connect: [PoliticFactCheckWhereUniqueInput!]
}

input PoliticExpertRelateToManyForUpdateInput {
  disconnect: [PoliticExpertWhereUniqueInput!]
  set: [PoliticExpertWhereUniqueInput!]
  create: [PoliticExpertCreateInput!]
  connect: [PoliticExpertWhereUniqueInput!]
}

input PoliticRepeatRelateToManyForUpdateInput {
  disconnect: [PoliticRepeatWhereUniqueInput!]
  set: [PoliticRepeatWhereUniqueInput!]
  create: [PoliticRepeatCreateInput!]
  connect: [PoliticRepeatWhereUniqueInput!]
}

input PoliticControversieRelateToManyForUpdateInput {
  disconnect: [PoliticControversieWhereUniqueInput!]
  set: [PoliticControversieWhereUniqueInput!]
  create: [PoliticControversieCreateInput!]
  connect: [PoliticControversieWhereUniqueInput!]
}

input PoliticResponseRelateToManyForUpdateInput {
  disconnect: [PoliticResponseWhereUniqueInput!]
  set: [PoliticResponseWhereUniqueInput!]
  create: [PoliticResponseCreateInput!]
  connect: [PoliticResponseWhereUniqueInput!]
}

input PoliticTimelineRelateToManyForUpdateInput {
  disconnect: [PoliticTimelineWhereUniqueInput!]
  set: [PoliticTimelineWhereUniqueInput!]
  create: [PoliticTimelineCreateInput!]
  connect: [PoliticTimelineWhereUniqueInput!]
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input PoliticCategoryRelateToOneForUpdateInput {
  create: PoliticCategoryCreateInput
  connect: PoliticCategoryWhereUniqueInput
  disconnect: Boolean
}

input PoliticUpdateArgs {
  where: PoliticWhereUniqueInput!
  data: PoliticUpdateInput!
}

input PoliticCreateInput {
  person: PersonElectionRelateToOneForCreateInput
  organization: OrganizationsElectionRelateToOneForCreateInput
  thread_parent: PoliticRelateToOneForCreateInput
  changeLog: String
  desc: String
  content: String
  current_progress: String
  positionChange: PoliticPositionChangeRelateToManyForCreateInput
  factCheck: PoliticFactCheckRelateToManyForCreateInput
  expertPoint: PoliticExpertRelateToManyForCreateInput
  repeat: PoliticRepeatRelateToManyForCreateInput
  controversies: PoliticControversieRelateToManyForCreateInput
  response: PoliticResponseRelateToManyForCreateInput
  source: String
  contributer: String
  timeline: PoliticTimelineRelateToManyForCreateInput
  status: String
  tag: TagRelateToOneForCreateInput
  politicCategory: PoliticCategoryRelateToOneForCreateInput
  checked: Boolean
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PersonElectionRelateToOneForCreateInput {
  create: PersonElectionCreateInput
  connect: PersonElectionWhereUniqueInput
}

input PoliticRelateToOneForCreateInput {
  create: PoliticCreateInput
  connect: PoliticWhereUniqueInput
}

input PoliticPositionChangeRelateToManyForCreateInput {
  create: [PoliticPositionChangeCreateInput!]
  connect: [PoliticPositionChangeWhereUniqueInput!]
}

input PoliticFactCheckRelateToManyForCreateInput {
  create: [PoliticFactCheckCreateInput!]
  connect: [PoliticFactCheckWhereUniqueInput!]
}

input PoliticExpertRelateToManyForCreateInput {
  create: [PoliticExpertCreateInput!]
  connect: [PoliticExpertWhereUniqueInput!]
}

input PoliticRepeatRelateToManyForCreateInput {
  create: [PoliticRepeatCreateInput!]
  connect: [PoliticRepeatWhereUniqueInput!]
}

input PoliticControversieRelateToManyForCreateInput {
  create: [PoliticControversieCreateInput!]
  connect: [PoliticControversieWhereUniqueInput!]
}

input PoliticResponseRelateToManyForCreateInput {
  create: [PoliticResponseCreateInput!]
  connect: [PoliticResponseWhereUniqueInput!]
}

input PoliticTimelineRelateToManyForCreateInput {
  create: [PoliticTimelineCreateInput!]
  connect: [PoliticTimelineWhereUniqueInput!]
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

input PoliticCategoryRelateToOneForCreateInput {
  create: PoliticCategoryCreateInput
  connect: PoliticCategoryWhereUniqueInput
}

type PoliticTimeline {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  eventDate: DateTime
  sortOrder: Int
  content: String
  link: String
  contributer: String
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticTimelineWhereUniqueInput {
  id: ID
}

input PoliticTimelineWhereInput {
  AND: [PoliticTimelineWhereInput!]
  OR: [PoliticTimelineWhereInput!]
  NOT: [PoliticTimelineWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  eventDate: DateTimeNullableFilter
  sortOrder: IntNullableFilter
  content: StringFilter
  link: StringFilter
  contributer: StringFilter
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticManyRelationFilter {
  every: PoliticWhereInput
  some: PoliticWhereInput
  none: PoliticWhereInput
}

input EditingPoliticManyRelationFilter {
  every: EditingPoliticWhereInput
  some: EditingPoliticWhereInput
  none: EditingPoliticWhereInput
}

input PoliticTimelineOrderByInput {
  id: OrderDirection
  eventDate: OrderDirection
  sortOrder: OrderDirection
  content: OrderDirection
  link: OrderDirection
  contributer: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticTimelineUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  eventDate: DateTime
  sortOrder: Int
  content: String
  link: String
  contributer: String
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticRelateToManyForUpdateInput {
  disconnect: [PoliticWhereUniqueInput!]
  set: [PoliticWhereUniqueInput!]
  create: [PoliticCreateInput!]
  connect: [PoliticWhereUniqueInput!]
}

input EditingPoliticRelateToManyForUpdateInput {
  disconnect: [EditingPoliticWhereUniqueInput!]
  set: [EditingPoliticWhereUniqueInput!]
  create: [EditingPoliticCreateInput!]
  connect: [EditingPoliticWhereUniqueInput!]
}

input PoliticTimelineUpdateArgs {
  where: PoliticTimelineWhereUniqueInput!
  data: PoliticTimelineUpdateInput!
}

input PoliticTimelineCreateInput {
  politic: PoliticRelateToManyForCreateInput
  eventDate: DateTime
  sortOrder: Int
  content: String
  link: String
  contributer: String
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PoliticRelateToManyForCreateInput {
  create: [PoliticCreateInput!]
  connect: [PoliticWhereUniqueInput!]
}

input EditingPoliticRelateToManyForCreateInput {
  create: [EditingPoliticCreateInput!]
  connect: [EditingPoliticWhereUniqueInput!]
}

type PoliticExpert {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  expert: String
  avatar: String
  title: String
  expertPointSummary: String
  content: String
  link: String
  contributer: String
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticExpertWhereUniqueInput {
  id: ID
}

input PoliticExpertWhereInput {
  AND: [PoliticExpertWhereInput!]
  OR: [PoliticExpertWhereInput!]
  NOT: [PoliticExpertWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  expert: StringFilter
  avatar: StringFilter
  title: StringFilter
  expertPointSummary: StringFilter
  content: StringFilter
  link: StringFilter
  contributer: StringFilter
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticExpertOrderByInput {
  id: OrderDirection
  expert: OrderDirection
  avatar: OrderDirection
  title: OrderDirection
  expertPointSummary: OrderDirection
  content: OrderDirection
  link: OrderDirection
  contributer: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticExpertUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  expert: String
  avatar: String
  title: String
  expertPointSummary: String
  content: String
  link: String
  contributer: String
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticExpertUpdateArgs {
  where: PoliticExpertWhereUniqueInput!
  data: PoliticExpertUpdateInput!
}

input PoliticExpertCreateInput {
  politic: PoliticRelateToManyForCreateInput
  expert: String
  avatar: String
  title: String
  expertPointSummary: String
  content: String
  link: String
  contributer: String
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PoliticFactCheck {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  factCheckSummary: String
  content: String
  checkResultType: String
  checkResultOther: String
  link: String
  factcheckPartner: FactcheckPartner
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticFactCheckWhereUniqueInput {
  id: ID
}

input PoliticFactCheckWhereInput {
  AND: [PoliticFactCheckWhereInput!]
  OR: [PoliticFactCheckWhereInput!]
  NOT: [PoliticFactCheckWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  factCheckSummary: StringFilter
  content: StringFilter
  checkResultType: StringNullableFilter
  checkResultOther: StringFilter
  link: StringFilter
  factcheckPartner: FactcheckPartnerWhereInput
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticFactCheckOrderByInput {
  id: OrderDirection
  factCheckSummary: OrderDirection
  content: OrderDirection
  checkResultType: OrderDirection
  checkResultOther: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticFactCheckUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  factCheckSummary: String
  content: String
  checkResultType: String
  checkResultOther: String
  link: String
  factcheckPartner: FactcheckPartnerRelateToOneForUpdateInput
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FactcheckPartnerRelateToOneForUpdateInput {
  create: FactcheckPartnerCreateInput
  connect: FactcheckPartnerWhereUniqueInput
  disconnect: Boolean
}

input PoliticFactCheckUpdateArgs {
  where: PoliticFactCheckWhereUniqueInput!
  data: PoliticFactCheckUpdateInput!
}

input PoliticFactCheckCreateInput {
  politic: PoliticRelateToManyForCreateInput
  factCheckSummary: String
  content: String
  checkResultType: String
  checkResultOther: String
  link: String
  factcheckPartner: FactcheckPartnerRelateToOneForCreateInput
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FactcheckPartnerRelateToOneForCreateInput {
  create: FactcheckPartnerCreateInput
  connect: FactcheckPartnerWhereUniqueInput
}

type PoliticPositionChange {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  factcheckPartner: FactcheckPartner
  checkDate: DateTime
  positionChangeSummary: String
  content: String
  isChanged: String
  link: String
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticPositionChangeWhereUniqueInput {
  id: ID
}

input PoliticPositionChangeWhereInput {
  AND: [PoliticPositionChangeWhereInput!]
  OR: [PoliticPositionChangeWhereInput!]
  NOT: [PoliticPositionChangeWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  factcheckPartner: FactcheckPartnerWhereInput
  checkDate: DateTimeFilter
  positionChangeSummary: StringFilter
  content: StringFilter
  isChanged: StringFilter
  link: StringFilter
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input PoliticPositionChangeOrderByInput {
  id: OrderDirection
  checkDate: OrderDirection
  positionChangeSummary: OrderDirection
  content: OrderDirection
  isChanged: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticPositionChangeUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  factcheckPartner: FactcheckPartnerRelateToOneForUpdateInput
  checkDate: DateTime
  positionChangeSummary: String
  content: String
  isChanged: String
  link: String
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticPositionChangeUpdateArgs {
  where: PoliticPositionChangeWhereUniqueInput!
  data: PoliticPositionChangeUpdateInput!
}

input PoliticPositionChangeCreateInput {
  politic: PoliticRelateToManyForCreateInput
  factcheckPartner: FactcheckPartnerRelateToOneForCreateInput
  checkDate: DateTime
  positionChangeSummary: String
  content: String
  isChanged: String
  link: String
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PoliticRepeat {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  repeatSummary: String
  content: String
  factcheckPartner: FactcheckPartner
  link: String
  contributer: String
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticRepeatWhereUniqueInput {
  id: ID
}

input PoliticRepeatWhereInput {
  AND: [PoliticRepeatWhereInput!]
  OR: [PoliticRepeatWhereInput!]
  NOT: [PoliticRepeatWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  repeatSummary: StringFilter
  content: StringFilter
  factcheckPartner: FactcheckPartnerWhereInput
  link: StringFilter
  contributer: StringFilter
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticRepeatOrderByInput {
  id: OrderDirection
  repeatSummary: OrderDirection
  content: OrderDirection
  link: OrderDirection
  contributer: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticRepeatUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  repeatSummary: String
  content: String
  factcheckPartner: FactcheckPartnerRelateToOneForUpdateInput
  link: String
  contributer: String
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticRepeatUpdateArgs {
  where: PoliticRepeatWhereUniqueInput!
  data: PoliticRepeatUpdateInput!
}

input PoliticRepeatCreateInput {
  politic: PoliticRelateToManyForCreateInput
  repeatSummary: String
  content: String
  factcheckPartner: FactcheckPartnerRelateToOneForCreateInput
  link: String
  contributer: String
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PoliticResponse {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  responseName: String
  responsePic: String
  responseTitle: String
  content: String
  link: String
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticResponseWhereUniqueInput {
  id: ID
}

input PoliticResponseWhereInput {
  AND: [PoliticResponseWhereInput!]
  OR: [PoliticResponseWhereInput!]
  NOT: [PoliticResponseWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  responseName: StringFilter
  responsePic: StringFilter
  responseTitle: StringFilter
  content: StringFilter
  link: StringFilter
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticResponseOrderByInput {
  id: OrderDirection
  responseName: OrderDirection
  responsePic: OrderDirection
  responseTitle: OrderDirection
  content: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticResponseUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  responseName: String
  responsePic: String
  responseTitle: String
  content: String
  link: String
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticResponseUpdateArgs {
  where: PoliticResponseWhereUniqueInput!
  data: PoliticResponseUpdateInput!
}

input PoliticResponseCreateInput {
  politic: PoliticRelateToManyForCreateInput
  responseName: String
  responsePic: String
  responseTitle: String
  content: String
  link: String
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PoliticControversie {
  id: ID!
  politic(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicCount(where: PoliticWhereInput! = {}): Int
  content: String
  factcheckPartner: FactcheckPartner
  link: String
  editingPolitic(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticControversieWhereUniqueInput {
  id: ID
}

input PoliticControversieWhereInput {
  AND: [PoliticControversieWhereInput!]
  OR: [PoliticControversieWhereInput!]
  NOT: [PoliticControversieWhereInput!]
  id: IDFilter
  politic: PoliticManyRelationFilter
  content: StringFilter
  factcheckPartner: FactcheckPartnerWhereInput
  link: StringFilter
  editingPolitic: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticControversieOrderByInput {
  id: OrderDirection
  content: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticControversieUpdateInput {
  politic: PoliticRelateToManyForUpdateInput
  content: String
  factcheckPartner: FactcheckPartnerRelateToOneForUpdateInput
  link: String
  editingPolitic: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticControversieUpdateArgs {
  where: PoliticControversieWhereUniqueInput!
  data: PoliticControversieUpdateInput!
}

input PoliticControversieCreateInput {
  politic: PoliticRelateToManyForCreateInput
  content: String
  factcheckPartner: FactcheckPartnerRelateToOneForCreateInput
  link: String
  editingPolitic: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type RelatedPost {
  id: ID!
  name: String
  brief: String
  url: String
  ogIMage: String
  partner(where: FactcheckPartnerWhereInput! = {}, orderBy: [FactcheckPartnerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FactcheckPartnerWhereUniqueInput): [FactcheckPartner!]
  partnerCount(where: FactcheckPartnerWhereInput! = {}): Int
  election(where: ElectionWhereInput! = {}, orderBy: [ElectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionWhereUniqueInput): [Election!]
  electionCount(where: ElectionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input RelatedPostWhereUniqueInput {
  id: ID
}

input RelatedPostWhereInput {
  AND: [RelatedPostWhereInput!]
  OR: [RelatedPostWhereInput!]
  NOT: [RelatedPostWhereInput!]
  id: IDFilter
  name: StringFilter
  brief: StringFilter
  url: StringFilter
  ogIMage: StringFilter
  partner: FactcheckPartnerManyRelationFilter
  election: ElectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FactcheckPartnerManyRelationFilter {
  every: FactcheckPartnerWhereInput
  some: FactcheckPartnerWhereInput
  none: FactcheckPartnerWhereInput
}

input ElectionManyRelationFilter {
  every: ElectionWhereInput
  some: ElectionWhereInput
  none: ElectionWhereInput
}

input RelatedPostOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brief: OrderDirection
  url: OrderDirection
  ogIMage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RelatedPostUpdateInput {
  name: String
  brief: String
  url: String
  ogIMage: String
  partner: FactcheckPartnerRelateToManyForUpdateInput
  election: ElectionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FactcheckPartnerRelateToManyForUpdateInput {
  disconnect: [FactcheckPartnerWhereUniqueInput!]
  set: [FactcheckPartnerWhereUniqueInput!]
  create: [FactcheckPartnerCreateInput!]
  connect: [FactcheckPartnerWhereUniqueInput!]
}

input ElectionRelateToManyForUpdateInput {
  disconnect: [ElectionWhereUniqueInput!]
  set: [ElectionWhereUniqueInput!]
  create: [ElectionCreateInput!]
  connect: [ElectionWhereUniqueInput!]
}

input RelatedPostUpdateArgs {
  where: RelatedPostWhereUniqueInput!
  data: RelatedPostUpdateInput!
}

input RelatedPostCreateInput {
  name: String
  brief: String
  url: String
  ogIMage: String
  partner: FactcheckPartnerRelateToManyForCreateInput
  election: ElectionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FactcheckPartnerRelateToManyForCreateInput {
  create: [FactcheckPartnerCreateInput!]
  connect: [FactcheckPartnerWhereUniqueInput!]
}

input ElectionRelateToManyForCreateInput {
  create: [ElectionCreateInput!]
  connect: [ElectionWhereUniqueInput!]
}

type FactcheckPartner {
  id: ID!
  name: String
  logo: Photo
  slogo: Photo
  year: String
  type: String
  webUrl: String
  posts(where: RelatedPostWhereInput! = {}, orderBy: [RelatedPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RelatedPostWhereUniqueInput): [RelatedPost!]
  postsCount(where: RelatedPostWhereInput! = {}): Int
  positionChange(where: PoliticPositionChangeWhereInput! = {}, orderBy: [PoliticPositionChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticPositionChangeWhereUniqueInput): [PoliticPositionChange!]
  positionChangeCount(where: PoliticPositionChangeWhereInput! = {}): Int
  factCheck(where: PoliticFactCheckWhereInput! = {}, orderBy: [PoliticFactCheckOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticFactCheckWhereUniqueInput): [PoliticFactCheck!]
  factCheckCount(where: PoliticFactCheckWhereInput! = {}): Int
  repeat(where: PoliticRepeatWhereInput! = {}, orderBy: [PoliticRepeatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticRepeatWhereUniqueInput): [PoliticRepeat!]
  repeatCount(where: PoliticRepeatWhereInput! = {}): Int
  controversies(where: PoliticControversieWhereInput! = {}, orderBy: [PoliticControversieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticControversieWhereUniqueInput): [PoliticControversie!]
  controversiesCount(where: PoliticControversieWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FactcheckPartnerWhereUniqueInput {
  id: ID
}

input FactcheckPartnerWhereInput {
  AND: [FactcheckPartnerWhereInput!]
  OR: [FactcheckPartnerWhereInput!]
  NOT: [FactcheckPartnerWhereInput!]
  id: IDFilter
  name: StringFilter
  logo: PhotoWhereInput
  slogo: PhotoWhereInput
  year: StringNullableFilter
  type: StringNullableFilter
  webUrl: StringFilter
  posts: RelatedPostManyRelationFilter
  positionChange: PoliticPositionChangeManyRelationFilter
  factCheck: PoliticFactCheckManyRelationFilter
  repeat: PoliticRepeatManyRelationFilter
  controversies: PoliticControversieManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input RelatedPostManyRelationFilter {
  every: RelatedPostWhereInput
  some: RelatedPostWhereInput
  none: RelatedPostWhereInput
}

input FactcheckPartnerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  year: OrderDirection
  type: OrderDirection
  webUrl: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FactcheckPartnerUpdateInput {
  name: String
  logo: PhotoRelateToOneForUpdateInput
  slogo: PhotoRelateToOneForUpdateInput
  year: String
  type: String
  webUrl: String
  posts: RelatedPostRelateToManyForUpdateInput
  positionChange: PoliticPositionChangeRelateToManyForUpdateInput
  factCheck: PoliticFactCheckRelateToManyForUpdateInput
  repeat: PoliticRepeatRelateToManyForUpdateInput
  controversies: PoliticControversieRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input RelatedPostRelateToManyForUpdateInput {
  disconnect: [RelatedPostWhereUniqueInput!]
  set: [RelatedPostWhereUniqueInput!]
  create: [RelatedPostCreateInput!]
  connect: [RelatedPostWhereUniqueInput!]
}

input FactcheckPartnerUpdateArgs {
  where: FactcheckPartnerWhereUniqueInput!
  data: FactcheckPartnerUpdateInput!
}

input FactcheckPartnerCreateInput {
  name: String
  logo: PhotoRelateToOneForCreateInput
  slogo: PhotoRelateToOneForCreateInput
  year: String
  type: String
  webUrl: String
  posts: RelatedPostRelateToManyForCreateInput
  positionChange: PoliticPositionChangeRelateToManyForCreateInput
  factCheck: PoliticFactCheckRelateToManyForCreateInput
  repeat: PoliticRepeatRelateToManyForCreateInput
  controversies: PoliticControversieRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input RelatedPostRelateToManyForCreateInput {
  create: [RelatedPostCreateInput!]
  connect: [RelatedPostWhereUniqueInput!]
}

type Vote {
  id: ID!
  vote_event: String
  voter: String
  option: String
  group: String
  role: String
  weight: String
  pair: Person
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VoteWhereUniqueInput {
  id: ID
}

input VoteWhereInput {
  AND: [VoteWhereInput!]
  OR: [VoteWhereInput!]
  NOT: [VoteWhereInput!]
  id: IDFilter
  vote_event: StringFilter
  voter: StringFilter
  option: StringFilter
  group: StringFilter
  role: StringFilter
  weight: StringFilter
  pair: PersonWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VoteOrderByInput {
  id: OrderDirection
  vote_event: OrderDirection
  voter: OrderDirection
  option: OrderDirection
  group: OrderDirection
  role: OrderDirection
  weight: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VoteUpdateInput {
  vote_event: String
  voter: String
  option: String
  group: String
  role: String
  weight: String
  pair: PersonRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PersonRelateToOneForUpdateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
  disconnect: Boolean
}

input VoteUpdateArgs {
  where: VoteWhereUniqueInput!
  data: VoteUpdateInput!
}

input VoteCreateInput {
  vote_event: String
  voter: String
  option: String
  group: String
  role: String
  weight: String
  pair: PersonRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PersonRelateToOneForCreateInput {
  create: PersonCreateInput
  connect: PersonWhereUniqueInput
}

type Person {
  id: ID!
  name: String
  alternative: String
  other_names: String
  email: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  facebook: String
  ig: String
  twitter: String
  gender: String
  birth_date_year: Int
  birth_date_month: Int
  birth_date_day: Int
  death_date_year: Int
  death_date_month: Int
  death_date_day: Int
  image: String
  summary: String
  biography: String
  national_identity: String
  contact_details: String
  links: String
  source: String
  status: String
  thread_parent: Person
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  name: StringFilter
  alternative: StringNullableFilter
  other_names: StringNullableFilter
  email: StringNullableFilter
  tags: TagManyRelationFilter
  facebook: StringNullableFilter
  ig: StringNullableFilter
  twitter: StringNullableFilter
  gender: StringNullableFilter
  birth_date_year: IntNullableFilter
  birth_date_month: IntNullableFilter
  birth_date_day: IntNullableFilter
  death_date_year: IntNullableFilter
  death_date_month: IntNullableFilter
  death_date_day: IntNullableFilter
  image: StringNullableFilter
  summary: StringNullableFilter
  biography: StringNullableFilter
  national_identity: StringNullableFilter
  contact_details: StringNullableFilter
  links: StringNullableFilter
  source: StringNullableFilter
  status: StringNullableFilter
  thread_parent: PersonWhereInput
  reviewed: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PersonOrderByInput {
  id: OrderDirection
  name: OrderDirection
  alternative: OrderDirection
  other_names: OrderDirection
  email: OrderDirection
  facebook: OrderDirection
  ig: OrderDirection
  twitter: OrderDirection
  gender: OrderDirection
  birth_date_year: OrderDirection
  birth_date_month: OrderDirection
  birth_date_day: OrderDirection
  death_date_year: OrderDirection
  death_date_month: OrderDirection
  death_date_day: OrderDirection
  image: OrderDirection
  summary: OrderDirection
  biography: OrderDirection
  national_identity: OrderDirection
  contact_details: OrderDirection
  links: OrderDirection
  source: OrderDirection
  status: OrderDirection
  reviewed: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonUpdateInput {
  name: String
  alternative: String
  other_names: String
  email: String
  tags: TagRelateToManyForUpdateInput
  facebook: String
  ig: String
  twitter: String
  gender: String
  birth_date_year: Int
  birth_date_month: Int
  birth_date_day: Int
  death_date_year: Int
  death_date_month: Int
  death_date_day: Int
  image: String
  summary: String
  biography: String
  national_identity: String
  contact_details: String
  links: String
  source: String
  status: String
  thread_parent: PersonRelateToOneForUpdateInput
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  name: String
  alternative: String
  other_names: String
  email: String
  tags: TagRelateToManyForCreateInput
  facebook: String
  ig: String
  twitter: String
  gender: String
  birth_date_year: Int
  birth_date_month: Int
  birth_date_day: Int
  death_date_year: Int
  death_date_month: Int
  death_date_day: Int
  image: String
  summary: String
  biography: String
  national_identity: String
  contact_details: String
  links: String
  source: String
  status: String
  thread_parent: PersonRelateToOneForCreateInput
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Motion {
  id: ID!
  organization: String
  legislative_session: String
  creator: String
  text: String
  identifier: String
  classification: String
  date: String
  requirement: String
  result: String
  vote_events: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MotionWhereUniqueInput {
  id: ID
}

input MotionWhereInput {
  AND: [MotionWhereInput!]
  OR: [MotionWhereInput!]
  NOT: [MotionWhereInput!]
  id: IDFilter
  organization: StringFilter
  legislative_session: StringFilter
  creator: StringFilter
  text: StringFilter
  identifier: StringFilter
  classification: StringFilter
  date: StringFilter
  requirement: StringFilter
  result: StringFilter
  vote_events: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MotionOrderByInput {
  id: OrderDirection
  organization: OrderDirection
  legislative_session: OrderDirection
  creator: OrderDirection
  text: OrderDirection
  identifier: OrderDirection
  classification: OrderDirection
  date: OrderDirection
  requirement: OrderDirection
  result: OrderDirection
  vote_events: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MotionUpdateInput {
  organization: String
  legislative_session: String
  creator: String
  text: String
  identifier: String
  classification: String
  date: String
  requirement: String
  result: String
  vote_events: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MotionUpdateArgs {
  where: MotionWhereUniqueInput!
  data: MotionUpdateInput!
}

input MotionCreateInput {
  organization: String
  legislative_session: String
  creator: String
  text: String
  identifier: String
  classification: String
  date: String
  requirement: String
  result: String
  vote_events: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Organization {
  id: ID!
  name: String
  alternative: String
  other_names: String
  identifiers: String
  classification: String
  abstract: String
  description: String
  founding_date_year: Int
  founding_date_month: Int
  founding_date_day: Int
  dissolution_date_year: Int
  dissolution_date_month: Int
  dissolution_date_day: Int
  image: String
  contact_details: String
  links: String
  address: String
  source: String
  status: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  name: StringFilter
  alternative: StringNullableFilter
  other_names: StringNullableFilter
  identifiers: StringNullableFilter
  classification: StringNullableFilter
  abstract: StringNullableFilter
  description: StringNullableFilter
  founding_date_year: IntNullableFilter
  founding_date_month: IntNullableFilter
  founding_date_day: IntNullableFilter
  dissolution_date_year: IntNullableFilter
  dissolution_date_month: IntNullableFilter
  dissolution_date_day: IntNullableFilter
  image: StringNullableFilter
  contact_details: StringNullableFilter
  links: StringNullableFilter
  address: StringNullableFilter
  source: StringNullableFilter
  status: StringNullableFilter
  tags: TagManyRelationFilter
  reviewed: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input OrganizationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  alternative: OrderDirection
  other_names: OrderDirection
  identifiers: OrderDirection
  classification: OrderDirection
  abstract: OrderDirection
  description: OrderDirection
  founding_date_year: OrderDirection
  founding_date_month: OrderDirection
  founding_date_day: OrderDirection
  dissolution_date_year: OrderDirection
  dissolution_date_month: OrderDirection
  dissolution_date_day: OrderDirection
  image: OrderDirection
  contact_details: OrderDirection
  links: OrderDirection
  address: OrderDirection
  source: OrderDirection
  status: OrderDirection
  reviewed: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrganizationUpdateInput {
  name: String
  alternative: String
  other_names: String
  identifiers: String
  classification: String
  abstract: String
  description: String
  founding_date_year: Int
  founding_date_month: Int
  founding_date_day: Int
  dissolution_date_year: Int
  dissolution_date_month: Int
  dissolution_date_day: Int
  image: String
  contact_details: String
  links: String
  address: String
  source: String
  status: String
  tags: TagRelateToManyForUpdateInput
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  name: String
  alternative: String
  other_names: String
  identifiers: String
  classification: String
  abstract: String
  description: String
  founding_date_year: Int
  founding_date_month: Int
  founding_date_day: Int
  dissolution_date_year: Int
  dissolution_date_month: Int
  dissolution_date_day: Int
  image: String
  contact_details: String
  links: String
  address: String
  source: String
  status: String
  tags: TagRelateToManyForCreateInput
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Collaborate {
  id: ID!
  name: String
  email: String
  feedback: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CollaborateWhereUniqueInput {
  id: ID
}

input CollaborateWhereInput {
  AND: [CollaborateWhereInput!]
  OR: [CollaborateWhereInput!]
  NOT: [CollaborateWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  feedback: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CollaborateOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  feedback: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollaborateUpdateInput {
  name: String
  email: String
  feedback: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CollaborateUpdateArgs {
  where: CollaborateWhereUniqueInput!
  data: CollaborateUpdateInput!
}

input CollaborateCreateInput {
  name: String
  email: String
  feedback: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Membership {
  id: ID!
  label: String
  role: String
  member: Person
  organization: Organization
  posts: Post
  on_behalf_of_id: String
  area: Area
  start_date: DateTime
  end_date: DateTime
  links: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MembershipWhereUniqueInput {
  id: ID
}

input MembershipWhereInput {
  AND: [MembershipWhereInput!]
  OR: [MembershipWhereInput!]
  NOT: [MembershipWhereInput!]
  id: IDFilter
  label: StringFilter
  role: StringFilter
  member: PersonWhereInput
  organization: OrganizationWhereInput
  posts: PostWhereInput
  on_behalf_of_id: StringFilter
  area: AreaWhereInput
  start_date: DateTimeNullableFilter
  end_date: DateTimeNullableFilter
  links: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MembershipOrderByInput {
  id: OrderDirection
  label: OrderDirection
  role: OrderDirection
  on_behalf_of_id: OrderDirection
  start_date: OrderDirection
  end_date: OrderDirection
  links: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MembershipUpdateInput {
  label: String
  role: String
  member: PersonRelateToOneForUpdateInput
  organization: OrganizationRelateToOneForUpdateInput
  posts: PostRelateToOneForUpdateInput
  on_behalf_of_id: String
  area: AreaRelateToOneForUpdateInput
  start_date: DateTime
  end_date: DateTime
  links: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input MembershipUpdateArgs {
  where: MembershipWhereUniqueInput!
  data: MembershipUpdateInput!
}

input MembershipCreateInput {
  label: String
  role: String
  member: PersonRelateToOneForCreateInput
  organization: OrganizationRelateToOneForCreateInput
  posts: PostRelateToOneForCreateInput
  on_behalf_of_id: String
  area: AreaRelateToOneForCreateInput
  start_date: DateTime
  end_date: DateTime
  links: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type ContactDetail {
  id: ID!
  label: String
  type: String
  value: String
  valid_from: DateTime
  valid_until: DateTime
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ContactDetailWhereUniqueInput {
  id: ID
}

input ContactDetailWhereInput {
  AND: [ContactDetailWhereInput!]
  OR: [ContactDetailWhereInput!]
  NOT: [ContactDetailWhereInput!]
  id: IDFilter
  label: StringFilter
  type: StringFilter
  value: StringFilter
  valid_from: DateTimeNullableFilter
  valid_until: DateTimeNullableFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ContactDetailOrderByInput {
  id: OrderDirection
  label: OrderDirection
  type: OrderDirection
  value: OrderDirection
  valid_from: OrderDirection
  valid_until: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContactDetailUpdateInput {
  label: String
  type: String
  value: String
  valid_from: DateTime
  valid_until: DateTime
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ContactDetailUpdateArgs {
  where: ContactDetailWhereUniqueInput!
  data: ContactDetailUpdateInput!
}

input ContactDetailCreateInput {
  label: String
  type: String
  value: String
  valid_from: DateTime
  valid_until: DateTime
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Count {
  id: ID!
  option: String
  value: String
  group: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CountWhereUniqueInput {
  id: ID
}

input CountWhereInput {
  AND: [CountWhereInput!]
  OR: [CountWhereInput!]
  NOT: [CountWhereInput!]
  id: IDFilter
  option: StringFilter
  value: StringFilter
  group: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CountOrderByInput {
  id: OrderDirection
  option: OrderDirection
  value: OrderDirection
  group: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CountUpdateInput {
  option: String
  value: String
  group: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CountUpdateArgs {
  where: CountWhereUniqueInput!
  data: CountUpdateInput!
}

input CountCreateInput {
  option: String
  value: String
  group: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type OrganizationsElection {
  id: ID!
  organization_id: Organization
  election_year_year: Int
  election_year_month: Int
  election_year_day: Int
  number: String
  votes_obtained_number: String
  seats: String
  source: String
  elections: Election
  politics(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicsCount(where: PoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input OrganizationsElectionWhereUniqueInput {
  id: ID
}

input OrganizationsElectionWhereInput {
  AND: [OrganizationsElectionWhereInput!]
  OR: [OrganizationsElectionWhereInput!]
  NOT: [OrganizationsElectionWhereInput!]
  id: IDFilter
  organization_id: OrganizationWhereInput
  election_year_year: IntNullableFilter
  election_year_month: IntNullableFilter
  election_year_day: IntNullableFilter
  number: StringFilter
  votes_obtained_number: StringFilter
  seats: StringFilter
  source: StringFilter
  elections: ElectionWhereInput
  politics: PoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input OrganizationsElectionOrderByInput {
  id: OrderDirection
  election_year_year: OrderDirection
  election_year_month: OrderDirection
  election_year_day: OrderDirection
  number: OrderDirection
  votes_obtained_number: OrderDirection
  seats: OrderDirection
  source: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrganizationsElectionUpdateInput {
  organization_id: OrganizationRelateToOneForUpdateInput
  election_year_year: Int
  election_year_month: Int
  election_year_day: Int
  number: String
  votes_obtained_number: String
  seats: String
  source: String
  elections: ElectionRelateToOneForUpdateInput
  politics: PoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input OrganizationsElectionUpdateArgs {
  where: OrganizationsElectionWhereUniqueInput!
  data: OrganizationsElectionUpdateInput!
}

input OrganizationsElectionCreateInput {
  organization_id: OrganizationRelateToOneForCreateInput
  election_year_year: Int
  election_year_month: Int
  election_year_day: Int
  number: String
  votes_obtained_number: String
  seats: String
  source: String
  elections: ElectionRelateToOneForCreateInput
  politics: PoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type OrganizationsRelationship {
  id: ID!
  organization_id: Organization
  related_organization_id: Organization
  relative: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input OrganizationsRelationshipWhereUniqueInput {
  id: ID
}

input OrganizationsRelationshipWhereInput {
  AND: [OrganizationsRelationshipWhereInput!]
  OR: [OrganizationsRelationshipWhereInput!]
  NOT: [OrganizationsRelationshipWhereInput!]
  id: IDFilter
  organization_id: OrganizationWhereInput
  related_organization_id: OrganizationWhereInput
  relative: StringNullableFilter
  start_date_year: IntNullableFilter
  start_date_month: IntNullableFilter
  start_date_day: IntNullableFilter
  end_date_year: IntNullableFilter
  end_date_month: IntNullableFilter
  end_date_day: IntNullableFilter
  source: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input OrganizationsRelationshipOrderByInput {
  id: OrderDirection
  relative: OrderDirection
  start_date_year: OrderDirection
  start_date_month: OrderDirection
  start_date_day: OrderDirection
  end_date_year: OrderDirection
  end_date_month: OrderDirection
  end_date_day: OrderDirection
  source: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrganizationsRelationshipUpdateInput {
  organization_id: OrganizationRelateToOneForUpdateInput
  related_organization_id: OrganizationRelateToOneForUpdateInput
  relative: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input OrganizationsRelationshipUpdateArgs {
  where: OrganizationsRelationshipWhereUniqueInput!
  data: OrganizationsRelationshipUpdateInput!
}

input OrganizationsRelationshipCreateInput {
  organization_id: OrganizationRelateToOneForCreateInput
  related_organization_id: OrganizationRelateToOneForCreateInput
  relative: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PersonElection {
  id: ID!
  person_id: Person
  election: Election
  mainCandidate: PersonElection
  name: String
  party: Organization
  legislatoratlarge_number: String
  number: String
  electoral_district: ElectionArea
  votes_obtained_number: String
  votes_obtained_percentage: String
  elected: Boolean
  incumbent: Boolean
  source: String
  politicSource: String
  organization: PersonOrganization
  politics(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicsCount(where: PoliticWhereInput! = {}): Int
  status: String
  editingPolitics(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPoliticsCount(where: EditingPoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PersonElectionWhereUniqueInput {
  id: ID
}

input PersonElectionWhereInput {
  AND: [PersonElectionWhereInput!]
  OR: [PersonElectionWhereInput!]
  NOT: [PersonElectionWhereInput!]
  id: IDFilter
  person_id: PersonWhereInput
  election: ElectionWhereInput
  mainCandidate: PersonElectionWhereInput
  party: OrganizationWhereInput
  legislatoratlarge_number: StringFilter
  number: StringFilter
  electoral_district: ElectionAreaWhereInput
  votes_obtained_number: StringFilter
  votes_obtained_percentage: StringFilter
  elected: BooleanFilter
  incumbent: BooleanFilter
  source: StringFilter
  politicSource: StringFilter
  organization: PersonOrganizationWhereInput
  politics: PoliticManyRelationFilter
  status: StringNullableFilter
  editingPolitics: EditingPoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PersonElectionOrderByInput {
  id: OrderDirection
  legislatoratlarge_number: OrderDirection
  number: OrderDirection
  votes_obtained_number: OrderDirection
  votes_obtained_percentage: OrderDirection
  elected: OrderDirection
  incumbent: OrderDirection
  source: OrderDirection
  politicSource: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonElectionUpdateInput {
  person_id: PersonRelateToOneForUpdateInput
  election: ElectionRelateToOneForUpdateInput
  mainCandidate: PersonElectionRelateToOneForUpdateInput
  party: OrganizationRelateToOneForUpdateInput
  legislatoratlarge_number: String
  number: String
  electoral_district: ElectionAreaRelateToOneForUpdateInput
  votes_obtained_number: String
  votes_obtained_percentage: String
  elected: Boolean
  incumbent: Boolean
  source: String
  politicSource: String
  organization: PersonOrganizationRelateToOneForUpdateInput
  politics: PoliticRelateToManyForUpdateInput
  status: String
  editingPolitics: EditingPoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ElectionAreaRelateToOneForUpdateInput {
  create: ElectionAreaCreateInput
  connect: ElectionAreaWhereUniqueInput
  disconnect: Boolean
}

input PersonOrganizationRelateToOneForUpdateInput {
  create: PersonOrganizationCreateInput
  connect: PersonOrganizationWhereUniqueInput
  disconnect: Boolean
}

input PersonElectionUpdateArgs {
  where: PersonElectionWhereUniqueInput!
  data: PersonElectionUpdateInput!
}

input PersonElectionCreateInput {
  person_id: PersonRelateToOneForCreateInput
  election: ElectionRelateToOneForCreateInput
  mainCandidate: PersonElectionRelateToOneForCreateInput
  party: OrganizationRelateToOneForCreateInput
  legislatoratlarge_number: String
  number: String
  electoral_district: ElectionAreaRelateToOneForCreateInput
  votes_obtained_number: String
  votes_obtained_percentage: String
  elected: Boolean
  incumbent: Boolean
  source: String
  politicSource: String
  organization: PersonOrganizationRelateToOneForCreateInput
  politics: PoliticRelateToManyForCreateInput
  status: String
  editingPolitics: EditingPoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ElectionAreaRelateToOneForCreateInput {
  create: ElectionAreaCreateInput
  connect: ElectionAreaWhereUniqueInput
}

input PersonOrganizationRelateToOneForCreateInput {
  create: PersonOrganizationCreateInput
  connect: PersonOrganizationWhereUniqueInput
}

type PersonOrganization {
  id: ID!
  person_id: Person
  organization_id: Organization
  election: PersonElection
  role: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PersonOrganizationWhereUniqueInput {
  id: ID
}

input PersonOrganizationWhereInput {
  AND: [PersonOrganizationWhereInput!]
  OR: [PersonOrganizationWhereInput!]
  NOT: [PersonOrganizationWhereInput!]
  id: IDFilter
  person_id: PersonWhereInput
  organization_id: OrganizationWhereInput
  election: PersonElectionWhereInput
  role: StringNullableFilter
  start_date_year: IntNullableFilter
  start_date_month: IntNullableFilter
  start_date_day: IntNullableFilter
  end_date_year: IntNullableFilter
  end_date_month: IntNullableFilter
  end_date_day: IntNullableFilter
  source: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PersonOrganizationOrderByInput {
  id: OrderDirection
  role: OrderDirection
  start_date_year: OrderDirection
  start_date_month: OrderDirection
  start_date_day: OrderDirection
  end_date_year: OrderDirection
  end_date_month: OrderDirection
  end_date_day: OrderDirection
  source: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonOrganizationUpdateInput {
  person_id: PersonRelateToOneForUpdateInput
  organization_id: OrganizationRelateToOneForUpdateInput
  election: PersonElectionRelateToOneForUpdateInput
  role: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PersonOrganizationUpdateArgs {
  where: PersonOrganizationWhereUniqueInput!
  data: PersonOrganizationUpdateInput!
}

input PersonOrganizationCreateInput {
  person_id: PersonRelateToOneForCreateInput
  organization_id: OrganizationRelateToOneForCreateInput
  election: PersonElectionRelateToOneForCreateInput
  role: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PersonPublication {
  id: ID!
  person_id: Person
  organization_id: Organization
  role: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PersonPublicationWhereUniqueInput {
  id: ID
}

input PersonPublicationWhereInput {
  AND: [PersonPublicationWhereInput!]
  OR: [PersonPublicationWhereInput!]
  NOT: [PersonPublicationWhereInput!]
  id: IDFilter
  person_id: PersonWhereInput
  organization_id: OrganizationWhereInput
  role: StringFilter
  start_date_year: IntNullableFilter
  start_date_month: IntNullableFilter
  start_date_day: IntNullableFilter
  end_date_year: IntNullableFilter
  end_date_month: IntNullableFilter
  end_date_day: IntNullableFilter
  source: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PersonPublicationOrderByInput {
  id: OrderDirection
  role: OrderDirection
  start_date_year: OrderDirection
  start_date_month: OrderDirection
  start_date_day: OrderDirection
  end_date_year: OrderDirection
  end_date_month: OrderDirection
  end_date_day: OrderDirection
  source: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonPublicationUpdateInput {
  person_id: PersonRelateToOneForUpdateInput
  organization_id: OrganizationRelateToOneForUpdateInput
  role: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PersonPublicationUpdateArgs {
  where: PersonPublicationWhereUniqueInput!
  data: PersonPublicationUpdateInput!
}

input PersonPublicationCreateInput {
  person_id: PersonRelateToOneForCreateInput
  organization_id: OrganizationRelateToOneForCreateInput
  role: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PersonRelationship {
  id: ID!
  person_id: Person
  related_person_id: Person
  relative: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PersonRelationshipWhereUniqueInput {
  id: ID
}

input PersonRelationshipWhereInput {
  AND: [PersonRelationshipWhereInput!]
  OR: [PersonRelationshipWhereInput!]
  NOT: [PersonRelationshipWhereInput!]
  id: IDFilter
  person_id: PersonWhereInput
  related_person_id: PersonWhereInput
  relative: StringFilter
  start_date_year: IntNullableFilter
  start_date_month: IntNullableFilter
  start_date_day: IntNullableFilter
  end_date_year: IntNullableFilter
  end_date_month: IntNullableFilter
  end_date_day: IntNullableFilter
  source: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PersonRelationshipOrderByInput {
  id: OrderDirection
  relative: OrderDirection
  start_date_year: OrderDirection
  start_date_month: OrderDirection
  start_date_day: OrderDirection
  end_date_year: OrderDirection
  end_date_month: OrderDirection
  end_date_day: OrderDirection
  source: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PersonRelationshipUpdateInput {
  person_id: PersonRelateToOneForUpdateInput
  related_person_id: PersonRelateToOneForUpdateInput
  relative: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PersonRelationshipUpdateArgs {
  where: PersonRelationshipWhereUniqueInput!
  data: PersonRelationshipUpdateInput!
}

input PersonRelationshipCreateInput {
  person_id: PersonRelateToOneForCreateInput
  related_person_id: PersonRelateToOneForCreateInput
  relative: String
  start_date_year: Int
  start_date_month: Int
  start_date_day: Int
  end_date_year: Int
  end_date_month: Int
  end_date_day: Int
  source: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Lawsuit {
  id: ID!
  person: Person
  crime_year: String
  desc: String
  source: String
  contributer: String
  judge_number: String
  judge_desc: String
  judge_content: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input LawsuitWhereUniqueInput {
  id: ID
}

input LawsuitWhereInput {
  AND: [LawsuitWhereInput!]
  OR: [LawsuitWhereInput!]
  NOT: [LawsuitWhereInput!]
  id: IDFilter
  person: PersonWhereInput
  crime_year: StringFilter
  desc: StringFilter
  source: StringFilter
  contributer: StringFilter
  judge_number: StringFilter
  judge_desc: StringFilter
  judge_content: StringFilter
  status: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LawsuitOrderByInput {
  id: OrderDirection
  crime_year: OrderDirection
  desc: OrderDirection
  source: OrderDirection
  contributer: OrderDirection
  judge_number: OrderDirection
  judge_desc: OrderDirection
  judge_content: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LawsuitUpdateInput {
  person: PersonRelateToOneForUpdateInput
  crime_year: String
  desc: String
  source: String
  contributer: String
  judge_number: String
  judge_desc: String
  judge_content: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LawsuitUpdateArgs {
  where: LawsuitWhereUniqueInput!
  data: LawsuitUpdateInput!
}

input LawsuitCreateInput {
  person: PersonRelateToOneForCreateInput
  crime_year: String
  desc: String
  source: String
  contributer: String
  judge_number: String
  judge_desc: String
  judge_content: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Tag {
  id: ID!
  name: String
  brief: String
  ogTitle: String
  ogDescription: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  brief: StringFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  isFeatured: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brief: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  brief: String
  ogTitle: String
  ogDescription: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  brief: String
  ogTitle: String
  ogDescription: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PoliticCategory {
  id: ID!
  name: String
  brief: String
  displayColor: String
  ogTitle: String
  ogDescription: String
  isFeatured: Boolean
  politics(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politicsCount(where: PoliticWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PoliticCategoryWhereUniqueInput {
  id: ID
  name: String
}

input PoliticCategoryWhereInput {
  AND: [PoliticCategoryWhereInput!]
  OR: [PoliticCategoryWhereInput!]
  NOT: [PoliticCategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  brief: StringFilter
  displayColor: StringFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  isFeatured: BooleanFilter
  politics: PoliticManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PoliticCategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brief: OrderDirection
  displayColor: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PoliticCategoryUpdateInput {
  name: String
  brief: String
  displayColor: String
  ogTitle: String
  ogDescription: String
  isFeatured: Boolean
  politics: PoliticRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PoliticCategoryUpdateArgs {
  where: PoliticCategoryWhereUniqueInput!
  data: PoliticCategoryUpdateInput!
}

input PoliticCategoryCreateInput {
  name: String
  brief: String
  displayColor: String
  ogTitle: String
  ogDescription: String
  isFeatured: Boolean
  politics: PoliticRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  file: FileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type EditingPolitic {
  id: ID!
  person: PersonElection
  organization: OrganizationsElection
  thread_parent: Politic
  changeLog: String
  desc: String
  content: String
  current_progress: String
  positionChange(where: PoliticPositionChangeWhereInput! = {}, orderBy: [PoliticPositionChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticPositionChangeWhereUniqueInput): [PoliticPositionChange!]
  positionChangeCount(where: PoliticPositionChangeWhereInput! = {}): Int
  factCheck(where: PoliticFactCheckWhereInput! = {}, orderBy: [PoliticFactCheckOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticFactCheckWhereUniqueInput): [PoliticFactCheck!]
  factCheckCount(where: PoliticFactCheckWhereInput! = {}): Int
  expertPoint(where: PoliticExpertWhereInput! = {}, orderBy: [PoliticExpertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticExpertWhereUniqueInput): [PoliticExpert!]
  expertPointCount(where: PoliticExpertWhereInput! = {}): Int
  repeat(where: PoliticRepeatWhereInput! = {}, orderBy: [PoliticRepeatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticRepeatWhereUniqueInput): [PoliticRepeat!]
  repeatCount(where: PoliticRepeatWhereInput! = {}): Int
  controversies(where: PoliticControversieWhereInput! = {}, orderBy: [PoliticControversieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticControversieWhereUniqueInput): [PoliticControversie!]
  controversiesCount(where: PoliticControversieWhereInput! = {}): Int
  response(where: PoliticResponseWhereInput! = {}, orderBy: [PoliticResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticResponseWhereUniqueInput): [PoliticResponse!]
  responseCount(where: PoliticResponseWhereInput! = {}): Int
  source: String
  contributer: String
  timeline(where: PoliticTimelineWhereInput! = {}, orderBy: [PoliticTimelineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticTimelineWhereUniqueInput): [PoliticTimeline!]
  timelineCount(where: PoliticTimelineWhereInput! = {}): Int
  status: String
  tag: Tag
  politicCategory: PoliticCategory
  checked: Boolean
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EditingPoliticWhereUniqueInput {
  id: ID
}

input EditingPoliticWhereInput {
  AND: [EditingPoliticWhereInput!]
  OR: [EditingPoliticWhereInput!]
  NOT: [EditingPoliticWhereInput!]
  id: IDFilter
  person: PersonElectionWhereInput
  organization: OrganizationsElectionWhereInput
  thread_parent: PoliticWhereInput
  changeLog: StringFilter
  desc: StringFilter
  content: StringFilter
  current_progress: StringNullableFilter
  positionChange: PoliticPositionChangeManyRelationFilter
  factCheck: PoliticFactCheckManyRelationFilter
  expertPoint: PoliticExpertManyRelationFilter
  repeat: PoliticRepeatManyRelationFilter
  controversies: PoliticControversieManyRelationFilter
  response: PoliticResponseManyRelationFilter
  source: StringFilter
  contributer: StringFilter
  timeline: PoliticTimelineManyRelationFilter
  status: StringNullableFilter
  tag: TagWhereInput
  politicCategory: PoliticCategoryWhereInput
  checked: BooleanFilter
  reviewed: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EditingPoliticOrderByInput {
  id: OrderDirection
  changeLog: OrderDirection
  desc: OrderDirection
  content: OrderDirection
  current_progress: OrderDirection
  source: OrderDirection
  contributer: OrderDirection
  status: OrderDirection
  checked: OrderDirection
  reviewed: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditingPoliticUpdateInput {
  person: PersonElectionRelateToOneForUpdateInput
  organization: OrganizationsElectionRelateToOneForUpdateInput
  thread_parent: PoliticRelateToOneForUpdateInput
  changeLog: String
  desc: String
  content: String
  current_progress: String
  positionChange: PoliticPositionChangeRelateToManyForUpdateInput
  factCheck: PoliticFactCheckRelateToManyForUpdateInput
  expertPoint: PoliticExpertRelateToManyForUpdateInput
  repeat: PoliticRepeatRelateToManyForUpdateInput
  controversies: PoliticControversieRelateToManyForUpdateInput
  response: PoliticResponseRelateToManyForUpdateInput
  source: String
  contributer: String
  timeline: PoliticTimelineRelateToManyForUpdateInput
  status: String
  tag: TagRelateToOneForUpdateInput
  politicCategory: PoliticCategoryRelateToOneForUpdateInput
  checked: Boolean
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EditingPoliticUpdateArgs {
  where: EditingPoliticWhereUniqueInput!
  data: EditingPoliticUpdateInput!
}

input EditingPoliticCreateInput {
  person: PersonElectionRelateToOneForCreateInput
  organization: OrganizationsElectionRelateToOneForCreateInput
  thread_parent: PoliticRelateToOneForCreateInput
  changeLog: String
  desc: String
  content: String
  current_progress: String
  positionChange: PoliticPositionChangeRelateToManyForCreateInput
  factCheck: PoliticFactCheckRelateToManyForCreateInput
  expertPoint: PoliticExpertRelateToManyForCreateInput
  repeat: PoliticRepeatRelateToManyForCreateInput
  controversies: PoliticControversieRelateToManyForCreateInput
  response: PoliticResponseRelateToManyForCreateInput
  source: String
  contributer: String
  timeline: PoliticTimelineRelateToManyForCreateInput
  status: String
  tag: TagRelateToOneForCreateInput
  politicCategory: PoliticCategoryRelateToOneForCreateInput
  checked: Boolean
  reviewed: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createArea(data: AreaCreateInput!): Area
  createAreas(data: [AreaCreateInput!]!): [Area]
  updateArea(where: AreaWhereUniqueInput!, data: AreaUpdateInput!): Area
  updateAreas(data: [AreaUpdateArgs!]!): [Area]
  deleteArea(where: AreaWhereUniqueInput!): Area
  deleteAreas(where: [AreaWhereUniqueInput!]!): [Area]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createElection(data: ElectionCreateInput!): Election
  createElections(data: [ElectionCreateInput!]!): [Election]
  updateElection(where: ElectionWhereUniqueInput!, data: ElectionUpdateInput!): Election
  updateElections(data: [ElectionUpdateArgs!]!): [Election]
  deleteElection(where: ElectionWhereUniqueInput!): Election
  deleteElections(where: [ElectionWhereUniqueInput!]!): [Election]
  createElectionArea(data: ElectionAreaCreateInput!): ElectionArea
  createElectionAreas(data: [ElectionAreaCreateInput!]!): [ElectionArea]
  updateElectionArea(where: ElectionAreaWhereUniqueInput!, data: ElectionAreaUpdateInput!): ElectionArea
  updateElectionAreas(data: [ElectionAreaUpdateArgs!]!): [ElectionArea]
  deleteElectionArea(where: ElectionAreaWhereUniqueInput!): ElectionArea
  deleteElectionAreas(where: [ElectionAreaWhereUniqueInput!]!): [ElectionArea]
  createPolitic(data: PoliticCreateInput!): Politic
  createPolitics(data: [PoliticCreateInput!]!): [Politic]
  updatePolitic(where: PoliticWhereUniqueInput!, data: PoliticUpdateInput!): Politic
  updatePolitics(data: [PoliticUpdateArgs!]!): [Politic]
  deletePolitic(where: PoliticWhereUniqueInput!): Politic
  deletePolitics(where: [PoliticWhereUniqueInput!]!): [Politic]
  createPoliticTimeline(data: PoliticTimelineCreateInput!): PoliticTimeline
  createPoliticTimelines(data: [PoliticTimelineCreateInput!]!): [PoliticTimeline]
  updatePoliticTimeline(where: PoliticTimelineWhereUniqueInput!, data: PoliticTimelineUpdateInput!): PoliticTimeline
  updatePoliticTimelines(data: [PoliticTimelineUpdateArgs!]!): [PoliticTimeline]
  deletePoliticTimeline(where: PoliticTimelineWhereUniqueInput!): PoliticTimeline
  deletePoliticTimelines(where: [PoliticTimelineWhereUniqueInput!]!): [PoliticTimeline]
  createPoliticExpert(data: PoliticExpertCreateInput!): PoliticExpert
  createPoliticExperts(data: [PoliticExpertCreateInput!]!): [PoliticExpert]
  updatePoliticExpert(where: PoliticExpertWhereUniqueInput!, data: PoliticExpertUpdateInput!): PoliticExpert
  updatePoliticExperts(data: [PoliticExpertUpdateArgs!]!): [PoliticExpert]
  deletePoliticExpert(where: PoliticExpertWhereUniqueInput!): PoliticExpert
  deletePoliticExperts(where: [PoliticExpertWhereUniqueInput!]!): [PoliticExpert]
  createPoliticFactCheck(data: PoliticFactCheckCreateInput!): PoliticFactCheck
  createPoliticFactChecks(data: [PoliticFactCheckCreateInput!]!): [PoliticFactCheck]
  updatePoliticFactCheck(where: PoliticFactCheckWhereUniqueInput!, data: PoliticFactCheckUpdateInput!): PoliticFactCheck
  updatePoliticFactChecks(data: [PoliticFactCheckUpdateArgs!]!): [PoliticFactCheck]
  deletePoliticFactCheck(where: PoliticFactCheckWhereUniqueInput!): PoliticFactCheck
  deletePoliticFactChecks(where: [PoliticFactCheckWhereUniqueInput!]!): [PoliticFactCheck]
  createPoliticPositionChange(data: PoliticPositionChangeCreateInput!): PoliticPositionChange
  createPoliticPositionChanges(data: [PoliticPositionChangeCreateInput!]!): [PoliticPositionChange]
  updatePoliticPositionChange(where: PoliticPositionChangeWhereUniqueInput!, data: PoliticPositionChangeUpdateInput!): PoliticPositionChange
  updatePoliticPositionChanges(data: [PoliticPositionChangeUpdateArgs!]!): [PoliticPositionChange]
  deletePoliticPositionChange(where: PoliticPositionChangeWhereUniqueInput!): PoliticPositionChange
  deletePoliticPositionChanges(where: [PoliticPositionChangeWhereUniqueInput!]!): [PoliticPositionChange]
  createPoliticRepeat(data: PoliticRepeatCreateInput!): PoliticRepeat
  createPoliticRepeats(data: [PoliticRepeatCreateInput!]!): [PoliticRepeat]
  updatePoliticRepeat(where: PoliticRepeatWhereUniqueInput!, data: PoliticRepeatUpdateInput!): PoliticRepeat
  updatePoliticRepeats(data: [PoliticRepeatUpdateArgs!]!): [PoliticRepeat]
  deletePoliticRepeat(where: PoliticRepeatWhereUniqueInput!): PoliticRepeat
  deletePoliticRepeats(where: [PoliticRepeatWhereUniqueInput!]!): [PoliticRepeat]
  createPoliticResponse(data: PoliticResponseCreateInput!): PoliticResponse
  createPoliticResponses(data: [PoliticResponseCreateInput!]!): [PoliticResponse]
  updatePoliticResponse(where: PoliticResponseWhereUniqueInput!, data: PoliticResponseUpdateInput!): PoliticResponse
  updatePoliticResponses(data: [PoliticResponseUpdateArgs!]!): [PoliticResponse]
  deletePoliticResponse(where: PoliticResponseWhereUniqueInput!): PoliticResponse
  deletePoliticResponses(where: [PoliticResponseWhereUniqueInput!]!): [PoliticResponse]
  createPoliticControversie(data: PoliticControversieCreateInput!): PoliticControversie
  createPoliticControversies(data: [PoliticControversieCreateInput!]!): [PoliticControversie]
  updatePoliticControversie(where: PoliticControversieWhereUniqueInput!, data: PoliticControversieUpdateInput!): PoliticControversie
  updatePoliticControversies(data: [PoliticControversieUpdateArgs!]!): [PoliticControversie]
  deletePoliticControversie(where: PoliticControversieWhereUniqueInput!): PoliticControversie
  deletePoliticControversies(where: [PoliticControversieWhereUniqueInput!]!): [PoliticControversie]
  createRelatedPost(data: RelatedPostCreateInput!): RelatedPost
  createRelatedPosts(data: [RelatedPostCreateInput!]!): [RelatedPost]
  updateRelatedPost(where: RelatedPostWhereUniqueInput!, data: RelatedPostUpdateInput!): RelatedPost
  updateRelatedPosts(data: [RelatedPostUpdateArgs!]!): [RelatedPost]
  deleteRelatedPost(where: RelatedPostWhereUniqueInput!): RelatedPost
  deleteRelatedPosts(where: [RelatedPostWhereUniqueInput!]!): [RelatedPost]
  createFactcheckPartner(data: FactcheckPartnerCreateInput!): FactcheckPartner
  createFactcheckPartners(data: [FactcheckPartnerCreateInput!]!): [FactcheckPartner]
  updateFactcheckPartner(where: FactcheckPartnerWhereUniqueInput!, data: FactcheckPartnerUpdateInput!): FactcheckPartner
  updateFactcheckPartners(data: [FactcheckPartnerUpdateArgs!]!): [FactcheckPartner]
  deleteFactcheckPartner(where: FactcheckPartnerWhereUniqueInput!): FactcheckPartner
  deleteFactcheckPartners(where: [FactcheckPartnerWhereUniqueInput!]!): [FactcheckPartner]
  createVote(data: VoteCreateInput!): Vote
  createVotes(data: [VoteCreateInput!]!): [Vote]
  updateVote(where: VoteWhereUniqueInput!, data: VoteUpdateInput!): Vote
  updateVotes(data: [VoteUpdateArgs!]!): [Vote]
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteVotes(where: [VoteWhereUniqueInput!]!): [Vote]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createMotion(data: MotionCreateInput!): Motion
  createMotions(data: [MotionCreateInput!]!): [Motion]
  updateMotion(where: MotionWhereUniqueInput!, data: MotionUpdateInput!): Motion
  updateMotions(data: [MotionUpdateArgs!]!): [Motion]
  deleteMotion(where: MotionWhereUniqueInput!): Motion
  deleteMotions(where: [MotionWhereUniqueInput!]!): [Motion]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(where: OrganizationWhereUniqueInput!, data: OrganizationUpdateInput!): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  createCollaborate(data: CollaborateCreateInput!): Collaborate
  createCollaborates(data: [CollaborateCreateInput!]!): [Collaborate]
  updateCollaborate(where: CollaborateWhereUniqueInput!, data: CollaborateUpdateInput!): Collaborate
  updateCollaborates(data: [CollaborateUpdateArgs!]!): [Collaborate]
  deleteCollaborate(where: CollaborateWhereUniqueInput!): Collaborate
  deleteCollaborates(where: [CollaborateWhereUniqueInput!]!): [Collaborate]
  createMembership(data: MembershipCreateInput!): Membership
  createMemberships(data: [MembershipCreateInput!]!): [Membership]
  updateMembership(where: MembershipWhereUniqueInput!, data: MembershipUpdateInput!): Membership
  updateMemberships(data: [MembershipUpdateArgs!]!): [Membership]
  deleteMembership(where: MembershipWhereUniqueInput!): Membership
  deleteMemberships(where: [MembershipWhereUniqueInput!]!): [Membership]
  createContactDetail(data: ContactDetailCreateInput!): ContactDetail
  createContactDetails(data: [ContactDetailCreateInput!]!): [ContactDetail]
  updateContactDetail(where: ContactDetailWhereUniqueInput!, data: ContactDetailUpdateInput!): ContactDetail
  updateContactDetails(data: [ContactDetailUpdateArgs!]!): [ContactDetail]
  deleteContactDetail(where: ContactDetailWhereUniqueInput!): ContactDetail
  deleteContactDetails(where: [ContactDetailWhereUniqueInput!]!): [ContactDetail]
  createCount(data: CountCreateInput!): Count
  createCounts(data: [CountCreateInput!]!): [Count]
  updateCount(where: CountWhereUniqueInput!, data: CountUpdateInput!): Count
  updateCounts(data: [CountUpdateArgs!]!): [Count]
  deleteCount(where: CountWhereUniqueInput!): Count
  deleteCounts(where: [CountWhereUniqueInput!]!): [Count]
  createOrganizationsElection(data: OrganizationsElectionCreateInput!): OrganizationsElection
  createOrganizationsElections(data: [OrganizationsElectionCreateInput!]!): [OrganizationsElection]
  updateOrganizationsElection(where: OrganizationsElectionWhereUniqueInput!, data: OrganizationsElectionUpdateInput!): OrganizationsElection
  updateOrganizationsElections(data: [OrganizationsElectionUpdateArgs!]!): [OrganizationsElection]
  deleteOrganizationsElection(where: OrganizationsElectionWhereUniqueInput!): OrganizationsElection
  deleteOrganizationsElections(where: [OrganizationsElectionWhereUniqueInput!]!): [OrganizationsElection]
  createOrganizationsRelationship(data: OrganizationsRelationshipCreateInput!): OrganizationsRelationship
  createOrganizationsRelationships(data: [OrganizationsRelationshipCreateInput!]!): [OrganizationsRelationship]
  updateOrganizationsRelationship(where: OrganizationsRelationshipWhereUniqueInput!, data: OrganizationsRelationshipUpdateInput!): OrganizationsRelationship
  updateOrganizationsRelationships(data: [OrganizationsRelationshipUpdateArgs!]!): [OrganizationsRelationship]
  deleteOrganizationsRelationship(where: OrganizationsRelationshipWhereUniqueInput!): OrganizationsRelationship
  deleteOrganizationsRelationships(where: [OrganizationsRelationshipWhereUniqueInput!]!): [OrganizationsRelationship]
  createPersonElection(data: PersonElectionCreateInput!): PersonElection
  createPersonElections(data: [PersonElectionCreateInput!]!): [PersonElection]
  updatePersonElection(where: PersonElectionWhereUniqueInput!, data: PersonElectionUpdateInput!): PersonElection
  updatePersonElections(data: [PersonElectionUpdateArgs!]!): [PersonElection]
  deletePersonElection(where: PersonElectionWhereUniqueInput!): PersonElection
  deletePersonElections(where: [PersonElectionWhereUniqueInput!]!): [PersonElection]
  createPersonOrganization(data: PersonOrganizationCreateInput!): PersonOrganization
  createPersonOrganizations(data: [PersonOrganizationCreateInput!]!): [PersonOrganization]
  updatePersonOrganization(where: PersonOrganizationWhereUniqueInput!, data: PersonOrganizationUpdateInput!): PersonOrganization
  updatePersonOrganizations(data: [PersonOrganizationUpdateArgs!]!): [PersonOrganization]
  deletePersonOrganization(where: PersonOrganizationWhereUniqueInput!): PersonOrganization
  deletePersonOrganizations(where: [PersonOrganizationWhereUniqueInput!]!): [PersonOrganization]
  createPersonPublication(data: PersonPublicationCreateInput!): PersonPublication
  createPersonPublications(data: [PersonPublicationCreateInput!]!): [PersonPublication]
  updatePersonPublication(where: PersonPublicationWhereUniqueInput!, data: PersonPublicationUpdateInput!): PersonPublication
  updatePersonPublications(data: [PersonPublicationUpdateArgs!]!): [PersonPublication]
  deletePersonPublication(where: PersonPublicationWhereUniqueInput!): PersonPublication
  deletePersonPublications(where: [PersonPublicationWhereUniqueInput!]!): [PersonPublication]
  createPersonRelationship(data: PersonRelationshipCreateInput!): PersonRelationship
  createPersonRelationships(data: [PersonRelationshipCreateInput!]!): [PersonRelationship]
  updatePersonRelationship(where: PersonRelationshipWhereUniqueInput!, data: PersonRelationshipUpdateInput!): PersonRelationship
  updatePersonRelationships(data: [PersonRelationshipUpdateArgs!]!): [PersonRelationship]
  deletePersonRelationship(where: PersonRelationshipWhereUniqueInput!): PersonRelationship
  deletePersonRelationships(where: [PersonRelationshipWhereUniqueInput!]!): [PersonRelationship]
  createLawsuit(data: LawsuitCreateInput!): Lawsuit
  createLawsuits(data: [LawsuitCreateInput!]!): [Lawsuit]
  updateLawsuit(where: LawsuitWhereUniqueInput!, data: LawsuitUpdateInput!): Lawsuit
  updateLawsuits(data: [LawsuitUpdateArgs!]!): [Lawsuit]
  deleteLawsuit(where: LawsuitWhereUniqueInput!): Lawsuit
  deleteLawsuits(where: [LawsuitWhereUniqueInput!]!): [Lawsuit]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createPoliticCategory(data: PoliticCategoryCreateInput!): PoliticCategory
  createPoliticCategories(data: [PoliticCategoryCreateInput!]!): [PoliticCategory]
  updatePoliticCategory(where: PoliticCategoryWhereUniqueInput!, data: PoliticCategoryUpdateInput!): PoliticCategory
  updatePoliticCategories(data: [PoliticCategoryUpdateArgs!]!): [PoliticCategory]
  deletePoliticCategory(where: PoliticCategoryWhereUniqueInput!): PoliticCategory
  deletePoliticCategories(where: [PoliticCategoryWhereUniqueInput!]!): [PoliticCategory]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createEditingPolitic(data: EditingPoliticCreateInput!): EditingPolitic
  createEditingPolitics(data: [EditingPoliticCreateInput!]!): [EditingPolitic]
  updateEditingPolitic(where: EditingPoliticWhereUniqueInput!, data: EditingPoliticUpdateInput!): EditingPolitic
  updateEditingPolitics(data: [EditingPoliticUpdateArgs!]!): [EditingPolitic]
  deleteEditingPolitic(where: EditingPoliticWhereUniqueInput!): EditingPolitic
  deleteEditingPolitics(where: [EditingPoliticWhereUniqueInput!]!): [EditingPolitic]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  areas(where: AreaWhereInput! = {}, orderBy: [AreaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AreaWhereUniqueInput): [Area!]
  area(where: AreaWhereUniqueInput!): Area
  areasCount(where: AreaWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  elections(where: ElectionWhereInput! = {}, orderBy: [ElectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionWhereUniqueInput): [Election!]
  election(where: ElectionWhereUniqueInput!): Election
  electionsCount(where: ElectionWhereInput! = {}): Int
  electionAreas(where: ElectionAreaWhereInput! = {}, orderBy: [ElectionAreaOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ElectionAreaWhereUniqueInput): [ElectionArea!]
  electionArea(where: ElectionAreaWhereUniqueInput!): ElectionArea
  electionAreasCount(where: ElectionAreaWhereInput! = {}): Int
  politics(where: PoliticWhereInput! = {}, orderBy: [PoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticWhereUniqueInput): [Politic!]
  politic(where: PoliticWhereUniqueInput!): Politic
  politicsCount(where: PoliticWhereInput! = {}): Int
  politicTimelines(where: PoliticTimelineWhereInput! = {}, orderBy: [PoliticTimelineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticTimelineWhereUniqueInput): [PoliticTimeline!]
  politicTimeline(where: PoliticTimelineWhereUniqueInput!): PoliticTimeline
  politicTimelinesCount(where: PoliticTimelineWhereInput! = {}): Int
  politicExperts(where: PoliticExpertWhereInput! = {}, orderBy: [PoliticExpertOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticExpertWhereUniqueInput): [PoliticExpert!]
  politicExpert(where: PoliticExpertWhereUniqueInput!): PoliticExpert
  politicExpertsCount(where: PoliticExpertWhereInput! = {}): Int
  politicFactChecks(where: PoliticFactCheckWhereInput! = {}, orderBy: [PoliticFactCheckOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticFactCheckWhereUniqueInput): [PoliticFactCheck!]
  politicFactCheck(where: PoliticFactCheckWhereUniqueInput!): PoliticFactCheck
  politicFactChecksCount(where: PoliticFactCheckWhereInput! = {}): Int
  politicPositionChanges(where: PoliticPositionChangeWhereInput! = {}, orderBy: [PoliticPositionChangeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticPositionChangeWhereUniqueInput): [PoliticPositionChange!]
  politicPositionChange(where: PoliticPositionChangeWhereUniqueInput!): PoliticPositionChange
  politicPositionChangesCount(where: PoliticPositionChangeWhereInput! = {}): Int
  politicRepeats(where: PoliticRepeatWhereInput! = {}, orderBy: [PoliticRepeatOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticRepeatWhereUniqueInput): [PoliticRepeat!]
  politicRepeat(where: PoliticRepeatWhereUniqueInput!): PoliticRepeat
  politicRepeatsCount(where: PoliticRepeatWhereInput! = {}): Int
  politicResponses(where: PoliticResponseWhereInput! = {}, orderBy: [PoliticResponseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticResponseWhereUniqueInput): [PoliticResponse!]
  politicResponse(where: PoliticResponseWhereUniqueInput!): PoliticResponse
  politicResponsesCount(where: PoliticResponseWhereInput! = {}): Int
  politicControversies(where: PoliticControversieWhereInput! = {}, orderBy: [PoliticControversieOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticControversieWhereUniqueInput): [PoliticControversie!]
  politicControversie(where: PoliticControversieWhereUniqueInput!): PoliticControversie
  politicControversiesCount(where: PoliticControversieWhereInput! = {}): Int
  relatedPosts(where: RelatedPostWhereInput! = {}, orderBy: [RelatedPostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RelatedPostWhereUniqueInput): [RelatedPost!]
  relatedPost(where: RelatedPostWhereUniqueInput!): RelatedPost
  relatedPostsCount(where: RelatedPostWhereInput! = {}): Int
  factcheckPartners(where: FactcheckPartnerWhereInput! = {}, orderBy: [FactcheckPartnerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FactcheckPartnerWhereUniqueInput): [FactcheckPartner!]
  factcheckPartner(where: FactcheckPartnerWhereUniqueInput!): FactcheckPartner
  factcheckPartnersCount(where: FactcheckPartnerWhereInput! = {}): Int
  votes(where: VoteWhereInput! = {}, orderBy: [VoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VoteWhereUniqueInput): [Vote!]
  vote(where: VoteWhereUniqueInput!): Vote
  votesCount(where: VoteWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonWhereUniqueInput): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  motions(where: MotionWhereInput! = {}, orderBy: [MotionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MotionWhereUniqueInput): [Motion!]
  motion(where: MotionWhereUniqueInput!): Motion
  motionsCount(where: MotionWhereInput! = {}): Int
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  collaborates(where: CollaborateWhereInput! = {}, orderBy: [CollaborateOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollaborateWhereUniqueInput): [Collaborate!]
  collaborate(where: CollaborateWhereUniqueInput!): Collaborate
  collaboratesCount(where: CollaborateWhereInput! = {}): Int
  memberships(where: MembershipWhereInput! = {}, orderBy: [MembershipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MembershipWhereUniqueInput): [Membership!]
  membership(where: MembershipWhereUniqueInput!): Membership
  membershipsCount(where: MembershipWhereInput! = {}): Int
  contactDetails(where: ContactDetailWhereInput! = {}, orderBy: [ContactDetailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactDetailWhereUniqueInput): [ContactDetail!]
  contactDetail(where: ContactDetailWhereUniqueInput!): ContactDetail
  contactDetailsCount(where: ContactDetailWhereInput! = {}): Int
  counts(where: CountWhereInput! = {}, orderBy: [CountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CountWhereUniqueInput): [Count!]
  count(where: CountWhereUniqueInput!): Count
  countsCount(where: CountWhereInput! = {}): Int
  organizationsElections(where: OrganizationsElectionWhereInput! = {}, orderBy: [OrganizationsElectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationsElectionWhereUniqueInput): [OrganizationsElection!]
  organizationsElection(where: OrganizationsElectionWhereUniqueInput!): OrganizationsElection
  organizationsElectionsCount(where: OrganizationsElectionWhereInput! = {}): Int
  organizationsRelationships(where: OrganizationsRelationshipWhereInput! = {}, orderBy: [OrganizationsRelationshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationsRelationshipWhereUniqueInput): [OrganizationsRelationship!]
  organizationsRelationship(where: OrganizationsRelationshipWhereUniqueInput!): OrganizationsRelationship
  organizationsRelationshipsCount(where: OrganizationsRelationshipWhereInput! = {}): Int
  personElections(where: PersonElectionWhereInput! = {}, orderBy: [PersonElectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonElectionWhereUniqueInput): [PersonElection!]
  personElection(where: PersonElectionWhereUniqueInput!): PersonElection
  personElectionsCount(where: PersonElectionWhereInput! = {}): Int
  personOrganizations(where: PersonOrganizationWhereInput! = {}, orderBy: [PersonOrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonOrganizationWhereUniqueInput): [PersonOrganization!]
  personOrganization(where: PersonOrganizationWhereUniqueInput!): PersonOrganization
  personOrganizationsCount(where: PersonOrganizationWhereInput! = {}): Int
  personPublications(where: PersonPublicationWhereInput! = {}, orderBy: [PersonPublicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonPublicationWhereUniqueInput): [PersonPublication!]
  personPublication(where: PersonPublicationWhereUniqueInput!): PersonPublication
  personPublicationsCount(where: PersonPublicationWhereInput! = {}): Int
  personRelationships(where: PersonRelationshipWhereInput! = {}, orderBy: [PersonRelationshipOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PersonRelationshipWhereUniqueInput): [PersonRelationship!]
  personRelationship(where: PersonRelationshipWhereUniqueInput!): PersonRelationship
  personRelationshipsCount(where: PersonRelationshipWhereInput! = {}): Int
  lawsuits(where: LawsuitWhereInput! = {}, orderBy: [LawsuitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LawsuitWhereUniqueInput): [Lawsuit!]
  lawsuit(where: LawsuitWhereUniqueInput!): Lawsuit
  lawsuitsCount(where: LawsuitWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  politicCategories(where: PoliticCategoryWhereInput! = {}, orderBy: [PoliticCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PoliticCategoryWhereUniqueInput): [PoliticCategory!]
  politicCategory(where: PoliticCategoryWhereUniqueInput!): PoliticCategory
  politicCategoriesCount(where: PoliticCategoryWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  editingPolitics(where: EditingPoliticWhereInput! = {}, orderBy: [EditingPoliticOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditingPoliticWhereUniqueInput): [EditingPolitic!]
  editingPolitic(where: EditingPoliticWhereUniqueInput!): EditingPolitic
  editingPoliticsCount(where: EditingPoliticWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
