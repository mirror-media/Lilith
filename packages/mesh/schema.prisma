// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                              Int                @id @default(autoincrement())
  name                            String             @default("")
  email                           String             @unique @default("")
  password                        String
  role                            String
  publisher                       Publisher?         @relation("User_publisher", fields: [publisherId], references: [id])
  publisherId                     Int?               @map("publisher")
  isProtected                     Boolean            @default(false)
  from_InvalidName_createdBy      InvalidName[]      @relation("InvalidName_createdBy")
  from_InvalidName_updatedBy      InvalidName[]      @relation("InvalidName_updatedBy")
  from_Category_createdBy         Category[]         @relation("Category_createdBy")
  from_Category_updatedBy         Category[]         @relation("Category_updatedBy")
  from_Comment_createdBy          Comment[]          @relation("Comment_createdBy")
  from_Comment_updatedBy          Comment[]          @relation("Comment_updatedBy")
  from_Pick_createdBy             Pick[]             @relation("Pick_createdBy")
  from_Pick_updatedBy             Pick[]             @relation("Pick_updatedBy")
  from_Publisher_createdBy        Publisher[]        @relation("Publisher_createdBy")
  from_Publisher_updatedBy        Publisher[]        @relation("Publisher_updatedBy")
  from_Collection_createdBy       Collection[]       @relation("Collection_createdBy")
  from_Collection_updatedBy       Collection[]       @relation("Collection_updatedBy")
  from_CollectionMember_createdBy CollectionMember[] @relation("CollectionMember_createdBy")
  from_CollectionMember_updatedBy CollectionMember[] @relation("CollectionMember_updatedBy")
  from_CollectionPick_createdBy   CollectionPick[]   @relation("CollectionPick_createdBy")
  from_CollectionPick_updatedBy   CollectionPick[]   @relation("CollectionPick_updatedBy")
  from_InvitationCode_createdBy   InvitationCode[]   @relation("InvitationCode_createdBy")
  from_InvitationCode_updatedBy   InvitationCode[]   @relation("InvitationCode_updatedBy")
  from_Story_createdBy            Story[]            @relation("Story_createdBy")
  from_Story_updatedBy            Story[]            @relation("Story_updatedBy")
  from_Tag_createdBy              Tag[]              @relation("Tag_createdBy")
  from_Tag_updatedBy              Tag[]              @relation("Tag_updatedBy")
  from_Member_createdBy           Member[]           @relation("Member_createdBy")
  from_Member_updatedBy           Member[]           @relation("Member_updatedBy")
  from_Notify_createdBy           Notify[]           @relation("Notify_createdBy")
  from_Notify_updatedBy           Notify[]           @relation("Notify_updatedBy")
  from_Announcement_createdBy     Announcement[]     @relation("Announcement_createdBy")
  from_Announcement_updatedBy     Announcement[]     @relation("Announcement_updatedBy")
  from_Photo_createdBy            Photo[]            @relation("Photo_createdBy")
  from_Photo_updatedBy            Photo[]            @relation("Photo_updatedBy")
  from_Policy_createdBy           Policy[]           @relation("Policy_createdBy")
  from_Policy_updatedBy           Policy[]           @relation("Policy_updatedBy")
  from_Transaction_createdBy      Transaction[]      @relation("Transaction_createdBy")
  from_Transaction_updatedBy      Transaction[]      @relation("Transaction_updatedBy")
  from_Sponsorship_createdBy      Sponsorship[]      @relation("Sponsorship_createdBy")
  from_Sponsorship_updatedBy      Sponsorship[]      @relation("Sponsorship_updatedBy")

  @@index([publisherId])
}

model InvalidName {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("InvalidName_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("InvalidName_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id                             Int       @id @default(autoincrement())
  title                          String    @default("")
  slug                           String    @default("")
  summary                        String    @default("")
  priority                       Int       @default(0)
  createdAt                      DateTime?
  updatedAt                      DateTime?
  createdBy                      User?     @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById                    Int?      @map("createdBy")
  updatedBy                      User?     @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById                    Int?      @map("updatedBy")
  from_Story_category            Story[]   @relation("Story_category")
  from_Member_following_category Member[]  @relation("Member_following_category")

  @@index([createdById])
  @@index([updatedById])
}

model Comment {
  id                     Int         @id @default(autoincrement())
  member                 Member?     @relation("Comment_member", fields: [memberId], references: [id])
  memberId               Int?        @map("member")
  story                  Story?      @relation("Comment_story", fields: [storyId], references: [id])
  storyId                Int?        @map("story")
  collection             Collection? @relation("Comment_collection", fields: [collectionId], references: [id])
  collectionId           Int?        @map("collection")
  content                String      @default("")
  parent                 Comment?    @relation("Comment_parent", fields: [parentId], references: [id])
  parentId               Int?        @map("parent")
  root                   Comment?    @relation("Comment_root", fields: [rootId], references: [id])
  rootId                 Int?        @map("root")
  like                   Member[]    @relation("Comment_like")
  state                  String?     @default("public")
  published_date         DateTime?
  is_edited              Boolean     @default(false)
  is_active              Boolean     @default(true)
  createdAt              DateTime?
  updatedAt              DateTime?
  createdBy              User?       @relation("Comment_createdBy", fields: [createdById], references: [id])
  createdById            Int?        @map("createdBy")
  updatedBy              User?       @relation("Comment_updatedBy", fields: [updatedById], references: [id])
  updatedById            Int?        @map("updatedBy")
  from_Comment_parent    Comment[]   @relation("Comment_parent")
  from_Comment_root      Comment[]   @relation("Comment_root")
  from_Pick_comment      Pick[]      @relation("Pick_comment")
  from_Pick_pick_comment Pick[]      @relation("Pick_pick_comment")
  from_Member_comment    Member[]    @relation("Member_comment")

  @@index([memberId])
  @@index([storyId])
  @@index([collectionId])
  @@index([parentId])
  @@index([rootId])
  @@index([createdById])
  @@index([updatedById])
}

model Pick {
  id            Int         @id @default(autoincrement())
  member        Member?     @relation("Pick_member", fields: [memberId], references: [id])
  memberId      Int?        @map("member")
  objective     String?
  story         Story?      @relation("Pick_story", fields: [storyId], references: [id])
  storyId       Int?        @map("story")
  collection    Collection? @relation("Pick_collection", fields: [collectionId], references: [id])
  collectionId  Int?        @map("collection")
  comment       Comment?    @relation("Pick_comment", fields: [commentId], references: [id])
  commentId     Int?        @map("comment")
  pick_comment  Comment[]   @relation("Pick_pick_comment")
  kind          String?     @default("read")
  state         String?     @default("public")
  picked_date   DateTime?
  paywall       Boolean     @default(false)
  is_active     Boolean     @default(true)
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?       @relation("Pick_createdBy", fields: [createdById], references: [id])
  createdById   Int?        @map("createdBy")
  updatedBy     User?       @relation("Pick_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?        @map("updatedBy")
  from_Tag_pick Tag[]       @relation("Tag_pick")

  @@index([memberId])
  @@index([storyId])
  @@index([collectionId])
  @@index([commentId])
  @@index([createdById])
  @@index([updatedById])
}

model Publisher {
  id                    Int           @id @default(autoincrement())
  title                 String        @default("")
  official_site         String        @default("")
  rss                   String        @default("")
  summary               String        @default("")
  logo                  String        @default("")
  description           String        @default("")
  is_active             Boolean       @default(true)
  customId              String        @default("")
  sponsored             Sponsorship[] @relation("Sponsorship_publisher")
  lang                  String?       @default("zh-TW")
  full_content          Boolean       @default(false)
  full_screen_ad        String?       @default("none")
  source_type           String?       @default("empty")
  paywall               Boolean       @default(false)
  follower              Member[]      @relation("Member_follow_publisher")
  wallet                String        @default("")
  user                  User[]        @relation("User_publisher")
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?         @relation("Publisher_createdBy", fields: [createdById], references: [id])
  createdById           Int?          @map("createdBy")
  updatedBy             User?         @relation("Publisher_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?          @map("updatedBy")
  from_Story_source     Story[]       @relation("Story_source")
  from_Policy_publisher Policy[]      @relation("Policy_publisher")

  @@index([createdById])
  @@index([updatedById])
}

model Collection {
  id                               Int                @id @default(autoincrement())
  title                            String             @default("")
  slug                             String             @default("")
  summary                          String             @default("")
  public                           String?
  status                           String?
  format                           String?
  heroImage                        Photo?             @relation("Collection_heroImage", fields: [heroImageId], references: [id])
  heroImageId                      Int?               @map("heroImage")
  collectionpicks                  CollectionPick[]   @relation("CollectionPick_collection")
  picks                            Pick[]             @relation("Pick_collection")
  comment                          Comment[]          @relation("Comment_collection")
  creator                          Member?            @relation("Collection_creator", fields: [creatorId], references: [id])
  creatorId                        Int?               @map("creator")
  createdAt                        DateTime?
  updatedAt                        DateTime?
  createdBy                        User?              @relation("Collection_createdBy", fields: [createdById], references: [id])
  createdById                      Int?               @map("createdBy")
  updatedBy                        User?              @relation("Collection_updatedBy", fields: [updatedById], references: [id])
  updatedById                      Int?               @map("updatedBy")
  from_CollectionMember_collection CollectionMember[] @relation("CollectionMember_collection")
  from_Member_following_collection Member[]           @relation("Member_following_collection")

  @@index([heroImageId])
  @@index([creatorId])
  @@index([createdById])
  @@index([updatedById])
}

model CollectionMember {
  id           Int         @id @default(autoincrement())
  member       Member?     @relation("CollectionMember_member", fields: [memberId], references: [id])
  memberId     Int?        @map("member")
  collection   Collection? @relation("CollectionMember_collection", fields: [collectionId], references: [id])
  collectionId Int?        @map("collection")
  added_by     Member?     @relation("CollectionMember_added_by", fields: [added_byId], references: [id])
  added_byId   Int?        @map("added_by")
  updated_by   Member?     @relation("CollectionMember_updated_by", fields: [updated_byId], references: [id])
  updated_byId Int?        @map("updated_by")
  role         String?
  added_date   DateTime?
  updated_date DateTime?
  createdAt    DateTime?
  updatedAt    DateTime?
  createdBy    User?       @relation("CollectionMember_createdBy", fields: [createdById], references: [id])
  createdById  Int?        @map("createdBy")
  updatedBy    User?       @relation("CollectionMember_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int?        @map("updatedBy")

  @@index([memberId])
  @@index([collectionId])
  @@index([added_byId])
  @@index([updated_byId])
  @@index([createdById])
  @@index([updatedById])
}

model CollectionPick {
  id           Int         @id @default(autoincrement())
  story        Story?      @relation("CollectionPick_story", fields: [storyId], references: [id])
  storyId      Int?        @map("story")
  summary      String      @default("")
  sort_order   Int?        @default(2)
  creator      Member?     @relation("CollectionPick_creator", fields: [creatorId], references: [id])
  creatorId    Int?        @map("creator")
  objective    String?
  collection   Collection? @relation("CollectionPick_collection", fields: [collectionId], references: [id])
  collectionId Int?        @map("collection")
  picked_date  DateTime?
  updated_date DateTime?
  custom_year  Int?
  custom_month Int?
  custom_day   Int?
  custom_time  DateTime?
  createdAt    DateTime?
  updatedAt    DateTime?
  createdBy    User?       @relation("CollectionPick_createdBy", fields: [createdById], references: [id])
  createdById  Int?        @map("createdBy")
  updatedBy    User?       @relation("CollectionPick_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int?        @map("updatedBy")

  @@index([storyId])
  @@index([creatorId])
  @@index([collectionId])
  @@index([createdById])
  @@index([updatedById])
}

model InvitationCode {
  id          Int       @id @default(autoincrement())
  code        String    @default("")
  send        Member?   @relation("InvitationCode_send", fields: [sendId], references: [id])
  sendId      Int?      @map("send")
  receive     Member?   @relation("InvitationCode_receive", fields: [receiveId], references: [id])
  receiveId   Int?      @unique @map("receive")
  expired     Boolean   @default(false)
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("InvitationCode_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("InvitationCode_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([sendId])
  @@index([createdById])
  @@index([updatedById])
}

model Story {
  id                           Int              @id @default(autoincrement())
  title                        String           @default("")
  url                          String           @unique @default("")
  summary                      String           @default("")
  content                      String           @default("")
  trimContent                  String           @default("")
  writer                       String           @default("")
  apiData                      Json?
  trimApiData                  Json?
  source                       Publisher?       @relation("Story_source", fields: [sourceId], references: [id])
  sourceId                     Int?             @map("source")
  author                       Member?          @relation("Story_author", fields: [authorId], references: [id])
  authorId                     Int?             @map("author")
  category                     Category?        @relation("Story_category", fields: [categoryId], references: [id])
  categoryId                   Int?             @map("category")
  pick                         Pick[]           @relation("Pick_story")
  comment                      Comment[]        @relation("Comment_story")
  related                      Story[]          @relation("Story_related")
  published_date               DateTime?
  og_title                     String           @default("")
  og_image                     String           @default("")
  og_description               String           @default("")
  full_content                 Boolean          @default(false)
  paywall                      Boolean          @default(false)
  isMember                     Boolean          @default(false)
  origid                       String           @default("")
  full_screen_ad               String?          @default("none")
  is_active                    Boolean          @default(true)
  tag                          Tag[]            @relation("Story_tag")
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?            @relation("Story_createdBy", fields: [createdById], references: [id])
  createdById                  Int?             @map("createdBy")
  updatedBy                    User?            @relation("Story_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?             @map("updatedBy")
  from_CollectionPick_story    CollectionPick[] @relation("CollectionPick_story")
  from_Story_related           Story[]          @relation("Story_related")
  from_Tag_story               Tag[]            @relation("Tag_story")
  from_Transaction_unlockStory Transaction[]    @relation("Transaction_unlockStory")

  @@index([sourceId])
  @@index([authorId])
  @@index([categoryId])
  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id             Int       @id @default(autoincrement())
  name           String    @default("")
  pick           Pick[]    @relation("Tag_pick")
  story          Story[]   @relation("Tag_story")
  createdAt      DateTime?
  updatedAt      DateTime?
  createdBy      User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById    Int?      @map("createdBy")
  updatedBy      User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById    Int?      @map("updatedBy")
  from_Story_tag Story[]   @relation("Story_tag")

  @@index([createdById])
  @@index([updatedById])
}

model Member {
  id                           Int                @id @default(autoincrement())
  firebaseId                   String             @unique @default("")
  customId                     String             @unique @default("")
  name                         String             @default("")
  nickname                     String             @default("")
  avatar                       String             @default("")
  intro                        String             @default("")
  avatar_image                 Photo?             @relation("Member_avatar_image", fields: [avatar_imageId], references: [id])
  avatar_imageId               Int?               @map("avatar_image")
  wallet                       String             @default("")
  email                        String             @unique @default("")
  is_active                    Boolean            @default(true)
  verified                     Boolean            @default(false)
  pick                         Pick[]             @relation("Pick_member")
  sponsor                      Sponsorship[]      @relation("Sponsorship_sponsor")
  transaction                  Transaction[]      @relation("Transaction_member")
  comment                      Comment[]          @relation("Member_comment")
  member_like                  Comment[]          @relation("Comment_like")
  follower                     Member[]           @relation("Member_follower")
  following                    Member[]           @relation("Member_follower")
  block                        Member[]           @relation("Member_block")
  blocked                      Member[]           @relation("Member_block")
  following_category           Category[]         @relation("Member_following_category")
  following_collection         Collection[]       @relation("Member_following_collection")
  follow_publisher             Publisher[]        @relation("Member_follow_publisher")
  invited                      InvitationCode[]   @relation("InvitationCode_send")
  invited_by                   InvitationCode?    @relation("InvitationCode_receive")
  create_collection            CollectionMember[] @relation("CollectionMember_added_by")
  modify_collection            CollectionMember[] @relation("CollectionMember_updated_by")
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?              @relation("Member_createdBy", fields: [createdById], references: [id])
  createdById                  Int?               @map("createdBy")
  updatedBy                    User?              @relation("Member_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?               @map("updatedBy")
  from_Comment_member          Comment[]          @relation("Comment_member")
  from_Collection_creator      Collection[]       @relation("Collection_creator")
  from_CollectionMember_member CollectionMember[] @relation("CollectionMember_member")
  from_CollectionPick_creator  CollectionPick[]   @relation("CollectionPick_creator")
  from_Story_author            Story[]            @relation("Story_author")
  from_Notify_member           Notify[]           @relation("Notify_member")
  from_Notify_sender           Notify[]           @relation("Notify_sender")

  @@index([avatar_imageId])
  @@index([createdById])
  @@index([updatedById])
}

model Notify {
  id          Int       @id @default(autoincrement())
  member      Member?   @relation("Notify_member", fields: [memberId], references: [id])
  memberId    Int?      @map("member")
  type        String?
  sender      Member?   @relation("Notify_sender", fields: [senderId], references: [id])
  senderId    Int?      @map("sender")
  objective   String?
  object_id   Int?
  state       String?   @default("public")
  action_date DateTime?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Notify_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Notify_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([memberId])
  @@index([senderId])
  @@index([createdById])
  @@index([updatedById])
}

model Announcement {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  status      String?   @default("draft")
  type        String?   @default("features")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Announcement_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Announcement_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                        Int          @id @default(autoincrement())
  name                      String       @default("")
  file_filesize             Int?
  file_extension            String?
  file_width                Int?
  file_height               Int?
  file_mode                 String?
  file_id                   String?
  urlOriginal               String       @default("")
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?        @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById               Int?         @map("createdBy")
  updatedBy                 User?        @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?         @map("updatedBy")
  from_Collection_heroImage Collection[] @relation("Collection_heroImage")
  from_Member_avatar_image  Member[]     @relation("Member_avatar_image")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Policy {
  id                      Int             @id @default(autoincrement())
  name                    String          @default("")
  explanation             String          @default("")
  type                    PolicyTypeType?
  unlockSingle            Boolean         @default(false)
  publisher               Publisher?      @relation("Policy_publisher", fields: [publisherId], references: [id])
  publisherId             Int?            @map("publisher")
  duration                Int?
  charge                  Float?          @default(0)
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?           @relation("Policy_createdBy", fields: [createdById], references: [id])
  createdById             Int?            @map("createdBy")
  updatedBy               User?           @relation("Policy_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?            @map("updatedBy")
  from_Transaction_policy Transaction[]   @relation("Transaction_policy")

  @@index([publisherId])
  @@index([createdById])
  @@index([updatedById])
}

model Transaction {
  id            Int                    @id @default(autoincrement())
  member        Member?                @relation("Transaction_member", fields: [memberId], references: [id])
  memberId      Int?                   @map("member")
  policy        Policy?                @relation("Transaction_policy", fields: [policyId], references: [id])
  policyId      Int?                   @map("policy")
  tid           String                 @default("")
  depositVolume Float?
  unlockStory   Story?                 @relation("Transaction_unlockStory", fields: [unlockStoryId], references: [id])
  unlockStoryId Int?                   @map("unlockStory")
  expireDate    DateTime?
  active        Boolean                @default(true)
  status        TransactionStatusType?
  complement    String                 @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?                  @relation("Transaction_createdBy", fields: [createdById], references: [id])
  createdById   Int?                   @map("createdBy")
  updatedBy     User?                  @relation("Transaction_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?                   @map("updatedBy")

  @@index([memberId])
  @@index([policyId])
  @@index([unlockStoryId])
  @@index([createdById])
  @@index([updatedById])
}

model Sponsorship {
  id          Int                    @id @default(autoincrement())
  tid         String                 @default("")
  sponsor     Member?                @relation("Sponsorship_sponsor", fields: [sponsorId], references: [id])
  sponsorId   Int?                   @map("sponsor")
  publisher   Publisher?             @relation("Sponsorship_publisher", fields: [publisherId], references: [id])
  publisherId Int?                   @map("publisher")
  fee         Float?
  status      SponsorshipStatusType?
  complement  String                 @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?                  @relation("Sponsorship_createdBy", fields: [createdById], references: [id])
  createdById Int?                   @map("createdBy")
  updatedBy   User?                  @relation("Sponsorship_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?                   @map("updatedBy")

  @@index([sponsorId])
  @@index([publisherId])
  @@index([createdById])
  @@index([updatedById])
}

enum PolicyTypeType {
  deposit
  unlock_all_publishers
  unlock_one_publisher
}

enum TransactionStatusType {
  Success
  Failed
}

enum SponsorshipStatusType {
  Success
  Failed
}