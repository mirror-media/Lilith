# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type Category {
  id: ID!
  title: String
  slug: String
  summary: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  summary: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  title: String
  slug: String
  summary: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  title: String
  slug: String
  summary: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Comment {
  id: ID!
  member: Member
  story: Story
  collection: Collection
  content: String
  parent: Comment
  root: Comment
  like(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  likeCount(where: MemberWhereInput! = {}): Int
  state: String
  published_date: DateTime
  is_edited: Boolean
  is_active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  story: StoryWhereInput
  collection: CollectionWhereInput
  content: StringFilter
  parent: CommentWhereInput
  root: CommentWhereInput
  like: MemberManyRelationFilter
  state: StringNullableFilter
  published_date: DateTimeNullableFilter
  is_edited: BooleanFilter
  is_active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MemberManyRelationFilter {
  every: MemberWhereInput
  some: MemberWhereInput
  none: MemberWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input CommentOrderByInput {
  id: OrderDirection
  content: OrderDirection
  state: OrderDirection
  published_date: OrderDirection
  is_edited: OrderDirection
  is_active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CommentUpdateInput {
  member: MemberRelateToOneForUpdateInput
  story: StoryRelateToOneForUpdateInput
  collection: CollectionRelateToOneForUpdateInput
  content: String
  parent: CommentRelateToOneForUpdateInput
  root: CommentRelateToOneForUpdateInput
  like: MemberRelateToManyForUpdateInput
  state: String
  published_date: DateTime
  is_edited: Boolean
  is_active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input StoryRelateToOneForUpdateInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
  disconnect: Boolean
}

input CollectionRelateToOneForUpdateInput {
  create: CollectionCreateInput
  connect: CollectionWhereUniqueInput
  disconnect: Boolean
}

input CommentRelateToOneForUpdateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
  disconnect: Boolean
}

input MemberRelateToManyForUpdateInput {
  disconnect: [MemberWhereUniqueInput!]
  set: [MemberWhereUniqueInput!]
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  member: MemberRelateToOneForCreateInput
  story: StoryRelateToOneForCreateInput
  collection: CollectionRelateToOneForCreateInput
  content: String
  parent: CommentRelateToOneForCreateInput
  root: CommentRelateToOneForCreateInput
  like: MemberRelateToManyForCreateInput
  state: String
  published_date: DateTime
  is_edited: Boolean
  is_active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

input StoryRelateToOneForCreateInput {
  create: StoryCreateInput
  connect: StoryWhereUniqueInput
}

input CollectionRelateToOneForCreateInput {
  create: CollectionCreateInput
  connect: CollectionWhereUniqueInput
}

input CommentRelateToOneForCreateInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

input MemberRelateToManyForCreateInput {
  create: [MemberCreateInput!]
  connect: [MemberWhereUniqueInput!]
}

type Pick {
  id: ID!
  member: Member
  objective: String
  story: Story
  collection: Collection
  comment: Comment
  pick_comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  pick_commentCount(where: CommentWhereInput! = {}): Int
  kind: String
  state: String
  picked_date: DateTime
  paywall: Boolean
  is_active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PickWhereUniqueInput {
  id: ID
}

input PickWhereInput {
  AND: [PickWhereInput!]
  OR: [PickWhereInput!]
  NOT: [PickWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  objective: StringNullableFilter
  story: StoryWhereInput
  collection: CollectionWhereInput
  comment: CommentWhereInput
  pick_comment: CommentManyRelationFilter
  kind: StringNullableFilter
  state: StringNullableFilter
  picked_date: DateTimeNullableFilter
  paywall: BooleanFilter
  is_active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input PickOrderByInput {
  id: OrderDirection
  objective: OrderDirection
  kind: OrderDirection
  state: OrderDirection
  picked_date: OrderDirection
  paywall: OrderDirection
  is_active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PickUpdateInput {
  member: MemberRelateToOneForUpdateInput
  objective: String
  story: StoryRelateToOneForUpdateInput
  collection: CollectionRelateToOneForUpdateInput
  comment: CommentRelateToOneForUpdateInput
  pick_comment: CommentRelateToManyForUpdateInput
  kind: String
  state: String
  picked_date: DateTime
  paywall: Boolean
  is_active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input PickUpdateArgs {
  where: PickWhereUniqueInput!
  data: PickUpdateInput!
}

input PickCreateInput {
  member: MemberRelateToOneForCreateInput
  objective: String
  story: StoryRelateToOneForCreateInput
  collection: CollectionRelateToOneForCreateInput
  comment: CommentRelateToOneForCreateInput
  pick_comment: CommentRelateToManyForCreateInput
  kind: String
  state: String
  picked_date: DateTime
  paywall: Boolean
  is_active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Publisher {
  id: ID!
  title: String
  official_site: String
  rss: String
  summary: String
  logo: String
  description: String
  customId: String
  lang: String
  full_content: Boolean
  full_screen_ad: String
  source_type: String
  paywall: Boolean
  follower(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  followerCount(where: MemberWhereInput! = {}): Int
  wallet: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  title: StringFilter
  official_site: StringFilter
  rss: StringFilter
  summary: StringFilter
  logo: StringFilter
  description: StringFilter
  customId: StringFilter
  lang: StringNullableFilter
  full_content: BooleanFilter
  full_screen_ad: StringNullableFilter
  source_type: StringNullableFilter
  paywall: BooleanFilter
  follower: MemberManyRelationFilter
  wallet: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PublisherOrderByInput {
  id: OrderDirection
  title: OrderDirection
  official_site: OrderDirection
  rss: OrderDirection
  summary: OrderDirection
  logo: OrderDirection
  description: OrderDirection
  customId: OrderDirection
  lang: OrderDirection
  full_content: OrderDirection
  full_screen_ad: OrderDirection
  source_type: OrderDirection
  paywall: OrderDirection
  wallet: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PublisherUpdateInput {
  title: String
  official_site: String
  rss: String
  summary: String
  logo: String
  description: String
  customId: String
  lang: String
  full_content: Boolean
  full_screen_ad: String
  source_type: String
  paywall: Boolean
  follower: MemberRelateToManyForUpdateInput
  wallet: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  title: String
  official_site: String
  rss: String
  summary: String
  logo: String
  description: String
  customId: String
  lang: String
  full_content: Boolean
  full_screen_ad: String
  source_type: String
  paywall: Boolean
  follower: MemberRelateToManyForCreateInput
  wallet: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Collection {
  id: ID!
  title: String
  slug: String
  summary: String
  public: String
  status: String
  format: String
  heroImage: Photo
  collectionpicks(
    where: CollectionPickWhereInput! = {}
    orderBy: [CollectionPickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CollectionPick!]
  collectionpicksCount(where: CollectionPickWhereInput! = {}): Int
  picks(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  picksCount(where: PickWhereInput! = {}): Int
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
  creator: Member
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CollectionWhereUniqueInput {
  id: ID
}

input CollectionWhereInput {
  AND: [CollectionWhereInput!]
  OR: [CollectionWhereInput!]
  NOT: [CollectionWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  summary: StringFilter
  public: StringNullableFilter
  status: StringNullableFilter
  format: StringNullableFilter
  heroImage: PhotoWhereInput
  collectionpicks: CollectionPickManyRelationFilter
  picks: PickManyRelationFilter
  comment: CommentManyRelationFilter
  creator: MemberWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CollectionPickManyRelationFilter {
  every: CollectionPickWhereInput
  some: CollectionPickWhereInput
  none: CollectionPickWhereInput
}

input PickManyRelationFilter {
  every: PickWhereInput
  some: PickWhereInput
  none: PickWhereInput
}

input CollectionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  summary: OrderDirection
  public: OrderDirection
  status: OrderDirection
  format: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollectionUpdateInput {
  title: String
  slug: String
  summary: String
  public: String
  status: String
  format: String
  heroImage: PhotoRelateToOneForUpdateInput
  collectionpicks: CollectionPickRelateToManyForUpdateInput
  picks: PickRelateToManyForUpdateInput
  comment: CommentRelateToManyForUpdateInput
  creator: MemberRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input CollectionPickRelateToManyForUpdateInput {
  disconnect: [CollectionPickWhereUniqueInput!]
  set: [CollectionPickWhereUniqueInput!]
  create: [CollectionPickCreateInput!]
  connect: [CollectionPickWhereUniqueInput!]
}

input PickRelateToManyForUpdateInput {
  disconnect: [PickWhereUniqueInput!]
  set: [PickWhereUniqueInput!]
  create: [PickCreateInput!]
  connect: [PickWhereUniqueInput!]
}

input CollectionUpdateArgs {
  where: CollectionWhereUniqueInput!
  data: CollectionUpdateInput!
}

input CollectionCreateInput {
  title: String
  slug: String
  summary: String
  public: String
  status: String
  format: String
  heroImage: PhotoRelateToOneForCreateInput
  collectionpicks: CollectionPickRelateToManyForCreateInput
  picks: PickRelateToManyForCreateInput
  comment: CommentRelateToManyForCreateInput
  creator: MemberRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input CollectionPickRelateToManyForCreateInput {
  create: [CollectionPickCreateInput!]
  connect: [CollectionPickWhereUniqueInput!]
}

input PickRelateToManyForCreateInput {
  create: [PickCreateInput!]
  connect: [PickWhereUniqueInput!]
}

type CollectionMember {
  id: ID!
  member: Member
  collection: Collection
  added_by: Member
  updated_by: Member
  role: String
  added_date: DateTime
  updated_date: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CollectionMemberWhereUniqueInput {
  id: ID
}

input CollectionMemberWhereInput {
  AND: [CollectionMemberWhereInput!]
  OR: [CollectionMemberWhereInput!]
  NOT: [CollectionMemberWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  collection: CollectionWhereInput
  added_by: MemberWhereInput
  updated_by: MemberWhereInput
  role: StringNullableFilter
  added_date: DateTimeNullableFilter
  updated_date: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CollectionMemberOrderByInput {
  id: OrderDirection
  role: OrderDirection
  added_date: OrderDirection
  updated_date: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollectionMemberUpdateInput {
  member: MemberRelateToOneForUpdateInput
  collection: CollectionRelateToOneForUpdateInput
  added_by: MemberRelateToOneForUpdateInput
  updated_by: MemberRelateToOneForUpdateInput
  role: String
  added_date: DateTime
  updated_date: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CollectionMemberUpdateArgs {
  where: CollectionMemberWhereUniqueInput!
  data: CollectionMemberUpdateInput!
}

input CollectionMemberCreateInput {
  member: MemberRelateToOneForCreateInput
  collection: CollectionRelateToOneForCreateInput
  added_by: MemberRelateToOneForCreateInput
  updated_by: MemberRelateToOneForCreateInput
  role: String
  added_date: DateTime
  updated_date: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type CollectionPick {
  id: ID!
  story: Story
  summary: String
  sort_order: Int
  creator: Member
  objective: String
  collection: Collection
  picked_date: DateTime
  updated_date: DateTime
  custom_year: Int
  custom_month: Int
  custom_day: Int
  custom_time: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CollectionPickWhereUniqueInput {
  id: ID
}

input CollectionPickWhereInput {
  AND: [CollectionPickWhereInput!]
  OR: [CollectionPickWhereInput!]
  NOT: [CollectionPickWhereInput!]
  id: IDFilter
  story: StoryWhereInput
  summary: StringFilter
  sort_order: IntNullableFilter
  creator: MemberWhereInput
  objective: StringNullableFilter
  collection: CollectionWhereInput
  picked_date: DateTimeNullableFilter
  updated_date: DateTimeNullableFilter
  custom_year: IntNullableFilter
  custom_month: IntNullableFilter
  custom_day: IntNullableFilter
  custom_time: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input CollectionPickOrderByInput {
  id: OrderDirection
  summary: OrderDirection
  sort_order: OrderDirection
  objective: OrderDirection
  picked_date: OrderDirection
  updated_date: OrderDirection
  custom_year: OrderDirection
  custom_month: OrderDirection
  custom_day: OrderDirection
  custom_time: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollectionPickUpdateInput {
  story: StoryRelateToOneForUpdateInput
  summary: String
  sort_order: Int
  creator: MemberRelateToOneForUpdateInput
  objective: String
  collection: CollectionRelateToOneForUpdateInput
  picked_date: DateTime
  updated_date: DateTime
  custom_year: Int
  custom_month: Int
  custom_day: Int
  custom_time: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CollectionPickUpdateArgs {
  where: CollectionPickWhereUniqueInput!
  data: CollectionPickUpdateInput!
}

input CollectionPickCreateInput {
  story: StoryRelateToOneForCreateInput
  summary: String
  sort_order: Int
  creator: MemberRelateToOneForCreateInput
  objective: String
  collection: CollectionRelateToOneForCreateInput
  picked_date: DateTime
  updated_date: DateTime
  custom_year: Int
  custom_month: Int
  custom_day: Int
  custom_time: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type InvitationCode {
  id: ID!
  code: String
  send: Member
  receive: Member
  expired: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input InvitationCodeWhereUniqueInput {
  id: ID
}

input InvitationCodeWhereInput {
  AND: [InvitationCodeWhereInput!]
  OR: [InvitationCodeWhereInput!]
  NOT: [InvitationCodeWhereInput!]
  id: IDFilter
  code: StringFilter
  send: MemberWhereInput
  receive: MemberWhereInput
  expired: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input InvitationCodeOrderByInput {
  id: OrderDirection
  code: OrderDirection
  expired: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InvitationCodeUpdateInput {
  code: String
  send: MemberRelateToOneForUpdateInput
  receive: MemberRelateToOneForUpdateInput
  expired: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input InvitationCodeUpdateArgs {
  where: InvitationCodeWhereUniqueInput!
  data: InvitationCodeUpdateInput!
}

input InvitationCodeCreateInput {
  code: String
  send: MemberRelateToOneForCreateInput
  receive: MemberRelateToOneForCreateInput
  expired: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Story {
  id: ID!
  title: String
  url: String
  summary: String
  content: String
  writer: String
  source: Publisher
  author: Member
  category: Category
  pick(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  pickCount(where: PickWhereInput! = {}): Int
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
  related(
    where: StoryWhereInput! = {}
    orderBy: [StoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Story!]
  relatedCount(where: StoryWhereInput! = {}): Int
  published_date: DateTime
  og_title: String
  og_image: String
  og_description: String
  full_content: Boolean
  paywall: Boolean
  origid: String
  full_screen_ad: String
  is_active: Boolean
  tag(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input StoryWhereUniqueInput {
  id: ID
  url: String
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  summary: StringFilter
  content: StringFilter
  writer: StringFilter
  source: PublisherWhereInput
  author: MemberWhereInput
  category: CategoryWhereInput
  pick: PickManyRelationFilter
  comment: CommentManyRelationFilter
  related: StoryManyRelationFilter
  published_date: DateTimeNullableFilter
  og_title: StringFilter
  og_image: StringFilter
  og_description: StringFilter
  full_content: BooleanFilter
  paywall: BooleanFilter
  origid: StringFilter
  full_screen_ad: StringNullableFilter
  is_active: BooleanFilter
  tag: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StoryManyRelationFilter {
  every: StoryWhereInput
  some: StoryWhereInput
  none: StoryWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input StoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  summary: OrderDirection
  content: OrderDirection
  writer: OrderDirection
  published_date: OrderDirection
  og_title: OrderDirection
  og_image: OrderDirection
  og_description: OrderDirection
  full_content: OrderDirection
  paywall: OrderDirection
  origid: OrderDirection
  full_screen_ad: OrderDirection
  is_active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input StoryUpdateInput {
  title: String
  url: String
  summary: String
  content: String
  writer: String
  source: PublisherRelateToOneForUpdateInput
  author: MemberRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  pick: PickRelateToManyForUpdateInput
  comment: CommentRelateToManyForUpdateInput
  related: StoryRelateToManyForUpdateInput
  published_date: DateTime
  og_title: String
  og_image: String
  og_description: String
  full_content: Boolean
  paywall: Boolean
  origid: String
  full_screen_ad: String
  is_active: Boolean
  tag: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PublisherRelateToOneForUpdateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input StoryRelateToManyForUpdateInput {
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input StoryUpdateArgs {
  where: StoryWhereUniqueInput!
  data: StoryUpdateInput!
}

input StoryCreateInput {
  title: String
  url: String
  summary: String
  content: String
  writer: String
  source: PublisherRelateToOneForCreateInput
  author: MemberRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  pick: PickRelateToManyForCreateInput
  comment: CommentRelateToManyForCreateInput
  related: StoryRelateToManyForCreateInput
  published_date: DateTime
  og_title: String
  og_image: String
  og_description: String
  full_content: Boolean
  paywall: Boolean
  origid: String
  full_screen_ad: String
  is_active: Boolean
  tag: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PublisherRelateToOneForCreateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input StoryRelateToManyForCreateInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  pick(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  pickCount(where: PickWhereInput! = {}): Int
  story(
    where: StoryWhereInput! = {}
    orderBy: [StoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Story!]
  storyCount(where: StoryWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  pick: PickManyRelationFilter
  story: StoryManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  pick: PickRelateToManyForUpdateInput
  story: StoryRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  pick: PickRelateToManyForCreateInput
  story: StoryRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Member {
  id: ID!
  firebaseId: String
  customId: String
  name: String
  nickname: String
  avatar: String
  intro: String
  avatar_image: Photo
  email: String
  is_active: Boolean
  verified: Boolean
  pick(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  pickCount(where: PickWhereInput! = {}): Int
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
  member_like(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  member_likeCount(where: CommentWhereInput! = {}): Int
  follower(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  followerCount(where: MemberWhereInput! = {}): Int
  following(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  followingCount(where: MemberWhereInput! = {}): Int
  block(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  blockCount(where: MemberWhereInput! = {}): Int
  blocked(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  blockedCount(where: MemberWhereInput! = {}): Int
  following_category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  following_categoryCount(where: CategoryWhereInput! = {}): Int
  following_collection(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  following_collectionCount(where: CollectionWhereInput! = {}): Int
  follow_publisher(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  follow_publisherCount(where: PublisherWhereInput! = {}): Int
  invited(
    where: InvitationCodeWhereInput! = {}
    orderBy: [InvitationCodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InvitationCode!]
  invitedCount(where: InvitationCodeWhereInput! = {}): Int
  invited_by: InvitationCode
  create_collection(
    where: CollectionMemberWhereInput! = {}
    orderBy: [CollectionMemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CollectionMember!]
  create_collectionCount(where: CollectionMemberWhereInput! = {}): Int
  modify_collection(
    where: CollectionMemberWhereInput! = {}
    orderBy: [CollectionMemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CollectionMember!]
  modify_collectionCount(where: CollectionMemberWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MemberWhereUniqueInput {
  id: ID
  firebaseId: String
  customId: String
  email: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  firebaseId: StringFilter
  customId: StringFilter
  name: StringFilter
  nickname: StringFilter
  avatar: StringFilter
  intro: StringFilter
  avatar_image: PhotoWhereInput
  email: StringFilter
  is_active: BooleanFilter
  verified: BooleanFilter
  pick: PickManyRelationFilter
  comment: CommentManyRelationFilter
  member_like: CommentManyRelationFilter
  follower: MemberManyRelationFilter
  following: MemberManyRelationFilter
  block: MemberManyRelationFilter
  blocked: MemberManyRelationFilter
  following_category: CategoryManyRelationFilter
  following_collection: CollectionManyRelationFilter
  follow_publisher: PublisherManyRelationFilter
  invited: InvitationCodeManyRelationFilter
  invited_by: InvitationCodeWhereInput
  create_collection: CollectionMemberManyRelationFilter
  modify_collection: CollectionMemberManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input CollectionManyRelationFilter {
  every: CollectionWhereInput
  some: CollectionWhereInput
  none: CollectionWhereInput
}

input PublisherManyRelationFilter {
  every: PublisherWhereInput
  some: PublisherWhereInput
  none: PublisherWhereInput
}

input InvitationCodeManyRelationFilter {
  every: InvitationCodeWhereInput
  some: InvitationCodeWhereInput
  none: InvitationCodeWhereInput
}

input CollectionMemberManyRelationFilter {
  every: CollectionMemberWhereInput
  some: CollectionMemberWhereInput
  none: CollectionMemberWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  firebaseId: OrderDirection
  customId: OrderDirection
  name: OrderDirection
  nickname: OrderDirection
  avatar: OrderDirection
  intro: OrderDirection
  email: OrderDirection
  is_active: OrderDirection
  verified: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MemberUpdateInput {
  firebaseId: String
  customId: String
  name: String
  nickname: String
  avatar: String
  intro: String
  avatar_image: PhotoRelateToOneForUpdateInput
  email: String
  is_active: Boolean
  verified: Boolean
  pick: PickRelateToManyForUpdateInput
  comment: CommentRelateToManyForUpdateInput
  member_like: CommentRelateToManyForUpdateInput
  follower: MemberRelateToManyForUpdateInput
  following: MemberRelateToManyForUpdateInput
  block: MemberRelateToManyForUpdateInput
  blocked: MemberRelateToManyForUpdateInput
  following_category: CategoryRelateToManyForUpdateInput
  following_collection: CollectionRelateToManyForUpdateInput
  follow_publisher: PublisherRelateToManyForUpdateInput
  invited: InvitationCodeRelateToManyForUpdateInput
  invited_by: InvitationCodeRelateToOneForUpdateInput
  create_collection: CollectionMemberRelateToManyForUpdateInput
  modify_collection: CollectionMemberRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CollectionRelateToManyForUpdateInput {
  disconnect: [CollectionWhereUniqueInput!]
  set: [CollectionWhereUniqueInput!]
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input PublisherRelateToManyForUpdateInput {
  disconnect: [PublisherWhereUniqueInput!]
  set: [PublisherWhereUniqueInput!]
  create: [PublisherCreateInput!]
  connect: [PublisherWhereUniqueInput!]
}

input InvitationCodeRelateToManyForUpdateInput {
  disconnect: [InvitationCodeWhereUniqueInput!]
  set: [InvitationCodeWhereUniqueInput!]
  create: [InvitationCodeCreateInput!]
  connect: [InvitationCodeWhereUniqueInput!]
}

input InvitationCodeRelateToOneForUpdateInput {
  create: InvitationCodeCreateInput
  connect: InvitationCodeWhereUniqueInput
  disconnect: Boolean
}

input CollectionMemberRelateToManyForUpdateInput {
  disconnect: [CollectionMemberWhereUniqueInput!]
  set: [CollectionMemberWhereUniqueInput!]
  create: [CollectionMemberCreateInput!]
  connect: [CollectionMemberWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  firebaseId: String
  customId: String
  name: String
  nickname: String
  avatar: String
  intro: String
  avatar_image: PhotoRelateToOneForCreateInput
  email: String
  is_active: Boolean
  verified: Boolean
  pick: PickRelateToManyForCreateInput
  comment: CommentRelateToManyForCreateInput
  member_like: CommentRelateToManyForCreateInput
  follower: MemberRelateToManyForCreateInput
  following: MemberRelateToManyForCreateInput
  block: MemberRelateToManyForCreateInput
  blocked: MemberRelateToManyForCreateInput
  following_category: CategoryRelateToManyForCreateInput
  following_collection: CollectionRelateToManyForCreateInput
  follow_publisher: PublisherRelateToManyForCreateInput
  invited: InvitationCodeRelateToManyForCreateInput
  invited_by: InvitationCodeRelateToOneForCreateInput
  create_collection: CollectionMemberRelateToManyForCreateInput
  modify_collection: CollectionMemberRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input CollectionRelateToManyForCreateInput {
  create: [CollectionCreateInput!]
  connect: [CollectionWhereUniqueInput!]
}

input PublisherRelateToManyForCreateInput {
  create: [PublisherCreateInput!]
  connect: [PublisherWhereUniqueInput!]
}

input InvitationCodeRelateToManyForCreateInput {
  create: [InvitationCodeCreateInput!]
  connect: [InvitationCodeWhereUniqueInput!]
}

input InvitationCodeRelateToOneForCreateInput {
  create: InvitationCodeCreateInput
  connect: InvitationCodeWhereUniqueInput
}

input CollectionMemberRelateToManyForCreateInput {
  create: [CollectionMemberCreateInput!]
  connect: [CollectionMemberWhereUniqueInput!]
}

type Notify {
  id: ID!
  member: Member
  type: String
  sender: Member
  objective: String
  object_id: Int
  state: String
  action_date: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input NotifyWhereUniqueInput {
  id: ID
}

input NotifyWhereInput {
  AND: [NotifyWhereInput!]
  OR: [NotifyWhereInput!]
  NOT: [NotifyWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  type: StringNullableFilter
  sender: MemberWhereInput
  objective: StringNullableFilter
  object_id: IntNullableFilter
  state: StringNullableFilter
  action_date: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input NotifyOrderByInput {
  id: OrderDirection
  type: OrderDirection
  objective: OrderDirection
  object_id: OrderDirection
  state: OrderDirection
  action_date: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NotifyUpdateInput {
  member: MemberRelateToOneForUpdateInput
  type: String
  sender: MemberRelateToOneForUpdateInput
  objective: String
  object_id: Int
  state: String
  action_date: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input NotifyUpdateArgs {
  where: NotifyWhereUniqueInput!
  data: NotifyUpdateInput!
}

input NotifyCreateInput {
  member: MemberRelateToOneForCreateInput
  type: String
  sender: MemberRelateToOneForCreateInput
  objective: String
  object_id: Int
  state: String
  action_date: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Announcement {
  id: ID!
  name: String
  status: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AnnouncementWhereUniqueInput {
  id: ID
}

input AnnouncementWhereInput {
  AND: [AnnouncementWhereInput!]
  OR: [AnnouncementWhereInput!]
  NOT: [AnnouncementWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  type: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AnnouncementOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AnnouncementUpdateInput {
  name: String
  status: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AnnouncementUpdateArgs {
  where: AnnouncementWhereUniqueInput!
  data: AnnouncementUpdateInput!
}

input AnnouncementCreateInput {
  name: String
  status: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  file: ImageFieldOutput
  resized: ResizedImages
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

input PhotoWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  file: ImageFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  file: ImageFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createPick(data: PickCreateInput!): Pick
  createPicks(data: [PickCreateInput!]!): [Pick]
  updatePick(where: PickWhereUniqueInput!, data: PickUpdateInput!): Pick
  updatePicks(data: [PickUpdateArgs!]!): [Pick]
  deletePick(where: PickWhereUniqueInput!): Pick
  deletePicks(where: [PickWhereUniqueInput!]!): [Pick]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(
    where: PublisherWhereUniqueInput!
    data: PublisherUpdateInput!
  ): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createCollection(data: CollectionCreateInput!): Collection
  createCollections(data: [CollectionCreateInput!]!): [Collection]
  updateCollection(
    where: CollectionWhereUniqueInput!
    data: CollectionUpdateInput!
  ): Collection
  updateCollections(data: [CollectionUpdateArgs!]!): [Collection]
  deleteCollection(where: CollectionWhereUniqueInput!): Collection
  deleteCollections(where: [CollectionWhereUniqueInput!]!): [Collection]
  createCollectionMember(data: CollectionMemberCreateInput!): CollectionMember
  createCollectionMembers(
    data: [CollectionMemberCreateInput!]!
  ): [CollectionMember]
  updateCollectionMember(
    where: CollectionMemberWhereUniqueInput!
    data: CollectionMemberUpdateInput!
  ): CollectionMember
  updateCollectionMembers(
    data: [CollectionMemberUpdateArgs!]!
  ): [CollectionMember]
  deleteCollectionMember(
    where: CollectionMemberWhereUniqueInput!
  ): CollectionMember
  deleteCollectionMembers(
    where: [CollectionMemberWhereUniqueInput!]!
  ): [CollectionMember]
  createCollectionPick(data: CollectionPickCreateInput!): CollectionPick
  createCollectionPicks(data: [CollectionPickCreateInput!]!): [CollectionPick]
  updateCollectionPick(
    where: CollectionPickWhereUniqueInput!
    data: CollectionPickUpdateInput!
  ): CollectionPick
  updateCollectionPicks(data: [CollectionPickUpdateArgs!]!): [CollectionPick]
  deleteCollectionPick(where: CollectionPickWhereUniqueInput!): CollectionPick
  deleteCollectionPicks(
    where: [CollectionPickWhereUniqueInput!]!
  ): [CollectionPick]
  createInvitationCode(data: InvitationCodeCreateInput!): InvitationCode
  createInvitationCodes(data: [InvitationCodeCreateInput!]!): [InvitationCode]
  updateInvitationCode(
    where: InvitationCodeWhereUniqueInput!
    data: InvitationCodeUpdateInput!
  ): InvitationCode
  updateInvitationCodes(data: [InvitationCodeUpdateArgs!]!): [InvitationCode]
  deleteInvitationCode(where: InvitationCodeWhereUniqueInput!): InvitationCode
  deleteInvitationCodes(
    where: [InvitationCodeWhereUniqueInput!]!
  ): [InvitationCode]
  createStory(data: StoryCreateInput!): Story
  createStories(data: [StoryCreateInput!]!): [Story]
  updateStory(where: StoryWhereUniqueInput!, data: StoryUpdateInput!): Story
  updateStories(data: [StoryUpdateArgs!]!): [Story]
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteStories(where: [StoryWhereUniqueInput!]!): [Story]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createNotify(data: NotifyCreateInput!): Notify
  createNotifies(data: [NotifyCreateInput!]!): [Notify]
  updateNotify(where: NotifyWhereUniqueInput!, data: NotifyUpdateInput!): Notify
  updateNotifies(data: [NotifyUpdateArgs!]!): [Notify]
  deleteNotify(where: NotifyWhereUniqueInput!): Notify
  deleteNotifies(where: [NotifyWhereUniqueInput!]!): [Notify]
  createAnnouncement(data: AnnouncementCreateInput!): Announcement
  createAnnouncements(data: [AnnouncementCreateInput!]!): [Announcement]
  updateAnnouncement(
    where: AnnouncementWhereUniqueInput!
    data: AnnouncementUpdateInput!
  ): Announcement
  updateAnnouncements(data: [AnnouncementUpdateArgs!]!): [Announcement]
  deleteAnnouncement(where: AnnouncementWhereUniqueInput!): Announcement
  deleteAnnouncements(where: [AnnouncementWhereUniqueInput!]!): [Announcement]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  picks(
    where: PickWhereInput! = {}
    orderBy: [PickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Pick!]
  pick(where: PickWhereUniqueInput!): Pick
  picksCount(where: PickWhereInput! = {}): Int
  publishers(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  collections(
    where: CollectionWhereInput! = {}
    orderBy: [CollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Collection!]
  collection(where: CollectionWhereUniqueInput!): Collection
  collectionsCount(where: CollectionWhereInput! = {}): Int
  collectionMembers(
    where: CollectionMemberWhereInput! = {}
    orderBy: [CollectionMemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CollectionMember!]
  collectionMember(where: CollectionMemberWhereUniqueInput!): CollectionMember
  collectionMembersCount(where: CollectionMemberWhereInput! = {}): Int
  collectionPicks(
    where: CollectionPickWhereInput! = {}
    orderBy: [CollectionPickOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [CollectionPick!]
  collectionPick(where: CollectionPickWhereUniqueInput!): CollectionPick
  collectionPicksCount(where: CollectionPickWhereInput! = {}): Int
  invitationCodes(
    where: InvitationCodeWhereInput! = {}
    orderBy: [InvitationCodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InvitationCode!]
  invitationCode(where: InvitationCodeWhereUniqueInput!): InvitationCode
  invitationCodesCount(where: InvitationCodeWhereInput! = {}): Int
  stories(
    where: StoryWhereInput! = {}
    orderBy: [StoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Story!]
  story(where: StoryWhereUniqueInput!): Story
  storiesCount(where: StoryWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  members(
    where: MemberWhereInput! = {}
    orderBy: [MemberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  notifies(
    where: NotifyWhereInput! = {}
    orderBy: [NotifyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Notify!]
  notify(where: NotifyWhereUniqueInput!): Notify
  notifiesCount(where: NotifyWhereInput! = {}): Int
  announcements(
    where: AnnouncementWhereInput! = {}
    orderBy: [AnnouncementOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Announcement!]
  announcement(where: AnnouncementWhereUniqueInput!): Announcement
  announcementsCount(where: AnnouncementWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
