# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type Post {
  id: ID!
  slug: String
  name: String
  titleSize: Int
  titleColor: String
  subtitle: String
  subtitleSize: Int
  subtitleColor: String
  type: String
  status: String
  weight: Int
  heroImage: Photo
  ogImage: Photo
  headLogo: Photo
  heroMob: Photo
  heroStyle: String
  heroVideo: String
  heroCaption: String
  ref_authors(
    where: AuthorWhereInput! = {}
    orderBy: [AuthorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Author!]
  ref_authorsCount(where: AuthorWhereInput! = {}): Int
  reporter: String
  author: String
  photographer: String
  video: String
  designer: String
  engineer: String
  data: String
  content: JSON
  relatedPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  publishDate: DateTime
  ref_events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  ref_eventsCount(where: EventWhereInput! = {}): Int
  ref_polls(
    where: PollWhereInput! = {}
    orderBy: [PollOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Poll!]
  ref_pollsCount(where: PollWhereInput! = {}): Int
  project: Project
  group: Group
  category: Category
  classify: Classify
  sdg(
    where: SDGWhereInput! = {}
    orderBy: [SDGOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SDG!]
  sdgCount(where: SDGWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  copyright: String
  previewButton: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  titleSize: IntNullableFilter
  titleColor: StringFilter
  subtitle: StringFilter
  subtitleSize: IntNullableFilter
  subtitleColor: StringFilter
  type: StringNullableFilter
  status: StringNullableFilter
  weight: IntNullableFilter
  heroImage: PhotoWhereInput
  ogImage: PhotoWhereInput
  headLogo: PhotoWhereInput
  heroMob: PhotoWhereInput
  heroStyle: StringNullableFilter
  heroVideo: StringFilter
  heroCaption: StringFilter
  ref_authors: AuthorManyRelationFilter
  reporter: StringFilter
  author: StringFilter
  photographer: StringFilter
  video: StringFilter
  designer: StringFilter
  engineer: StringFilter
  data: StringFilter
  relatedPosts: PostManyRelationFilter
  publishDate: DateTimeFilter
  ref_events: EventManyRelationFilter
  ref_polls: PollManyRelationFilter
  project: ProjectWhereInput
  group: GroupWhereInput
  category: CategoryWhereInput
  classify: ClassifyWhereInput
  sdg: SDGManyRelationFilter
  tags: TagManyRelationFilter
  copyright: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input AuthorManyRelationFilter {
  every: AuthorWhereInput
  some: AuthorWhereInput
  none: AuthorWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventManyRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input PollManyRelationFilter {
  every: PollWhereInput
  some: PollWhereInput
  none: PollWhereInput
}

input SDGManyRelationFilter {
  every: SDGWhereInput
  some: SDGWhereInput
  none: SDGWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  titleSize: OrderDirection
  titleColor: OrderDirection
  subtitle: OrderDirection
  subtitleSize: OrderDirection
  subtitleColor: OrderDirection
  type: OrderDirection
  status: OrderDirection
  weight: OrderDirection
  heroStyle: OrderDirection
  heroVideo: OrderDirection
  heroCaption: OrderDirection
  reporter: OrderDirection
  author: OrderDirection
  photographer: OrderDirection
  video: OrderDirection
  designer: OrderDirection
  engineer: OrderDirection
  data: OrderDirection
  publishDate: OrderDirection
  copyright: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  slug: String
  name: String
  titleSize: Int
  titleColor: String
  subtitle: String
  subtitleSize: Int
  subtitleColor: String
  type: String
  status: String
  weight: Int
  heroImage: PhotoRelateToOneForUpdateInput
  ogImage: PhotoRelateToOneForUpdateInput
  headLogo: PhotoRelateToOneForUpdateInput
  heroMob: PhotoRelateToOneForUpdateInput
  heroStyle: String
  heroVideo: String
  heroCaption: String
  ref_authors: AuthorRelateToManyForUpdateInput
  reporter: String
  author: String
  photographer: String
  video: String
  designer: String
  engineer: String
  data: String
  content: JSON
  relatedPosts: PostRelateToManyForUpdateInput
  publishDate: DateTime
  ref_events: EventRelateToManyForUpdateInput
  ref_polls: PollRelateToManyForUpdateInput
  project: ProjectRelateToOneForUpdateInput
  group: GroupRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  classify: ClassifyRelateToOneForUpdateInput
  sdg: SDGRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  copyright: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input AuthorRelateToManyForUpdateInput {
  disconnect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input EventRelateToManyForUpdateInput {
  disconnect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PollRelateToManyForUpdateInput {
  disconnect: [PollWhereUniqueInput!]
  set: [PollWhereUniqueInput!]
  create: [PollCreateInput!]
  connect: [PollWhereUniqueInput!]
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input GroupRelateToOneForUpdateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ClassifyRelateToOneForUpdateInput {
  create: ClassifyCreateInput
  connect: ClassifyWhereUniqueInput
  disconnect: Boolean
}

input SDGRelateToManyForUpdateInput {
  disconnect: [SDGWhereUniqueInput!]
  set: [SDGWhereUniqueInput!]
  create: [SDGCreateInput!]
  connect: [SDGWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  slug: String
  name: String
  titleSize: Int
  titleColor: String
  subtitle: String
  subtitleSize: Int
  subtitleColor: String
  type: String
  status: String
  weight: Int
  heroImage: PhotoRelateToOneForCreateInput
  ogImage: PhotoRelateToOneForCreateInput
  headLogo: PhotoRelateToOneForCreateInput
  heroMob: PhotoRelateToOneForCreateInput
  heroStyle: String
  heroVideo: String
  heroCaption: String
  ref_authors: AuthorRelateToManyForCreateInput
  reporter: String
  author: String
  photographer: String
  video: String
  designer: String
  engineer: String
  data: String
  content: JSON
  relatedPosts: PostRelateToManyForCreateInput
  publishDate: DateTime
  ref_events: EventRelateToManyForCreateInput
  ref_polls: PollRelateToManyForCreateInput
  project: ProjectRelateToOneForCreateInput
  group: GroupRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  classify: ClassifyRelateToOneForCreateInput
  sdg: SDGRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  copyright: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input AuthorRelateToManyForCreateInput {
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input EventRelateToManyForCreateInput {
  create: [EventCreateInput!]
  connect: [EventWhereUniqueInput!]
}

input PollRelateToManyForCreateInput {
  create: [PollCreateInput!]
  connect: [PollWhereUniqueInput!]
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input GroupRelateToOneForCreateInput {
  create: GroupCreateInput
  connect: GroupWhereUniqueInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

input ClassifyRelateToOneForCreateInput {
  create: ClassifyCreateInput
  connect: ClassifyWhereUniqueInput
}

input SDGRelateToManyForCreateInput {
  create: [SDGCreateInput!]
  connect: [SDGWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Classify {
  id: ID!
  breadcrumb: String
  name: String
  slug: String
  category: Category
  weight: Int
  active: Boolean
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ClassifyWhereUniqueInput {
  id: ID
  slug: String
}

input ClassifyWhereInput {
  AND: [ClassifyWhereInput!]
  OR: [ClassifyWhereInput!]
  NOT: [ClassifyWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  category: CategoryWhereInput
  weight: IntNullableFilter
  active: BooleanFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ClassifyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ClassifyUpdateInput {
  name: String
  slug: String
  category: CategoryRelateToOneForUpdateInput
  weight: Int
  active: Boolean
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ClassifyUpdateArgs {
  where: ClassifyWhereUniqueInput!
  data: ClassifyUpdateInput!
}

input ClassifyCreateInput {
  name: String
  slug: String
  category: CategoryRelateToOneForCreateInput
  weight: Int
  active: Boolean
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Category {
  id: ID!
  name: String
  slug: String
  weight: Int
  active: Boolean
  group: Group
  classify(
    where: ClassifyWhereInput! = {}
    orderBy: [ClassifyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Classify!]
  classifyCount(where: ClassifyWhereInput! = {}): Int
  sdg(
    where: SDGWhereInput! = {}
    orderBy: [SDGOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SDG!]
  sdgCount(where: SDGWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  weight: IntNullableFilter
  active: BooleanFilter
  group: GroupWhereInput
  classify: ClassifyManyRelationFilter
  sdg: SDGManyRelationFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ClassifyManyRelationFilter {
  every: ClassifyWhereInput
  some: ClassifyWhereInput
  none: ClassifyWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  weight: Int
  active: Boolean
  group: GroupRelateToOneForUpdateInput
  classify: ClassifyRelateToManyForUpdateInput
  sdg: SDGRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ClassifyRelateToManyForUpdateInput {
  disconnect: [ClassifyWhereUniqueInput!]
  set: [ClassifyWhereUniqueInput!]
  create: [ClassifyCreateInput!]
  connect: [ClassifyWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  weight: Int
  active: Boolean
  group: GroupRelateToOneForCreateInput
  classify: ClassifyRelateToManyForCreateInput
  sdg: SDGRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ClassifyRelateToManyForCreateInput {
  create: [ClassifyCreateInput!]
  connect: [ClassifyWhereUniqueInput!]
}

type Group {
  id: ID!
  name: String
  slug: String
  weight: Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  eventsCount(where: EventWhereInput! = {}): Int
  heroImage: Photo
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  active: Boolean
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input GroupWhereUniqueInput {
  id: ID
  slug: String
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  weight: IntNullableFilter
  events: EventManyRelationFilter
  heroImage: PhotoWhereInput
  category: CategoryManyRelationFilter
  active: BooleanFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input GroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GroupUpdateInput {
  name: String
  slug: String
  weight: Int
  events: EventRelateToManyForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  category: CategoryRelateToManyForUpdateInput
  active: Boolean
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input GroupUpdateArgs {
  where: GroupWhereUniqueInput!
  data: GroupUpdateInput!
}

input GroupCreateInput {
  name: String
  slug: String
  weight: Int
  events: EventRelateToManyForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  category: CategoryRelateToManyForCreateInput
  active: Boolean
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

type SDG {
  id: ID!
  name: String
  url: String
  category(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  categoryCount(where: CategoryWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  heroImage: Photo
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input SDGWhereUniqueInput {
  id: ID
  url: String
}

input SDGWhereInput {
  AND: [SDGWhereInput!]
  OR: [SDGWhereInput!]
  NOT: [SDGWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  category: CategoryManyRelationFilter
  posts: PostManyRelationFilter
  heroImage: PhotoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input SDGOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SDGUpdateInput {
  name: String
  url: String
  category: CategoryRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SDGUpdateArgs {
  where: SDGWhereUniqueInput!
  data: SDGUpdateInput!
}

input SDGCreateInput {
  name: String
  url: String
  category: CategoryRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Project {
  id: ID!
  name: String
  slug: String
  weight: Int
  active: Boolean
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ProjectWhereUniqueInput {
  id: ID
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  weight: IntNullableFilter
  active: BooleanFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectUpdateInput {
  name: String
  slug: String
  weight: Int
  active: Boolean
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  slug: String
  weight: Int
  active: Boolean
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type LatestNew {
  id: ID!
  name: String
  slug: String
  subtitle: String
  status: String
  publishTime: DateTime
  type: String
  content: JSON
  download(
    where: DownloadWhereInput! = {}
    orderBy: [DownloadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Download!]
  downloadCount(where: DownloadWhereInput! = {}): Int
  active: Boolean
  previewButton: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input LatestNewWhereUniqueInput {
  id: ID
}

input LatestNewWhereInput {
  AND: [LatestNewWhereInput!]
  OR: [LatestNewWhereInput!]
  NOT: [LatestNewWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  subtitle: StringFilter
  status: StringNullableFilter
  publishTime: DateTimeNullableFilter
  type: StringNullableFilter
  download: DownloadManyRelationFilter
  active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DownloadManyRelationFilter {
  every: DownloadWhereInput
  some: DownloadWhereInput
  none: DownloadWhereInput
}

input LatestNewOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  subtitle: OrderDirection
  status: OrderDirection
  publishTime: OrderDirection
  type: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LatestNewUpdateInput {
  name: String
  slug: String
  subtitle: String
  status: String
  publishTime: DateTime
  type: String
  content: JSON
  download: DownloadRelateToManyForUpdateInput
  active: Boolean
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DownloadRelateToManyForUpdateInput {
  disconnect: [DownloadWhereUniqueInput!]
  set: [DownloadWhereUniqueInput!]
  create: [DownloadCreateInput!]
  connect: [DownloadWhereUniqueInput!]
}

input LatestNewUpdateArgs {
  where: LatestNewWhereUniqueInput!
  data: LatestNewUpdateInput!
}

input LatestNewCreateInput {
  name: String
  slug: String
  subtitle: String
  status: String
  publishTime: DateTime
  type: String
  content: JSON
  download: DownloadRelateToManyForCreateInput
  active: Boolean
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input DownloadRelateToManyForCreateInput {
  create: [DownloadCreateInput!]
  connect: [DownloadWhereUniqueInput!]
}

type Event {
  id: ID!
  name: String
  slug: String
  weight: Int
  register_start: DateTime
  register_end: DateTime
  event_start: DateTime
  event_end: DateTime
  category: Group
  venue: String
  location: String
  map_embed: String
  content: JSON
  status: String
  type: String
  register_link: String
  heroImage: Photo
  ref_posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  ref_postsCount(where: PostWhereInput! = {}): Int
  host: String
  hosted_type: String
  hosted_logo(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  hosted_logoCount(where: PhotoWhereInput! = {}): Int
  hosted_type2: String
  hosted_logo2(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  hosted_logo2Count(where: PhotoWhereInput! = {}): Int
  hosted_type3: String
  hosted_logo3(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  hosted_logo3Count(where: PhotoWhereInput! = {}): Int
  previewButton: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EventWhereUniqueInput {
  id: ID
  slug: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  weight: IntNullableFilter
  register_start: DateTimeNullableFilter
  register_end: DateTimeFilter
  event_start: DateTimeNullableFilter
  event_end: DateTimeNullableFilter
  category: GroupWhereInput
  venue: StringFilter
  location: StringFilter
  map_embed: StringFilter
  status: StringNullableFilter
  type: StringNullableFilter
  register_link: StringFilter
  heroImage: PhotoWhereInput
  ref_posts: PostManyRelationFilter
  host: StringFilter
  hosted_type: StringFilter
  hosted_logo: PhotoManyRelationFilter
  hosted_type2: StringFilter
  hosted_logo2: PhotoManyRelationFilter
  hosted_type3: StringFilter
  hosted_logo3: PhotoManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  weight: OrderDirection
  register_start: OrderDirection
  register_end: OrderDirection
  event_start: OrderDirection
  event_end: OrderDirection
  venue: OrderDirection
  location: OrderDirection
  map_embed: OrderDirection
  status: OrderDirection
  type: OrderDirection
  register_link: OrderDirection
  host: OrderDirection
  hosted_type: OrderDirection
  hosted_type2: OrderDirection
  hosted_type3: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  slug: String
  weight: Int
  register_start: DateTime
  register_end: DateTime
  event_start: DateTime
  event_end: DateTime
  category: GroupRelateToOneForUpdateInput
  venue: String
  location: String
  map_embed: String
  content: JSON
  status: String
  type: String
  register_link: String
  heroImage: PhotoRelateToOneForUpdateInput
  ref_posts: PostRelateToManyForUpdateInput
  host: String
  hosted_type: String
  hosted_logo: PhotoRelateToManyForUpdateInput
  hosted_type2: String
  hosted_logo2: PhotoRelateToManyForUpdateInput
  hosted_type3: String
  hosted_logo3: PhotoRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  slug: String
  weight: Int
  register_start: DateTime
  register_end: DateTime
  event_start: DateTime
  event_end: DateTime
  category: GroupRelateToOneForCreateInput
  venue: String
  location: String
  map_embed: String
  content: JSON
  status: String
  type: String
  register_link: String
  heroImage: PhotoRelateToOneForCreateInput
  ref_posts: PostRelateToManyForCreateInput
  host: String
  hosted_type: String
  hosted_logo: PhotoRelateToManyForCreateInput
  hosted_type2: String
  hosted_logo2: PhotoRelateToManyForCreateInput
  hosted_type3: String
  hosted_logo3: PhotoRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

type EditorChoice {
  id: ID!
  post: Post
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EditorChoiceWhereUniqueInput {
  id: ID
}

input EditorChoiceWhereInput {
  AND: [EditorChoiceWhereInput!]
  OR: [EditorChoiceWhereInput!]
  NOT: [EditorChoiceWhereInput!]
  id: IDFilter
  post: PostWhereInput
  weight: IntNullableFilter
  active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EditorChoiceOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditorChoiceUpdateInput {
  post: PostRelateToOneForUpdateInput
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input EditorChoiceUpdateArgs {
  where: EditorChoiceWhereUniqueInput!
  data: EditorChoiceUpdateInput!
}

input EditorChoiceCreateInput {
  post: PostRelateToOneForCreateInput
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type PromoteStory {
  id: ID!
  post: Post
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PromoteStoryWhereUniqueInput {
  id: ID
}

input PromoteStoryWhereInput {
  AND: [PromoteStoryWhereInput!]
  OR: [PromoteStoryWhereInput!]
  NOT: [PromoteStoryWhereInput!]
  id: IDFilter
  post: PostWhereInput
  weight: IntNullableFilter
  active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PromoteStoryOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PromoteStoryUpdateInput {
  post: PostRelateToOneForUpdateInput
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PromoteStoryUpdateArgs {
  where: PromoteStoryWhereUniqueInput!
  data: PromoteStoryUpdateInput!
}

input PromoteStoryCreateInput {
  post: PostRelateToOneForCreateInput
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PromoteEvent {
  id: ID!
  post: Event
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PromoteEventWhereUniqueInput {
  id: ID
}

input PromoteEventWhereInput {
  AND: [PromoteEventWhereInput!]
  OR: [PromoteEventWhereInput!]
  NOT: [PromoteEventWhereInput!]
  id: IDFilter
  post: EventWhereInput
  weight: IntNullableFilter
  active: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PromoteEventOrderByInput {
  id: OrderDirection
  weight: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PromoteEventUpdateInput {
  post: EventRelateToOneForUpdateInput
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input PromoteEventUpdateArgs {
  where: PromoteEventWhereUniqueInput!
  data: PromoteEventUpdateInput!
}

input PromoteEventCreateInput {
  post: EventRelateToOneForCreateInput
  weight: Int
  active: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type Influence {
  id: ID!
  name: String
  status: String
  heroImage: Photo
  desc: String
  publishDate: DateTime
  download: Download
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input InfluenceWhereUniqueInput {
  id: ID
  name: String
}

input InfluenceWhereInput {
  AND: [InfluenceWhereInput!]
  OR: [InfluenceWhereInput!]
  NOT: [InfluenceWhereInput!]
  id: IDFilter
  name: StringFilter
  status: StringNullableFilter
  heroImage: PhotoWhereInput
  desc: StringFilter
  publishDate: DateTimeFilter
  download: DownloadWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input InfluenceOrderByInput {
  id: OrderDirection
  name: OrderDirection
  status: OrderDirection
  desc: OrderDirection
  publishDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InfluenceUpdateInput {
  name: String
  status: String
  heroImage: PhotoRelateToOneForUpdateInput
  desc: String
  publishDate: DateTime
  download: DownloadRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DownloadRelateToOneForUpdateInput {
  create: DownloadCreateInput
  connect: DownloadWhereUniqueInput
  disconnect: Boolean
}

input InfluenceUpdateArgs {
  where: InfluenceWhereUniqueInput!
  data: InfluenceUpdateInput!
}

input InfluenceCreateInput {
  name: String
  status: String
  heroImage: PhotoRelateToOneForCreateInput
  desc: String
  publishDate: DateTime
  download: DownloadRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input DownloadRelateToOneForCreateInput {
  create: DownloadCreateInput
  connect: DownloadWhereUniqueInput
}

type AudioFile {
  id: ID!
  name: String
  file: CustomFileFieldOutput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input AudioFileWhereUniqueInput {
  id: ID
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AudioFileUpdateInput {
  name: String
  file: CustomFileFieldInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CustomFileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: CustomFileFieldInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Author {
  id: ID!
  name: String
  column: String
  email: String
  profile_photo: Photo
  intro: Author_intro_Document
  ref_posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  ref_postsCount(where: PostWhereInput! = {}): Int
  listing: Boolean
  active: Boolean
}

type Author_intro_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AuthorWhereUniqueInput {
  id: ID
  email: String
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
  column: StringFilter
  email: StringFilter
  profile_photo: PhotoWhereInput
  ref_posts: PostManyRelationFilter
  listing: BooleanFilter
  active: BooleanFilter
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  column: OrderDirection
  email: OrderDirection
  listing: OrderDirection
  active: OrderDirection
}

input AuthorUpdateInput {
  name: String
  column: String
  email: String
  profile_photo: PhotoRelateToOneForUpdateInput
  intro: JSON
  ref_posts: PostRelateToManyForUpdateInput
  listing: Boolean
  active: Boolean
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
  column: String
  email: String
  profile_photo: PhotoRelateToOneForCreateInput
  intro: JSON
  ref_posts: PostRelateToManyForCreateInput
  listing: Boolean
  active: Boolean
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: CustomFileFieldOutput
  coverPhoto: Photo
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: CustomFileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: CustomFileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  file: CustomFileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

input PhotoWhereUniqueInput {
  id: ID
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Poll {
  id: ID!
  name: String
  image: Photo
  choice: String
  type: String
  status: String
  startTime: DateTime
  endTime: DateTime
  publishTime: DateTime
  description: String
  options(
    where: PollOptionWhereInput! = {}
    orderBy: [PollOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollOption!]
  optionsCount(where: PollOptionWhereInput! = {}): Int
  result(
    where: PollResultWhereInput! = {}
    orderBy: [PollResultOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollResult!]
  resultCount(where: PollResultWhereInput! = {}): Int
  ref_posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  ref_postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PollWhereUniqueInput {
  id: ID
  name: String
}

input PollWhereInput {
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  NOT: [PollWhereInput!]
  id: IDFilter
  name: StringFilter
  image: PhotoWhereInput
  choice: StringNullableFilter
  type: StringNullableFilter
  status: StringNullableFilter
  startTime: DateTimeFilter
  endTime: DateTimeFilter
  publishTime: DateTimeFilter
  description: StringFilter
  options: PollOptionManyRelationFilter
  result: PollResultManyRelationFilter
  ref_posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PollOptionManyRelationFilter {
  every: PollOptionWhereInput
  some: PollOptionWhereInput
  none: PollOptionWhereInput
}

input PollResultManyRelationFilter {
  every: PollResultWhereInput
  some: PollResultWhereInput
  none: PollResultWhereInput
}

input PollOrderByInput {
  id: OrderDirection
  name: OrderDirection
  choice: OrderDirection
  type: OrderDirection
  status: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  publishTime: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PollUpdateInput {
  name: String
  image: PhotoRelateToOneForUpdateInput
  choice: String
  type: String
  status: String
  startTime: DateTime
  endTime: DateTime
  publishTime: DateTime
  description: String
  options: PollOptionRelateToManyForUpdateInput
  result: PollResultRelateToManyForUpdateInput
  ref_posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PollOptionRelateToManyForUpdateInput {
  disconnect: [PollOptionWhereUniqueInput!]
  set: [PollOptionWhereUniqueInput!]
  create: [PollOptionCreateInput!]
  connect: [PollOptionWhereUniqueInput!]
}

input PollResultRelateToManyForUpdateInput {
  disconnect: [PollResultWhereUniqueInput!]
  set: [PollResultWhereUniqueInput!]
  create: [PollResultCreateInput!]
  connect: [PollResultWhereUniqueInput!]
}

input PollUpdateArgs {
  where: PollWhereUniqueInput!
  data: PollUpdateInput!
}

input PollCreateInput {
  name: String
  image: PhotoRelateToOneForCreateInput
  choice: String
  type: String
  status: String
  startTime: DateTime
  endTime: DateTime
  publishTime: DateTime
  description: String
  options: PollOptionRelateToManyForCreateInput
  result: PollResultRelateToManyForCreateInput
  ref_posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PollOptionRelateToManyForCreateInput {
  create: [PollOptionCreateInput!]
  connect: [PollOptionWhereUniqueInput!]
}

input PollResultRelateToManyForCreateInput {
  create: [PollResultCreateInput!]
  connect: [PollResultWhereUniqueInput!]
}

type PollOption {
  id: ID!
  name: String
  order: Int
  poll(
    where: PollWhereInput! = {}
    orderBy: [PollOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Poll!]
  pollCount(where: PollWhereInput! = {}): Int
  result(
    where: PollResultWhereInput! = {}
    orderBy: [PollResultOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollResult!]
  resultCount(where: PollResultWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PollOptionWhereUniqueInput {
  id: ID
  name: String
}

input PollOptionWhereInput {
  AND: [PollOptionWhereInput!]
  OR: [PollOptionWhereInput!]
  NOT: [PollOptionWhereInput!]
  id: IDFilter
  name: StringFilter
  order: IntNullableFilter
  poll: PollManyRelationFilter
  result: PollResultManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PollOptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PollOptionUpdateInput {
  name: String
  order: Int
  poll: PollRelateToManyForUpdateInput
  result: PollResultRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PollOptionUpdateArgs {
  where: PollOptionWhereUniqueInput!
  data: PollOptionUpdateInput!
}

input PollOptionCreateInput {
  name: String
  order: Int
  poll: PollRelateToManyForCreateInput
  result: PollResultRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type PollResult {
  id: ID!
  name: String
  poll: Poll
  option: PollOption
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PollResultWhereUniqueInput {
  id: ID
  name: String
}

input PollResultWhereInput {
  AND: [PollResultWhereInput!]
  OR: [PollResultWhereInput!]
  NOT: [PollResultWhereInput!]
  id: IDFilter
  name: StringFilter
  poll: PollWhereInput
  option: PollOptionWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PollResultOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PollResultUpdateInput {
  name: String
  poll: PollRelateToOneForUpdateInput
  option: PollOptionRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PollRelateToOneForUpdateInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
  disconnect: Boolean
}

input PollOptionRelateToOneForUpdateInput {
  create: PollOptionCreateInput
  connect: PollOptionWhereUniqueInput
  disconnect: Boolean
}

input PollResultUpdateArgs {
  where: PollResultWhereUniqueInput!
  data: PollResultUpdateInput!
}

input PollResultCreateInput {
  name: String
  poll: PollRelateToOneForCreateInput
  option: PollOptionRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PollRelateToOneForCreateInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
}

input PollOptionRelateToOneForCreateInput {
  create: PollOptionCreateInput
  connect: PollOptionWhereUniqueInput
}

type Banner {
  id: ID!
  mobileImage: Photo
  tabletImage: Photo
  desktopImage: Photo
  url: String
  page: String
  register_start: DateTime
  register_end: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input BannerWhereUniqueInput {
  id: ID
}

input BannerWhereInput {
  AND: [BannerWhereInput!]
  OR: [BannerWhereInput!]
  NOT: [BannerWhereInput!]
  id: IDFilter
  mobileImage: PhotoWhereInput
  tabletImage: PhotoWhereInput
  desktopImage: PhotoWhereInput
  url: StringFilter
  page: StringFilter
  register_start: DateTimeFilter
  register_end: DateTimeFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input BannerOrderByInput {
  id: OrderDirection
  url: OrderDirection
  page: OrderDirection
  register_start: OrderDirection
  register_end: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input BannerUpdateInput {
  mobileImage: PhotoRelateToOneForUpdateInput
  tabletImage: PhotoRelateToOneForUpdateInput
  desktopImage: PhotoRelateToOneForUpdateInput
  url: String
  page: String
  register_start: DateTime
  register_end: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input BannerUpdateArgs {
  where: BannerWhereUniqueInput!
  data: BannerUpdateInput!
}

input BannerCreateInput {
  mobileImage: PhotoRelateToOneForCreateInput
  tabletImage: PhotoRelateToOneForCreateInput
  desktopImage: PhotoRelateToOneForCreateInput
  url: String
  page: String
  register_start: DateTime
  register_end: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Download {
  id: ID!
  name: String
  file: CustomFileFieldOutput
  url: String
  active: Boolean
  latest(
    where: LatestNewWhereInput! = {}
    orderBy: [LatestNewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LatestNew!]
  latestCount(where: LatestNewWhereInput! = {}): Int
  influence(
    where: InfluenceWhereInput! = {}
    orderBy: [InfluenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Influence!]
  influenceCount(where: InfluenceWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input DownloadWhereUniqueInput {
  id: ID
}

type LocalCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input DownloadWhereInput {
  AND: [DownloadWhereInput!]
  OR: [DownloadWhereInput!]
  NOT: [DownloadWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  active: BooleanFilter
  latest: LatestNewManyRelationFilter
  influence: InfluenceManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LatestNewManyRelationFilter {
  every: LatestNewWhereInput
  some: LatestNewWhereInput
  none: LatestNewWhereInput
}

input InfluenceManyRelationFilter {
  every: InfluenceWhereInput
  some: InfluenceWhereInput
  none: InfluenceWhereInput
}

input DownloadOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
  active: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DownloadUpdateInput {
  name: String
  file: CustomFileFieldInput
  url: String
  active: Boolean
  latest: LatestNewRelateToManyForUpdateInput
  influence: InfluenceRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LatestNewRelateToManyForUpdateInput {
  disconnect: [LatestNewWhereUniqueInput!]
  set: [LatestNewWhereUniqueInput!]
  create: [LatestNewCreateInput!]
  connect: [LatestNewWhereUniqueInput!]
}

input InfluenceRelateToManyForUpdateInput {
  disconnect: [InfluenceWhereUniqueInput!]
  set: [InfluenceWhereUniqueInput!]
  create: [InfluenceCreateInput!]
  connect: [InfluenceWhereUniqueInput!]
}

input DownloadUpdateArgs {
  where: DownloadWhereUniqueInput!
  data: DownloadUpdateInput!
}

input DownloadCreateInput {
  name: String
  file: CustomFileFieldInput
  url: String
  active: Boolean
  latest: LatestNewRelateToManyForCreateInput
  influence: InfluenceRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input LatestNewRelateToManyForCreateInput {
  create: [LatestNewCreateInput!]
  connect: [LatestNewWhereUniqueInput!]
}

input InfluenceRelateToManyForCreateInput {
  create: [InfluenceCreateInput!]
  connect: [InfluenceWhereUniqueInput!]
}

type InfoGraph {
  id: ID!
  name: String
  slug: String
  status: String
  heroImage: Photo
  publishDate: DateTime
  infograph: String
  dataSource: InfoGraph_dataSource_Document
  content: JSON
  dataUpdated: DateTime
  relatedPosts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  apiData: JSON
  isHomepage: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type InfoGraph_dataSource_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input InfoGraphWhereUniqueInput {
  id: ID
  name: String
  slug: String
}

input InfoGraphWhereInput {
  AND: [InfoGraphWhereInput!]
  OR: [InfoGraphWhereInput!]
  NOT: [InfoGraphWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  status: StringNullableFilter
  heroImage: PhotoWhereInput
  publishDate: DateTimeFilter
  infograph: StringFilter
  dataUpdated: DateTimeFilter
  relatedPosts: PostManyRelationFilter
  isHomepage: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input InfoGraphOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
  infograph: OrderDirection
  dataUpdated: OrderDirection
  isHomepage: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InfoGraphUpdateInput {
  name: String
  slug: String
  status: String
  heroImage: PhotoRelateToOneForUpdateInput
  publishDate: DateTime
  infograph: String
  dataSource: JSON
  content: JSON
  dataUpdated: DateTime
  relatedPosts: PostRelateToManyForUpdateInput
  apiData: JSON
  isHomepage: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input InfoGraphUpdateArgs {
  where: InfoGraphWhereUniqueInput!
  data: InfoGraphUpdateInput!
}

input InfoGraphCreateInput {
  name: String
  slug: String
  status: String
  heroImage: PhotoRelateToOneForCreateInput
  publishDate: DateTime
  infograph: String
  dataSource: JSON
  content: JSON
  dataUpdated: DateTime
  relatedPosts: PostRelateToManyForCreateInput
  apiData: JSON
  isHomepage: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createClassify(data: ClassifyCreateInput!): Classify
  createClassifies(data: [ClassifyCreateInput!]!): [Classify]
  updateClassify(
    where: ClassifyWhereUniqueInput!
    data: ClassifyUpdateInput!
  ): Classify
  updateClassifies(data: [ClassifyUpdateArgs!]!): [Classify]
  deleteClassify(where: ClassifyWhereUniqueInput!): Classify
  deleteClassifies(where: [ClassifyWhereUniqueInput!]!): [Classify]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createGroup(data: GroupCreateInput!): Group
  createGroups(data: [GroupCreateInput!]!): [Group]
  updateGroup(where: GroupWhereUniqueInput!, data: GroupUpdateInput!): Group
  updateGroups(data: [GroupUpdateArgs!]!): [Group]
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteGroups(where: [GroupWhereUniqueInput!]!): [Group]
  createSDG(data: SDGCreateInput!): SDG
  createSDGS(data: [SDGCreateInput!]!): [SDG]
  updateSDG(where: SDGWhereUniqueInput!, data: SDGUpdateInput!): SDG
  updateSDGS(data: [SDGUpdateArgs!]!): [SDG]
  deleteSDG(where: SDGWhereUniqueInput!): SDG
  deleteSDGS(where: [SDGWhereUniqueInput!]!): [SDG]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(
    where: ProjectWhereUniqueInput!
    data: ProjectUpdateInput!
  ): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createLatestNew(data: LatestNewCreateInput!): LatestNew
  createLatestNews(data: [LatestNewCreateInput!]!): [LatestNew]
  updateLatestNew(
    where: LatestNewWhereUniqueInput!
    data: LatestNewUpdateInput!
  ): LatestNew
  updateLatestNews(data: [LatestNewUpdateArgs!]!): [LatestNew]
  deleteLatestNew(where: LatestNewWhereUniqueInput!): LatestNew
  deleteLatestNews(where: [LatestNewWhereUniqueInput!]!): [LatestNew]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createEditorChoice(data: EditorChoiceCreateInput!): EditorChoice
  createEditorChoices(data: [EditorChoiceCreateInput!]!): [EditorChoice]
  updateEditorChoice(
    where: EditorChoiceWhereUniqueInput!
    data: EditorChoiceUpdateInput!
  ): EditorChoice
  updateEditorChoices(data: [EditorChoiceUpdateArgs!]!): [EditorChoice]
  deleteEditorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  deleteEditorChoices(where: [EditorChoiceWhereUniqueInput!]!): [EditorChoice]
  createPromoteStory(data: PromoteStoryCreateInput!): PromoteStory
  createPromoteStories(data: [PromoteStoryCreateInput!]!): [PromoteStory]
  updatePromoteStory(
    where: PromoteStoryWhereUniqueInput!
    data: PromoteStoryUpdateInput!
  ): PromoteStory
  updatePromoteStories(data: [PromoteStoryUpdateArgs!]!): [PromoteStory]
  deletePromoteStory(where: PromoteStoryWhereUniqueInput!): PromoteStory
  deletePromoteStories(where: [PromoteStoryWhereUniqueInput!]!): [PromoteStory]
  createPromoteEvent(data: PromoteEventCreateInput!): PromoteEvent
  createPromoteEvents(data: [PromoteEventCreateInput!]!): [PromoteEvent]
  updatePromoteEvent(
    where: PromoteEventWhereUniqueInput!
    data: PromoteEventUpdateInput!
  ): PromoteEvent
  updatePromoteEvents(data: [PromoteEventUpdateArgs!]!): [PromoteEvent]
  deletePromoteEvent(where: PromoteEventWhereUniqueInput!): PromoteEvent
  deletePromoteEvents(where: [PromoteEventWhereUniqueInput!]!): [PromoteEvent]
  createInfluence(data: InfluenceCreateInput!): Influence
  createInfluences(data: [InfluenceCreateInput!]!): [Influence]
  updateInfluence(
    where: InfluenceWhereUniqueInput!
    data: InfluenceUpdateInput!
  ): Influence
  updateInfluences(data: [InfluenceUpdateArgs!]!): [Influence]
  deleteInfluence(where: InfluenceWhereUniqueInput!): Influence
  deleteInfluences(where: [InfluenceWhereUniqueInput!]!): [Influence]
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(
    where: AudioFileWhereUniqueInput!
    data: AudioFileUpdateInput!
  ): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPoll(data: PollCreateInput!): Poll
  createPolls(data: [PollCreateInput!]!): [Poll]
  updatePoll(where: PollWhereUniqueInput!, data: PollUpdateInput!): Poll
  updatePolls(data: [PollUpdateArgs!]!): [Poll]
  deletePoll(where: PollWhereUniqueInput!): Poll
  deletePolls(where: [PollWhereUniqueInput!]!): [Poll]
  createPollOption(data: PollOptionCreateInput!): PollOption
  createPollOptions(data: [PollOptionCreateInput!]!): [PollOption]
  updatePollOption(
    where: PollOptionWhereUniqueInput!
    data: PollOptionUpdateInput!
  ): PollOption
  updatePollOptions(data: [PollOptionUpdateArgs!]!): [PollOption]
  deletePollOption(where: PollOptionWhereUniqueInput!): PollOption
  deletePollOptions(where: [PollOptionWhereUniqueInput!]!): [PollOption]
  createPollResult(data: PollResultCreateInput!): PollResult
  createPollResults(data: [PollResultCreateInput!]!): [PollResult]
  updatePollResult(
    where: PollResultWhereUniqueInput!
    data: PollResultUpdateInput!
  ): PollResult
  updatePollResults(data: [PollResultUpdateArgs!]!): [PollResult]
  deletePollResult(where: PollResultWhereUniqueInput!): PollResult
  deletePollResults(where: [PollResultWhereUniqueInput!]!): [PollResult]
  createBanner(data: BannerCreateInput!): Banner
  createBanners(data: [BannerCreateInput!]!): [Banner]
  updateBanner(where: BannerWhereUniqueInput!, data: BannerUpdateInput!): Banner
  updateBanners(data: [BannerUpdateArgs!]!): [Banner]
  deleteBanner(where: BannerWhereUniqueInput!): Banner
  deleteBanners(where: [BannerWhereUniqueInput!]!): [Banner]
  createDownload(data: DownloadCreateInput!): Download
  createDownloads(data: [DownloadCreateInput!]!): [Download]
  updateDownload(
    where: DownloadWhereUniqueInput!
    data: DownloadUpdateInput!
  ): Download
  updateDownloads(data: [DownloadUpdateArgs!]!): [Download]
  deleteDownload(where: DownloadWhereUniqueInput!): Download
  deleteDownloads(where: [DownloadWhereUniqueInput!]!): [Download]
  createInfoGraph(data: InfoGraphCreateInput!): InfoGraph
  createInfoGraphs(data: [InfoGraphCreateInput!]!): [InfoGraph]
  updateInfoGraph(
    where: InfoGraphWhereUniqueInput!
    data: InfoGraphUpdateInput!
  ): InfoGraph
  updateInfoGraphs(data: [InfoGraphUpdateArgs!]!): [InfoGraph]
  deleteInfoGraph(where: InfoGraphWhereUniqueInput!): InfoGraph
  deleteInfoGraphs(where: [InfoGraphWhereUniqueInput!]!): [InfoGraph]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  classifies(
    where: ClassifyWhereInput! = {}
    orderBy: [ClassifyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Classify!]
  classify(where: ClassifyWhereUniqueInput!): Classify
  classifiesCount(where: ClassifyWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  groups(
    where: GroupWhereInput! = {}
    orderBy: [GroupOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Group!]
  group(where: GroupWhereUniqueInput!): Group
  groupsCount(where: GroupWhereInput! = {}): Int
  sDGS(
    where: SDGWhereInput! = {}
    orderBy: [SDGOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SDG!]
  sDG(where: SDGWhereUniqueInput!): SDG
  sDGSCount(where: SDGWhereInput! = {}): Int
  projects(
    where: ProjectWhereInput! = {}
    orderBy: [ProjectOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  latestNews(
    where: LatestNewWhereInput! = {}
    orderBy: [LatestNewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LatestNew!]
  latestNew(where: LatestNewWhereUniqueInput!): LatestNew
  latestNewsCount(where: LatestNewWhereInput! = {}): Int
  events(
    where: EventWhereInput! = {}
    orderBy: [EventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  editorChoices(
    where: EditorChoiceWhereInput! = {}
    orderBy: [EditorChoiceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EditorChoice!]
  editorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  editorChoicesCount(where: EditorChoiceWhereInput! = {}): Int
  promoteStories(
    where: PromoteStoryWhereInput! = {}
    orderBy: [PromoteStoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PromoteStory!]
  promoteStory(where: PromoteStoryWhereUniqueInput!): PromoteStory
  promoteStoriesCount(where: PromoteStoryWhereInput! = {}): Int
  promoteEvents(
    where: PromoteEventWhereInput! = {}
    orderBy: [PromoteEventOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PromoteEvent!]
  promoteEvent(where: PromoteEventWhereUniqueInput!): PromoteEvent
  promoteEventsCount(where: PromoteEventWhereInput! = {}): Int
  influences(
    where: InfluenceWhereInput! = {}
    orderBy: [InfluenceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Influence!]
  influence(where: InfluenceWhereUniqueInput!): Influence
  influencesCount(where: InfluenceWhereInput! = {}): Int
  audioFiles(
    where: AudioFileWhereInput! = {}
    orderBy: [AudioFileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  authors(
    where: AuthorWhereInput! = {}
    orderBy: [AuthorOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  videos(
    where: VideoWhereInput! = {}
    orderBy: [VideoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  polls(
    where: PollWhereInput! = {}
    orderBy: [PollOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Poll!]
  poll(where: PollWhereUniqueInput!): Poll
  pollsCount(where: PollWhereInput! = {}): Int
  pollOptions(
    where: PollOptionWhereInput! = {}
    orderBy: [PollOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollOption!]
  pollOption(where: PollOptionWhereUniqueInput!): PollOption
  pollOptionsCount(where: PollOptionWhereInput! = {}): Int
  pollResults(
    where: PollResultWhereInput! = {}
    orderBy: [PollResultOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [PollResult!]
  pollResult(where: PollResultWhereUniqueInput!): PollResult
  pollResultsCount(where: PollResultWhereInput! = {}): Int
  banners(
    where: BannerWhereInput! = {}
    orderBy: [BannerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Banner!]
  banner(where: BannerWhereUniqueInput!): Banner
  bannersCount(where: BannerWhereInput! = {}): Int
  downloads(
    where: DownloadWhereInput! = {}
    orderBy: [DownloadOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Download!]
  download(where: DownloadWhereUniqueInput!): Download
  downloadsCount(where: DownloadWhereInput! = {}): Int
  infoGraphs(
    where: InfoGraphWhereInput! = {}
    orderBy: [InfoGraphOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InfoGraph!]
  infoGraph(where: InfoGraphWhereUniqueInput!): InfoGraph
  infoGraphsCount(where: InfoGraphWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
