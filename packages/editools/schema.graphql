# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type LiveblogItem {
  id: ID!
  title: String
  status: String
  publishTime: DateTime
  heroImage: Photo
  heroVideo: Video
  imageCaption: String
  author: String
  name: JSON
  boost: Boolean
  liveblog: Liveblog
  tags: Tag
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input LiveblogItemWhereUniqueInput {
  id: ID
}

input LiveblogItemWhereInput {
  AND: [LiveblogItemWhereInput!]
  OR: [LiveblogItemWhereInput!]
  NOT: [LiveblogItemWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishTime: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  heroVideo: VideoWhereInput
  imageCaption: StringFilter
  author: StringFilter
  boost: BooleanFilter
  liveblog: LiveblogWhereInput
  tags: TagWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input LiveblogItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishTime: OrderDirection
  imageCaption: OrderDirection
  author: OrderDirection
  boost: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LiveblogItemUpdateInput {
  title: String
  status: String
  publishTime: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  heroVideo: VideoRelateToOneForUpdateInput
  imageCaption: String
  author: String
  name: JSON
  boost: Boolean
  liveblog: LiveblogRelateToOneForUpdateInput
  tags: TagRelateToOneForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input VideoRelateToOneForUpdateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
}

input LiveblogRelateToOneForUpdateInput {
  create: LiveblogCreateInput
  connect: LiveblogWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input LiveblogItemUpdateArgs {
  where: LiveblogItemWhereUniqueInput!
  data: LiveblogItemUpdateInput!
}

input LiveblogItemCreateInput {
  title: String
  status: String
  publishTime: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  heroVideo: VideoRelateToOneForCreateInput
  imageCaption: String
  author: String
  name: JSON
  boost: Boolean
  liveblog: LiveblogRelateToOneForCreateInput
  tags: TagRelateToOneForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input VideoRelateToOneForCreateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

input LiveblogRelateToOneForCreateInput {
  create: LiveblogCreateInput
  connect: LiveblogWhereUniqueInput
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Liveblog {
  id: ID!
  name: String
  slug: String
  desc: String
  heroImage: Photo
  heroVideo: Video
  active: Boolean
  credit: String
  liveblog_items(
    where: LiveblogItemWhereInput! = {}
    orderBy: [LiveblogItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiveblogItem!]
  liveblog_itemsCount(where: LiveblogItemWhereInput! = {}): Int
  tags: Tag
  publisher: Publisher
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input LiveblogWhereUniqueInput {
  id: ID
  slug: String
}

input LiveblogWhereInput {
  AND: [LiveblogWhereInput!]
  OR: [LiveblogWhereInput!]
  NOT: [LiveblogWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  desc: StringFilter
  heroImage: PhotoWhereInput
  heroVideo: VideoWhereInput
  active: BooleanFilter
  credit: StringFilter
  liveblog_items: LiveblogItemManyRelationFilter
  tags: TagWhereInput
  publisher: PublisherWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LiveblogItemManyRelationFilter {
  every: LiveblogItemWhereInput
  some: LiveblogItemWhereInput
  none: LiveblogItemWhereInput
}

input LiveblogOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  desc: OrderDirection
  active: OrderDirection
  credit: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LiveblogUpdateInput {
  name: String
  slug: String
  desc: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroVideo: VideoRelateToOneForUpdateInput
  active: Boolean
  credit: String
  liveblog_items: LiveblogItemRelateToManyForUpdateInput
  tags: TagRelateToOneForUpdateInput
  publisher: PublisherRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LiveblogItemRelateToManyForUpdateInput {
  disconnect: [LiveblogItemWhereUniqueInput!]
  set: [LiveblogItemWhereUniqueInput!]
  create: [LiveblogItemCreateInput!]
  connect: [LiveblogItemWhereUniqueInput!]
}

input PublisherRelateToOneForUpdateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
  disconnect: Boolean
}

input LiveblogUpdateArgs {
  where: LiveblogWhereUniqueInput!
  data: LiveblogUpdateInput!
}

input LiveblogCreateInput {
  name: String
  slug: String
  desc: String
  heroImage: PhotoRelateToOneForCreateInput
  heroVideo: VideoRelateToOneForCreateInput
  active: Boolean
  credit: String
  liveblog_items: LiveblogItemRelateToManyForCreateInput
  tags: TagRelateToOneForCreateInput
  publisher: PublisherRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input LiveblogItemRelateToManyForCreateInput {
  create: [LiveblogItemCreateInput!]
  connect: [LiveblogItemWhereUniqueInput!]
}

input PublisherRelateToOneForCreateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
}

type Publisher {
  id: ID!
  name: String
  slug: String
  intro: String
  is_active: Boolean
  template: String
  liveblog(
    where: LiveblogWhereInput! = {}
    orderBy: [LiveblogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Liveblog!]
  liveblogCount(where: LiveblogWhereInput! = {}): Int
  form(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  intro: StringFilter
  is_active: BooleanFilter
  template: StringFilter
  liveblog: LiveblogManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LiveblogManyRelationFilter {
  every: LiveblogWhereInput
  some: LiveblogWhereInput
  none: LiveblogWhereInput
}

input FormManyRelationFilter {
  every: FormWhereInput
  some: FormWhereInput
  none: FormWhereInput
}

input PublisherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  intro: OrderDirection
  is_active: OrderDirection
  template: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PublisherUpdateInput {
  name: String
  slug: String
  intro: String
  is_active: Boolean
  template: String
  liveblog: LiveblogRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LiveblogRelateToManyForUpdateInput {
  disconnect: [LiveblogWhereUniqueInput!]
  set: [LiveblogWhereUniqueInput!]
  create: [LiveblogCreateInput!]
  connect: [LiveblogWhereUniqueInput!]
}

input FormRelateToManyForUpdateInput {
  disconnect: [FormWhereUniqueInput!]
  set: [FormWhereUniqueInput!]
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  name: String
  slug: String
  intro: String
  is_active: Boolean
  template: String
  liveblog: LiveblogRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input LiveblogRelateToManyForCreateInput {
  create: [LiveblogCreateInput!]
  connect: [LiveblogWhereUniqueInput!]
}

input FormRelateToManyForCreateInput {
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

type AudioFile {
  id: ID!
  name: String
  file: FileFieldOutput
  coverPhoto: Photo
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input AudioFileWhereUniqueInput {
  id: ID
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
  coverPhoto: PhotoWhereInput
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AudioFileUpdateInput {
  name: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: FileFieldOutput
  coverPhoto: Photo
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  file: CustomFileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

interface CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereUniqueInput {
  id: ID
}

type LocalCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudCustomFileFieldOutput implements CustomFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

input CustomFileFieldInput {
  upload: Upload
  ref: String
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: CustomFileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Tag {
  id: ID!
  name: String
  liveblog(
    where: LiveblogWhereInput! = {}
    orderBy: [LiveblogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Liveblog!]
  liveblogCount(where: LiveblogWhereInput! = {}): Int
  liveblog_items(
    where: LiveblogItemWhereInput! = {}
    orderBy: [LiveblogItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiveblogItem!]
  liveblog_itemsCount(where: LiveblogItemWhereInput! = {}): Int
  questions(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  questionSection(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  questionSectionCount(where: QuestionWhereInput! = {}): Int
  form(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  liveblog: LiveblogManyRelationFilter
  liveblog_items: LiveblogItemManyRelationFilter
  questions: QuestionManyRelationFilter
  questionSection: QuestionManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  liveblog: LiveblogRelateToManyForUpdateInput
  liveblog_items: LiveblogItemRelateToManyForUpdateInput
  questions: QuestionRelateToManyForUpdateInput
  questionSection: QuestionRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  liveblog: LiveblogRelateToManyForCreateInput
  liveblog_items: LiveblogItemRelateToManyForCreateInput
  questions: QuestionRelateToManyForCreateInput
  questionSection: QuestionRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

type Form {
  id: ID!
  name: String
  slug: String
  type: FormTypeType
  content: JSON
  heroImage: Photo
  mobileImage: Photo
  heroVideo: Video
  active: Boolean
  fields(
    where: FieldWhereInput! = {}
    orderBy: [FieldOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Field!]
  fieldsCount(where: FieldWhereInput! = {}): Int
  answers(
    where: FormAnswerWhereInput! = {}
    orderBy: [FormAnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormAnswer!]
  answersCount(where: FormAnswerWhereInput! = {}): Int
  updateTime: DateTime
  questions(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  conditions(
    where: ConditionCollectionWhereInput! = {}
    orderBy: [ConditionCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ConditionCollection!]
  conditionsCount(where: ConditionCollectionWhereInput! = {}): Int
  publisher: Publisher
  result(
    where: FormResultWhereInput! = {}
    orderBy: [FormResultOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormResult!]
  resultCount(where: FormResultWhereInput! = {}): Int
  feedback: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum FormTypeType {
  qa
  form
  questionniare
  quiz
}

input FormWhereUniqueInput {
  id: ID
  slug: String
}

input FormWhereInput {
  AND: [FormWhereInput!]
  OR: [FormWhereInput!]
  NOT: [FormWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  type: FormTypeTypeNullableFilter
  heroImage: PhotoWhereInput
  mobileImage: PhotoWhereInput
  heroVideo: VideoWhereInput
  active: BooleanFilter
  fields: FieldManyRelationFilter
  answers: FormAnswerManyRelationFilter
  updateTime: DateTimeNullableFilter
  questions: QuestionManyRelationFilter
  tags: TagManyRelationFilter
  conditions: ConditionCollectionManyRelationFilter
  publisher: PublisherWhereInput
  result: FormResultManyRelationFilter
  feedback: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FormTypeTypeNullableFilter {
  equals: FormTypeType
  in: [FormTypeType!]
  notIn: [FormTypeType!]
  not: FormTypeTypeNullableFilter
}

input FieldManyRelationFilter {
  every: FieldWhereInput
  some: FieldWhereInput
  none: FieldWhereInput
}

input FormAnswerManyRelationFilter {
  every: FormAnswerWhereInput
  some: FormAnswerWhereInput
  none: FormAnswerWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input ConditionCollectionManyRelationFilter {
  every: ConditionCollectionWhereInput
  some: ConditionCollectionWhereInput
  none: ConditionCollectionWhereInput
}

input FormResultManyRelationFilter {
  every: FormResultWhereInput
  some: FormResultWhereInput
  none: FormResultWhereInput
}

input FormOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  type: OrderDirection
  active: OrderDirection
  updateTime: OrderDirection
  feedback: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormUpdateInput {
  name: String
  slug: String
  type: FormTypeType
  content: JSON
  heroImage: PhotoRelateToOneForUpdateInput
  mobileImage: PhotoRelateToOneForUpdateInput
  heroVideo: VideoRelateToOneForUpdateInput
  active: Boolean
  fields: FieldRelateToManyForUpdateInput
  answers: FormAnswerRelateToManyForUpdateInput
  updateTime: DateTime
  questions: QuestionRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  conditions: ConditionCollectionRelateToManyForUpdateInput
  publisher: PublisherRelateToOneForUpdateInput
  result: FormResultRelateToManyForUpdateInput
  feedback: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FieldRelateToManyForUpdateInput {
  disconnect: [FieldWhereUniqueInput!]
  set: [FieldWhereUniqueInput!]
  create: [FieldCreateInput!]
  connect: [FieldWhereUniqueInput!]
}

input FormAnswerRelateToManyForUpdateInput {
  disconnect: [FormAnswerWhereUniqueInput!]
  set: [FormAnswerWhereUniqueInput!]
  create: [FormAnswerCreateInput!]
  connect: [FormAnswerWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ConditionCollectionRelateToManyForUpdateInput {
  disconnect: [ConditionCollectionWhereUniqueInput!]
  set: [ConditionCollectionWhereUniqueInput!]
  create: [ConditionCollectionCreateInput!]
  connect: [ConditionCollectionWhereUniqueInput!]
}

input FormResultRelateToManyForUpdateInput {
  disconnect: [FormResultWhereUniqueInput!]
  set: [FormResultWhereUniqueInput!]
  create: [FormResultCreateInput!]
  connect: [FormResultWhereUniqueInput!]
}

input FormUpdateArgs {
  where: FormWhereUniqueInput!
  data: FormUpdateInput!
}

input FormCreateInput {
  name: String
  slug: String
  type: FormTypeType
  content: JSON
  heroImage: PhotoRelateToOneForCreateInput
  mobileImage: PhotoRelateToOneForCreateInput
  heroVideo: VideoRelateToOneForCreateInput
  active: Boolean
  fields: FieldRelateToManyForCreateInput
  answers: FormAnswerRelateToManyForCreateInput
  updateTime: DateTime
  questions: QuestionRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  conditions: ConditionCollectionRelateToManyForCreateInput
  publisher: PublisherRelateToOneForCreateInput
  result: FormResultRelateToManyForCreateInput
  feedback: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FieldRelateToManyForCreateInput {
  create: [FieldCreateInput!]
  connect: [FieldWhereUniqueInput!]
}

input FormAnswerRelateToManyForCreateInput {
  create: [FormAnswerCreateInput!]
  connect: [FormAnswerWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input ConditionCollectionRelateToManyForCreateInput {
  create: [ConditionCollectionCreateInput!]
  connect: [ConditionCollectionWhereUniqueInput!]
}

input FormResultRelateToManyForCreateInput {
  create: [FormResultCreateInput!]
  connect: [FormResultWhereUniqueInput!]
}

type Field {
  id: ID!
  name: String
  type: FieldTypeType
  status: String
  heroImage: Photo
  content: JSON
  sortOrder: Int
  form: Form
  options(
    where: FieldOptionWhereInput! = {}
    orderBy: [FieldOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FieldOption!]
  optionsCount(where: FieldOptionWhereInput! = {}): Int
  conditionCollection(
    where: ConditionCollectionWhereInput! = {}
    orderBy: [ConditionCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ConditionCollection!]
  conditionCollectionCount(where: ConditionCollectionWhereInput! = {}): Int
  condition(
    where: ConditionWhereInput! = {}
    orderBy: [ConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Condition!]
  conditionCount(where: ConditionWhereInput! = {}): Int
  apiData: JSON
  result(
    where: FormResultWhereInput! = {}
    orderBy: [FormResultOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormResult!]
  resultCount(where: FormResultWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum FieldTypeType {
  single
  multiple
  text
  checkbox
}

input FieldWhereUniqueInput {
  id: ID
}

input FieldWhereInput {
  AND: [FieldWhereInput!]
  OR: [FieldWhereInput!]
  NOT: [FieldWhereInput!]
  id: IDFilter
  name: StringFilter
  type: FieldTypeTypeNullableFilter
  status: StringNullableFilter
  heroImage: PhotoWhereInput
  sortOrder: IntNullableFilter
  form: FormWhereInput
  options: FieldOptionManyRelationFilter
  conditionCollection: ConditionCollectionManyRelationFilter
  condition: ConditionManyRelationFilter
  result: FormResultManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FieldTypeTypeNullableFilter {
  equals: FieldTypeType
  in: [FieldTypeType!]
  notIn: [FieldTypeType!]
  not: FieldTypeTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FieldOptionManyRelationFilter {
  every: FieldOptionWhereInput
  some: FieldOptionWhereInput
  none: FieldOptionWhereInput
}

input ConditionManyRelationFilter {
  every: ConditionWhereInput
  some: ConditionWhereInput
  none: ConditionWhereInput
}

input FieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  status: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FieldUpdateInput {
  name: String
  type: FieldTypeType
  status: String
  heroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  sortOrder: Int
  form: FormRelateToOneForUpdateInput
  options: FieldOptionRelateToManyForUpdateInput
  conditionCollection: ConditionCollectionRelateToManyForUpdateInput
  condition: ConditionRelateToManyForUpdateInput
  apiData: JSON
  result: FormResultRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormRelateToOneForUpdateInput {
  create: FormCreateInput
  connect: FormWhereUniqueInput
  disconnect: Boolean
}

input FieldOptionRelateToManyForUpdateInput {
  disconnect: [FieldOptionWhereUniqueInput!]
  set: [FieldOptionWhereUniqueInput!]
  create: [FieldOptionCreateInput!]
  connect: [FieldOptionWhereUniqueInput!]
}

input ConditionRelateToManyForUpdateInput {
  disconnect: [ConditionWhereUniqueInput!]
  set: [ConditionWhereUniqueInput!]
  create: [ConditionCreateInput!]
  connect: [ConditionWhereUniqueInput!]
}

input FieldUpdateArgs {
  where: FieldWhereUniqueInput!
  data: FieldUpdateInput!
}

input FieldCreateInput {
  name: String
  type: FieldTypeType
  status: String
  heroImage: PhotoRelateToOneForCreateInput
  content: JSON
  sortOrder: Int
  form: FormRelateToOneForCreateInput
  options: FieldOptionRelateToManyForCreateInput
  conditionCollection: ConditionCollectionRelateToManyForCreateInput
  condition: ConditionRelateToManyForCreateInput
  apiData: JSON
  result: FormResultRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FormRelateToOneForCreateInput {
  create: FormCreateInput
  connect: FormWhereUniqueInput
}

input FieldOptionRelateToManyForCreateInput {
  create: [FieldOptionCreateInput!]
  connect: [FieldOptionWhereUniqueInput!]
}

input ConditionRelateToManyForCreateInput {
  create: [ConditionCreateInput!]
  connect: [ConditionWhereUniqueInput!]
}

type FieldOption {
  id: ID!
  name: String
  heroImage: Photo
  content: String
  value: String
  sortOrder: Int
  field: Field
  condition(
    where: ConditionWhereInput! = {}
    orderBy: [ConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Condition!]
  conditionCount(where: ConditionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FieldOptionWhereUniqueInput {
  id: ID
}

input FieldOptionWhereInput {
  AND: [FieldOptionWhereInput!]
  OR: [FieldOptionWhereInput!]
  NOT: [FieldOptionWhereInput!]
  id: IDFilter
  name: StringFilter
  heroImage: PhotoWhereInput
  content: StringFilter
  value: StringFilter
  sortOrder: IntNullableFilter
  field: FieldWhereInput
  condition: ConditionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FieldOptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
  value: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FieldOptionUpdateInput {
  name: String
  heroImage: PhotoRelateToOneForUpdateInput
  content: String
  value: String
  sortOrder: Int
  field: FieldRelateToOneForUpdateInput
  condition: ConditionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FieldRelateToOneForUpdateInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
}

input FieldOptionUpdateArgs {
  where: FieldOptionWhereUniqueInput!
  data: FieldOptionUpdateInput!
}

input FieldOptionCreateInput {
  name: String
  heroImage: PhotoRelateToOneForCreateInput
  content: String
  value: String
  sortOrder: Int
  field: FieldRelateToOneForCreateInput
  condition: ConditionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FieldRelateToOneForCreateInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
}

type FormAnswer {
  id: ID!
  name: String
  heroImage: Photo
  mobileImage: Photo
  content: JSON
  form: Form
  conditionCollection(
    where: ConditionCollectionWhereInput! = {}
    orderBy: [ConditionCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ConditionCollection!]
  conditionCollectionCount(where: ConditionCollectionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FormAnswerWhereUniqueInput {
  id: ID
}

input FormAnswerWhereInput {
  AND: [FormAnswerWhereInput!]
  OR: [FormAnswerWhereInput!]
  NOT: [FormAnswerWhereInput!]
  id: IDFilter
  name: StringFilter
  heroImage: PhotoWhereInput
  mobileImage: PhotoWhereInput
  form: FormWhereInput
  conditionCollection: ConditionCollectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FormAnswerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormAnswerUpdateInput {
  name: String
  heroImage: PhotoRelateToOneForUpdateInput
  mobileImage: PhotoRelateToOneForUpdateInput
  content: JSON
  form: FormRelateToOneForUpdateInput
  conditionCollection: ConditionCollectionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormAnswerUpdateArgs {
  where: FormAnswerWhereUniqueInput!
  data: FormAnswerUpdateInput!
}

input FormAnswerCreateInput {
  name: String
  heroImage: PhotoRelateToOneForCreateInput
  mobileImage: PhotoRelateToOneForCreateInput
  content: JSON
  form: FormRelateToOneForCreateInput
  conditionCollection: ConditionCollectionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type FormResult {
  id: ID!
  name: String
  ip: String
  result: String
  responseTime: DateTime
  form: Form
  field: Field
  hidden: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FormResultWhereUniqueInput {
  id: ID
}

input FormResultWhereInput {
  AND: [FormResultWhereInput!]
  OR: [FormResultWhereInput!]
  NOT: [FormResultWhereInput!]
  id: IDFilter
  name: StringFilter
  ip: StringFilter
  result: StringFilter
  responseTime: DateTimeNullableFilter
  form: FormWhereInput
  field: FieldWhereInput
  hidden: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FormResultOrderByInput {
  id: OrderDirection
  name: OrderDirection
  ip: OrderDirection
  result: OrderDirection
  responseTime: OrderDirection
  hidden: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormResultUpdateInput {
  name: String
  ip: String
  result: String
  responseTime: DateTime
  form: FormRelateToOneForUpdateInput
  field: FieldRelateToOneForUpdateInput
  hidden: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormResultUpdateArgs {
  where: FormResultWhereUniqueInput!
  data: FormResultUpdateInput!
}

input FormResultCreateInput {
  name: String
  ip: String
  result: String
  responseTime: DateTime
  form: FormRelateToOneForCreateInput
  field: FieldRelateToOneForCreateInput
  hidden: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Condition {
  id: ID!
  title: String
  formField: Field
  compare: String
  option(
    where: FieldOptionWhereInput! = {}
    orderBy: [FieldOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FieldOption!]
  optionCount(where: FieldOptionWhereInput! = {}): Int
  conditionCollection(
    where: ConditionCollectionWhereInput! = {}
    orderBy: [ConditionCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ConditionCollection!]
  conditionCollectionCount(where: ConditionCollectionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ConditionWhereUniqueInput {
  id: ID
}

input ConditionWhereInput {
  AND: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
  id: IDFilter
  title: StringFilter
  formField: FieldWhereInput
  compare: StringFilter
  option: FieldOptionManyRelationFilter
  conditionCollection: ConditionCollectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ConditionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  compare: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConditionUpdateInput {
  title: String
  formField: FieldRelateToOneForUpdateInput
  compare: String
  option: FieldOptionRelateToManyForUpdateInput
  conditionCollection: ConditionCollectionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ConditionUpdateArgs {
  where: ConditionWhereUniqueInput!
  data: ConditionUpdateInput!
}

input ConditionCreateInput {
  title: String
  formField: FieldRelateToOneForCreateInput
  compare: String
  option: FieldOptionRelateToManyForCreateInput
  conditionCollection: ConditionCollectionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ConditionCollection {
  id: ID!
  type: String
  order: Int
  condition(
    where: ConditionWhereInput! = {}
    orderBy: [ConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Condition!]
  conditionCount(where: ConditionWhereInput! = {}): Int
  answer: FormAnswer
  next: Field
  goOut: String
  form: Form
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ConditionCollectionWhereUniqueInput {
  id: ID
}

input ConditionCollectionWhereInput {
  AND: [ConditionCollectionWhereInput!]
  OR: [ConditionCollectionWhereInput!]
  NOT: [ConditionCollectionWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  order: IntFilter
  condition: ConditionManyRelationFilter
  answer: FormAnswerWhereInput
  next: FieldWhereInput
  goOut: StringFilter
  form: FormWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ConditionCollectionOrderByInput {
  id: OrderDirection
  type: OrderDirection
  order: OrderDirection
  goOut: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConditionCollectionUpdateInput {
  type: String
  order: Int
  condition: ConditionRelateToManyForUpdateInput
  answer: FormAnswerRelateToOneForUpdateInput
  next: FieldRelateToOneForUpdateInput
  goOut: String
  form: FormRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormAnswerRelateToOneForUpdateInput {
  create: FormAnswerCreateInput
  connect: FormAnswerWhereUniqueInput
  disconnect: Boolean
}

input ConditionCollectionUpdateArgs {
  where: ConditionCollectionWhereUniqueInput!
  data: ConditionCollectionUpdateInput!
}

input ConditionCollectionCreateInput {
  type: String
  order: Int
  condition: ConditionRelateToManyForCreateInput
  answer: FormAnswerRelateToOneForCreateInput
  next: FieldRelateToOneForCreateInput
  goOut: String
  form: FormRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FormAnswerRelateToOneForCreateInput {
  create: FormAnswerCreateInput
  connect: FormAnswerWhereUniqueInput
}

type Question {
  id: ID!
  title: String
  status: String
  publishTime: DateTime
  heroImage: Photo
  author: String
  content: JSON
  boost: Boolean
  subject: Tag
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  form(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input QuestionWhereUniqueInput {
  id: ID
  title: String
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishTime: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  author: StringFilter
  boost: BooleanFilter
  subject: TagWhereInput
  tags: TagManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QuestionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishTime: OrderDirection
  author: OrderDirection
  boost: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QuestionUpdateInput {
  title: String
  status: String
  publishTime: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  author: String
  content: JSON
  boost: Boolean
  subject: TagRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  title: String
  status: String
  publishTime: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  author: String
  content: JSON
  boost: Boolean
  subject: TagRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type EmbedCode {
  id: ID!
  name: String
  form: Form
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EmbedCodeWhereUniqueInput {
  id: ID
}

input EmbedCodeWhereInput {
  AND: [EmbedCodeWhereInput!]
  OR: [EmbedCodeWhereInput!]
  NOT: [EmbedCodeWhereInput!]
  id: IDFilter
  name: StringFilter
  form: FormWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EmbedCodeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EmbedCodeUpdateInput {
  name: String
  form: FormRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EmbedCodeUpdateArgs {
  where: EmbedCodeWhereUniqueInput!
  data: EmbedCodeUpdateInput!
}

input EmbedCodeCreateInput {
  name: String
  form: FormRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type InlineIndex {
  id: ID!
  name: String
  index(
    where: IndexItemWhereInput! = {}
    orderBy: [IndexItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [IndexItem!]
  indexCount(where: IndexItemWhereInput! = {}): Int
  embedCode: String
  style: String
  previewButton: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input InlineIndexWhereUniqueInput {
  id: ID
}

input InlineIndexWhereInput {
  AND: [InlineIndexWhereInput!]
  OR: [InlineIndexWhereInput!]
  NOT: [InlineIndexWhereInput!]
  id: IDFilter
  name: StringFilter
  index: IndexItemManyRelationFilter
  style: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IndexItemManyRelationFilter {
  every: IndexItemWhereInput
  some: IndexItemWhereInput
  none: IndexItemWhereInput
}

input InlineIndexOrderByInput {
  id: OrderDirection
  name: OrderDirection
  style: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InlineIndexUpdateInput {
  name: String
  index: IndexItemRelateToManyForUpdateInput
  style: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input IndexItemRelateToManyForUpdateInput {
  disconnect: [IndexItemWhereUniqueInput!]
  set: [IndexItemWhereUniqueInput!]
  create: [IndexItemCreateInput!]
  connect: [IndexItemWhereUniqueInput!]
}

input InlineIndexUpdateArgs {
  where: InlineIndexWhereUniqueInput!
  data: InlineIndexUpdateInput!
}

input InlineIndexCreateInput {
  name: String
  index: IndexItemRelateToManyForCreateInput
  style: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input IndexItemRelateToManyForCreateInput {
  create: [IndexItemCreateInput!]
  connect: [IndexItemWhereUniqueInput!]
}

type IndexItem {
  id: ID!
  name: String
  slug: String
  order: Int
  imageFile: ImageFieldOutput
  color: String
  index(
    where: InlineIndexWhereInput! = {}
    orderBy: [InlineIndexOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InlineIndex!]
  indexCount(where: InlineIndexWhereInput! = {}): Int
  originCode: String
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input IndexItemWhereUniqueInput {
  id: ID
}

input IndexItemWhereInput {
  AND: [IndexItemWhereInput!]
  OR: [IndexItemWhereInput!]
  NOT: [IndexItemWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  order: IntFilter
  color: StringFilter
  index: InlineIndexManyRelationFilter
  originCode: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input InlineIndexManyRelationFilter {
  every: InlineIndexWhereInput
  some: InlineIndexWhereInput
  none: InlineIndexWhereInput
}

input IndexItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  order: OrderDirection
  color: OrderDirection
  originCode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input IndexItemUpdateInput {
  name: String
  slug: String
  order: Int
  imageFile: ImageFieldInput
  color: String
  index: InlineIndexRelateToManyForUpdateInput
  originCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input InlineIndexRelateToManyForUpdateInput {
  disconnect: [InlineIndexWhereUniqueInput!]
  set: [InlineIndexWhereUniqueInput!]
  create: [InlineIndexCreateInput!]
  connect: [InlineIndexWhereUniqueInput!]
}

input IndexItemUpdateArgs {
  where: IndexItemWhereUniqueInput!
  data: IndexItemUpdateInput!
}

input IndexItemCreateInput {
  name: String
  slug: String
  order: Int
  imageFile: ImageFieldInput
  color: String
  index: InlineIndexRelateToManyForCreateInput
  originCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input InlineIndexRelateToManyForCreateInput {
  create: [InlineIndexCreateInput!]
  connect: [InlineIndexWhereUniqueInput!]
}

type Karaoke {
  id: ID!
  name: String
  quote: String
  audio: FileFieldOutput
  imageFile: ImageFieldOutput
  muteHint: Boolean
  embedCode: String
  previewButton: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input KaraokeWhereUniqueInput {
  id: ID
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input KaraokeWhereInput {
  AND: [KaraokeWhereInput!]
  OR: [KaraokeWhereInput!]
  NOT: [KaraokeWhereInput!]
  id: IDFilter
  name: StringFilter
  quote: StringFilter
  muteHint: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input KaraokeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  quote: OrderDirection
  muteHint: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input KaraokeUpdateInput {
  name: String
  quote: String
  audio: FileFieldInput
  imageFile: ImageFieldInput
  muteHint: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input KaraokeUpdateArgs {
  where: KaraokeWhereUniqueInput!
  data: KaraokeUpdateInput!
}

input KaraokeCreateInput {
  name: String
  quote: String
  audio: FileFieldInput
  imageFile: ImageFieldInput
  muteHint: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createLiveblogItem(data: LiveblogItemCreateInput!): LiveblogItem
  createLiveblogItems(data: [LiveblogItemCreateInput!]!): [LiveblogItem]
  updateLiveblogItem(
    where: LiveblogItemWhereUniqueInput!
    data: LiveblogItemUpdateInput!
  ): LiveblogItem
  updateLiveblogItems(data: [LiveblogItemUpdateArgs!]!): [LiveblogItem]
  deleteLiveblogItem(where: LiveblogItemWhereUniqueInput!): LiveblogItem
  deleteLiveblogItems(where: [LiveblogItemWhereUniqueInput!]!): [LiveblogItem]
  createLiveblog(data: LiveblogCreateInput!): Liveblog
  createLiveblogs(data: [LiveblogCreateInput!]!): [Liveblog]
  updateLiveblog(
    where: LiveblogWhereUniqueInput!
    data: LiveblogUpdateInput!
  ): Liveblog
  updateLiveblogs(data: [LiveblogUpdateArgs!]!): [Liveblog]
  deleteLiveblog(where: LiveblogWhereUniqueInput!): Liveblog
  deleteLiveblogs(where: [LiveblogWhereUniqueInput!]!): [Liveblog]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(
    where: PublisherWhereUniqueInput!
    data: PublisherUpdateInput!
  ): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(
    where: AudioFileWhereUniqueInput!
    data: AudioFileUpdateInput!
  ): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createForm(data: FormCreateInput!): Form
  createForms(data: [FormCreateInput!]!): [Form]
  updateForm(where: FormWhereUniqueInput!, data: FormUpdateInput!): Form
  updateForms(data: [FormUpdateArgs!]!): [Form]
  deleteForm(where: FormWhereUniqueInput!): Form
  deleteForms(where: [FormWhereUniqueInput!]!): [Form]
  createField(data: FieldCreateInput!): Field
  createFields(data: [FieldCreateInput!]!): [Field]
  updateField(where: FieldWhereUniqueInput!, data: FieldUpdateInput!): Field
  updateFields(data: [FieldUpdateArgs!]!): [Field]
  deleteField(where: FieldWhereUniqueInput!): Field
  deleteFields(where: [FieldWhereUniqueInput!]!): [Field]
  createFieldOption(data: FieldOptionCreateInput!): FieldOption
  createFieldOptions(data: [FieldOptionCreateInput!]!): [FieldOption]
  updateFieldOption(
    where: FieldOptionWhereUniqueInput!
    data: FieldOptionUpdateInput!
  ): FieldOption
  updateFieldOptions(data: [FieldOptionUpdateArgs!]!): [FieldOption]
  deleteFieldOption(where: FieldOptionWhereUniqueInput!): FieldOption
  deleteFieldOptions(where: [FieldOptionWhereUniqueInput!]!): [FieldOption]
  createFormAnswer(data: FormAnswerCreateInput!): FormAnswer
  createFormAnswers(data: [FormAnswerCreateInput!]!): [FormAnswer]
  updateFormAnswer(
    where: FormAnswerWhereUniqueInput!
    data: FormAnswerUpdateInput!
  ): FormAnswer
  updateFormAnswers(data: [FormAnswerUpdateArgs!]!): [FormAnswer]
  deleteFormAnswer(where: FormAnswerWhereUniqueInput!): FormAnswer
  deleteFormAnswers(where: [FormAnswerWhereUniqueInput!]!): [FormAnswer]
  createFormResult(data: FormResultCreateInput!): FormResult
  createFormResults(data: [FormResultCreateInput!]!): [FormResult]
  updateFormResult(
    where: FormResultWhereUniqueInput!
    data: FormResultUpdateInput!
  ): FormResult
  updateFormResults(data: [FormResultUpdateArgs!]!): [FormResult]
  deleteFormResult(where: FormResultWhereUniqueInput!): FormResult
  deleteFormResults(where: [FormResultWhereUniqueInput!]!): [FormResult]
  createCondition(data: ConditionCreateInput!): Condition
  createConditions(data: [ConditionCreateInput!]!): [Condition]
  updateCondition(
    where: ConditionWhereUniqueInput!
    data: ConditionUpdateInput!
  ): Condition
  updateConditions(data: [ConditionUpdateArgs!]!): [Condition]
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteConditions(where: [ConditionWhereUniqueInput!]!): [Condition]
  createConditionCollection(
    data: ConditionCollectionCreateInput!
  ): ConditionCollection
  createConditionCollections(
    data: [ConditionCollectionCreateInput!]!
  ): [ConditionCollection]
  updateConditionCollection(
    where: ConditionCollectionWhereUniqueInput!
    data: ConditionCollectionUpdateInput!
  ): ConditionCollection
  updateConditionCollections(
    data: [ConditionCollectionUpdateArgs!]!
  ): [ConditionCollection]
  deleteConditionCollection(
    where: ConditionCollectionWhereUniqueInput!
  ): ConditionCollection
  deleteConditionCollections(
    where: [ConditionCollectionWhereUniqueInput!]!
  ): [ConditionCollection]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(
    where: QuestionWhereUniqueInput!
    data: QuestionUpdateInput!
  ): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createEmbedCode(data: EmbedCodeCreateInput!): EmbedCode
  createEmbedCodes(data: [EmbedCodeCreateInput!]!): [EmbedCode]
  updateEmbedCode(
    where: EmbedCodeWhereUniqueInput!
    data: EmbedCodeUpdateInput!
  ): EmbedCode
  updateEmbedCodes(data: [EmbedCodeUpdateArgs!]!): [EmbedCode]
  deleteEmbedCode(where: EmbedCodeWhereUniqueInput!): EmbedCode
  deleteEmbedCodes(where: [EmbedCodeWhereUniqueInput!]!): [EmbedCode]
  createInlineIndex(data: InlineIndexCreateInput!): InlineIndex
  createInlineIndices(data: [InlineIndexCreateInput!]!): [InlineIndex]
  updateInlineIndex(
    where: InlineIndexWhereUniqueInput!
    data: InlineIndexUpdateInput!
  ): InlineIndex
  updateInlineIndices(data: [InlineIndexUpdateArgs!]!): [InlineIndex]
  deleteInlineIndex(where: InlineIndexWhereUniqueInput!): InlineIndex
  deleteInlineIndices(where: [InlineIndexWhereUniqueInput!]!): [InlineIndex]
  createIndexItem(data: IndexItemCreateInput!): IndexItem
  createIndexItems(data: [IndexItemCreateInput!]!): [IndexItem]
  updateIndexItem(
    where: IndexItemWhereUniqueInput!
    data: IndexItemUpdateInput!
  ): IndexItem
  updateIndexItems(data: [IndexItemUpdateArgs!]!): [IndexItem]
  deleteIndexItem(where: IndexItemWhereUniqueInput!): IndexItem
  deleteIndexItems(where: [IndexItemWhereUniqueInput!]!): [IndexItem]
  createKaraoke(data: KaraokeCreateInput!): Karaoke
  createKaraokes(data: [KaraokeCreateInput!]!): [Karaoke]
  updateKaraoke(
    where: KaraokeWhereUniqueInput!
    data: KaraokeUpdateInput!
  ): Karaoke
  updateKaraokes(data: [KaraokeUpdateArgs!]!): [Karaoke]
  deleteKaraoke(where: KaraokeWhereUniqueInput!): Karaoke
  deleteKaraokes(where: [KaraokeWhereUniqueInput!]!): [Karaoke]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  liveblogItems(
    where: LiveblogItemWhereInput! = {}
    orderBy: [LiveblogItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [LiveblogItem!]
  liveblogItem(where: LiveblogItemWhereUniqueInput!): LiveblogItem
  liveblogItemsCount(where: LiveblogItemWhereInput! = {}): Int
  liveblogs(
    where: LiveblogWhereInput! = {}
    orderBy: [LiveblogOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Liveblog!]
  liveblog(where: LiveblogWhereUniqueInput!): Liveblog
  liveblogsCount(where: LiveblogWhereInput! = {}): Int
  publishers(
    where: PublisherWhereInput! = {}
    orderBy: [PublisherOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  audioFiles(
    where: AudioFileWhereInput! = {}
    orderBy: [AudioFileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  videos(
    where: VideoWhereInput! = {}
    orderBy: [VideoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  photos(
    where: PhotoWhereInput! = {}
    orderBy: [PhotoOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  forms(
    where: FormWhereInput! = {}
    orderBy: [FormOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Form!]
  form(where: FormWhereUniqueInput!): Form
  formsCount(where: FormWhereInput! = {}): Int
  fields(
    where: FieldWhereInput! = {}
    orderBy: [FieldOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Field!]
  field(where: FieldWhereUniqueInput!): Field
  fieldsCount(where: FieldWhereInput! = {}): Int
  fieldOptions(
    where: FieldOptionWhereInput! = {}
    orderBy: [FieldOptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FieldOption!]
  fieldOption(where: FieldOptionWhereUniqueInput!): FieldOption
  fieldOptionsCount(where: FieldOptionWhereInput! = {}): Int
  formAnswers(
    where: FormAnswerWhereInput! = {}
    orderBy: [FormAnswerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormAnswer!]
  formAnswer(where: FormAnswerWhereUniqueInput!): FormAnswer
  formAnswersCount(where: FormAnswerWhereInput! = {}): Int
  formResults(
    where: FormResultWhereInput! = {}
    orderBy: [FormResultOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [FormResult!]
  formResult(where: FormResultWhereUniqueInput!): FormResult
  formResultsCount(where: FormResultWhereInput! = {}): Int
  conditions(
    where: ConditionWhereInput! = {}
    orderBy: [ConditionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Condition!]
  condition(where: ConditionWhereUniqueInput!): Condition
  conditionsCount(where: ConditionWhereInput! = {}): Int
  conditionCollections(
    where: ConditionCollectionWhereInput! = {}
    orderBy: [ConditionCollectionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ConditionCollection!]
  conditionCollection(
    where: ConditionCollectionWhereUniqueInput!
  ): ConditionCollection
  conditionCollectionsCount(where: ConditionCollectionWhereInput! = {}): Int
  questions(
    where: QuestionWhereInput! = {}
    orderBy: [QuestionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Question!]
  question(where: QuestionWhereUniqueInput!): Question
  questionsCount(where: QuestionWhereInput! = {}): Int
  embedCodes(
    where: EmbedCodeWhereInput! = {}
    orderBy: [EmbedCodeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [EmbedCode!]
  embedCode(where: EmbedCodeWhereUniqueInput!): EmbedCode
  embedCodesCount(where: EmbedCodeWhereInput! = {}): Int
  inlineIndices(
    where: InlineIndexWhereInput! = {}
    orderBy: [InlineIndexOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [InlineIndex!]
  inlineIndex(where: InlineIndexWhereUniqueInput!): InlineIndex
  inlineIndicesCount(where: InlineIndexWhereInput! = {}): Int
  indexItems(
    where: IndexItemWhereInput! = {}
    orderBy: [IndexItemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [IndexItem!]
  indexItem(where: IndexItemWhereUniqueInput!): IndexItem
  indexItemsCount(where: IndexItemWhereInput! = {}): Int
  karaokes(
    where: KaraokeWhereInput! = {}
    orderBy: [KaraokeOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Karaoke!]
  karaoke(where: KaraokeWhereUniqueInput!): Karaoke
  karaokesCount(where: KaraokeWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
