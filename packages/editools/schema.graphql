# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type LiveblogItem {
  id: ID!
  title: String
  status: String
  publishTime: DateTime
  displayDateString: String
  heroImage: Photo
  heroVideo: Video
  imageCaption: String
  type: String
  author: String
  name: JSON
  boost: Boolean
  external: String
  externalCoverPhoto: String
  liveblog: Liveblog
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input LiveblogItemWhereUniqueInput {
  id: ID
}

input LiveblogItemWhereInput {
  AND: [LiveblogItemWhereInput!]
  OR: [LiveblogItemWhereInput!]
  NOT: [LiveblogItemWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishTime: DateTimeNullableFilter
  displayDateString: StringNullableFilter
  heroImage: PhotoWhereInput
  heroVideo: VideoWhereInput
  imageCaption: StringFilter
  type: StringNullableFilter
  author: StringFilter
  boost: BooleanFilter
  external: StringFilter
  liveblog: LiveblogWhereInput
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input LiveblogItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishTime: OrderDirection
  displayDateString: OrderDirection
  imageCaption: OrderDirection
  type: OrderDirection
  author: OrderDirection
  boost: OrderDirection
  external: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LiveblogItemUpdateInput {
  title: String
  status: String
  publishTime: DateTime
  displayDateString: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroVideo: VideoRelateToOneForUpdateInput
  imageCaption: String
  type: String
  author: String
  name: JSON
  boost: Boolean
  external: String
  liveblog: LiveblogRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input VideoRelateToOneForUpdateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
}

input LiveblogRelateToOneForUpdateInput {
  create: LiveblogCreateInput
  connect: LiveblogWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input LiveblogItemUpdateArgs {
  where: LiveblogItemWhereUniqueInput!
  data: LiveblogItemUpdateInput!
}

input LiveblogItemCreateInput {
  title: String
  status: String
  publishTime: DateTime
  displayDateString: String
  heroImage: PhotoRelateToOneForCreateInput
  heroVideo: VideoRelateToOneForCreateInput
  imageCaption: String
  type: String
  author: String
  name: JSON
  boost: Boolean
  external: String
  liveblog: LiveblogRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input VideoRelateToOneForCreateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

input LiveblogRelateToOneForCreateInput {
  create: LiveblogCreateInput
  connect: LiveblogWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Liveblog {
  id: ID!
  name: String
  slug: String
  desc: String
  hint: JSON
  sort: String
  displayType: String
  maxMeasures: String
  defaultMeasures: String
  heroImage: Photo
  heroVideo: Video
  active: Boolean
  archive: Boolean
  credit: String
  css: String
  liveblog_items(where: LiveblogItemWhereInput! = {}, orderBy: [LiveblogItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LiveblogItemWhereUniqueInput): [LiveblogItem!]
  liveblog_itemsCount(where: LiveblogItemWhereInput! = {}): Int
  tags: Tag
  publisher: Publisher
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input LiveblogWhereUniqueInput {
  id: ID
  slug: String
}

input LiveblogWhereInput {
  AND: [LiveblogWhereInput!]
  OR: [LiveblogWhereInput!]
  NOT: [LiveblogWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  desc: StringFilter
  sort: StringNullableFilter
  displayType: StringNullableFilter
  maxMeasures: StringNullableFilter
  defaultMeasures: StringNullableFilter
  heroImage: PhotoWhereInput
  heroVideo: VideoWhereInput
  active: BooleanFilter
  archive: BooleanFilter
  credit: StringFilter
  css: StringFilter
  liveblog_items: LiveblogItemManyRelationFilter
  tags: TagWhereInput
  publisher: PublisherWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LiveblogItemManyRelationFilter {
  every: LiveblogItemWhereInput
  some: LiveblogItemWhereInput
  none: LiveblogItemWhereInput
}

input LiveblogOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  desc: OrderDirection
  sort: OrderDirection
  displayType: OrderDirection
  maxMeasures: OrderDirection
  defaultMeasures: OrderDirection
  active: OrderDirection
  archive: OrderDirection
  credit: OrderDirection
  css: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LiveblogUpdateInput {
  name: String
  slug: String
  desc: String
  hint: JSON
  sort: String
  displayType: String
  maxMeasures: String
  defaultMeasures: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroVideo: VideoRelateToOneForUpdateInput
  active: Boolean
  archive: Boolean
  credit: String
  css: String
  liveblog_items: LiveblogItemRelateToManyForUpdateInput
  tags: TagRelateToOneForUpdateInput
  publisher: PublisherRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LiveblogItemRelateToManyForUpdateInput {
  disconnect: [LiveblogItemWhereUniqueInput!]
  set: [LiveblogItemWhereUniqueInput!]
  create: [LiveblogItemCreateInput!]
  connect: [LiveblogItemWhereUniqueInput!]
}

input TagRelateToOneForUpdateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
  disconnect: Boolean
}

input PublisherRelateToOneForUpdateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
  disconnect: Boolean
}

input LiveblogUpdateArgs {
  where: LiveblogWhereUniqueInput!
  data: LiveblogUpdateInput!
}

input LiveblogCreateInput {
  name: String
  slug: String
  desc: String
  hint: JSON
  sort: String
  displayType: String
  maxMeasures: String
  defaultMeasures: String
  heroImage: PhotoRelateToOneForCreateInput
  heroVideo: VideoRelateToOneForCreateInput
  active: Boolean
  archive: Boolean
  credit: String
  css: String
  liveblog_items: LiveblogItemRelateToManyForCreateInput
  tags: TagRelateToOneForCreateInput
  publisher: PublisherRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input LiveblogItemRelateToManyForCreateInput {
  create: [LiveblogItemCreateInput!]
  connect: [LiveblogItemWhereUniqueInput!]
}

input TagRelateToOneForCreateInput {
  create: TagCreateInput
  connect: TagWhereUniqueInput
}

input PublisherRelateToOneForCreateInput {
  create: PublisherCreateInput
  connect: PublisherWhereUniqueInput
}

type Publisher {
  id: ID!
  name: String
  slug: String
  intro: String
  is_active: Boolean
  template: String
  liveblog(where: LiveblogWhereInput! = {}, orderBy: [LiveblogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LiveblogWhereUniqueInput): [Liveblog!]
  liveblogCount(where: LiveblogWhereInput! = {}): Int
  form(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PublisherWhereUniqueInput {
  id: ID
}

input PublisherWhereInput {
  AND: [PublisherWhereInput!]
  OR: [PublisherWhereInput!]
  NOT: [PublisherWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  intro: StringFilter
  is_active: BooleanFilter
  template: StringFilter
  liveblog: LiveblogManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input LiveblogManyRelationFilter {
  every: LiveblogWhereInput
  some: LiveblogWhereInput
  none: LiveblogWhereInput
}

input FormManyRelationFilter {
  every: FormWhereInput
  some: FormWhereInput
  none: FormWhereInput
}

input PublisherOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  intro: OrderDirection
  is_active: OrderDirection
  template: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PublisherUpdateInput {
  name: String
  slug: String
  intro: String
  is_active: Boolean
  template: String
  liveblog: LiveblogRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input LiveblogRelateToManyForUpdateInput {
  disconnect: [LiveblogWhereUniqueInput!]
  set: [LiveblogWhereUniqueInput!]
  create: [LiveblogCreateInput!]
  connect: [LiveblogWhereUniqueInput!]
}

input FormRelateToManyForUpdateInput {
  disconnect: [FormWhereUniqueInput!]
  set: [FormWhereUniqueInput!]
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

input PublisherUpdateArgs {
  where: PublisherWhereUniqueInput!
  data: PublisherUpdateInput!
}

input PublisherCreateInput {
  name: String
  slug: String
  intro: String
  is_active: Boolean
  template: String
  liveblog: LiveblogRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input LiveblogRelateToManyForCreateInput {
  create: [LiveblogCreateInput!]
  connect: [LiveblogWhereUniqueInput!]
}

input FormRelateToManyForCreateInput {
  create: [FormCreateInput!]
  connect: [FormWhereUniqueInput!]
}

type AudioFile {
  id: ID!
  name: String
  file: FileFieldOutput
  coverPhoto: Photo
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input AudioFileWhereUniqueInput {
  id: ID
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
  coverPhoto: PhotoWhereInput
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AudioFileUpdateInput {
  name: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: FileFieldOutput
  coverPhoto: Photo
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  url: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  url: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  resizedWebp: ResizedWebPImages
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type ResizedWebPImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Tag {
  id: ID!
  name: String
  liveblog(where: LiveblogWhereInput! = {}, orderBy: [LiveblogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LiveblogWhereUniqueInput): [Liveblog!]
  liveblogCount(where: LiveblogWhereInput! = {}): Int
  liveblog_items(where: LiveblogItemWhereInput! = {}, orderBy: [LiveblogItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LiveblogItemWhereUniqueInput): [LiveblogItem!]
  liveblog_itemsCount(where: LiveblogItemWhereInput! = {}): Int
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  questionSection(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionSectionCount(where: QuestionWhereInput! = {}): Int
  form(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  liveblog: LiveblogManyRelationFilter
  liveblog_items: LiveblogItemManyRelationFilter
  questions: QuestionManyRelationFilter
  questionSection: QuestionManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QuestionManyRelationFilter {
  every: QuestionWhereInput
  some: QuestionWhereInput
  none: QuestionWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  liveblog: LiveblogRelateToManyForUpdateInput
  liveblog_items: LiveblogItemRelateToManyForUpdateInput
  questions: QuestionRelateToManyForUpdateInput
  questionSection: QuestionRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input QuestionRelateToManyForUpdateInput {
  disconnect: [QuestionWhereUniqueInput!]
  set: [QuestionWhereUniqueInput!]
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  liveblog: LiveblogRelateToManyForCreateInput
  liveblog_items: LiveblogItemRelateToManyForCreateInput
  questions: QuestionRelateToManyForCreateInput
  questionSection: QuestionRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input QuestionRelateToManyForCreateInput {
  create: [QuestionCreateInput!]
  connect: [QuestionWhereUniqueInput!]
}

type Form {
  id: ID!
  name: String
  slug: String
  type: FormTypeType
  content: JSON
  heroImage: Photo
  mobileImage: Photo
  heroImageLink: String
  mobileImageLink: String
  heroVideo: Video
  heroVideoLink: String
  active: Boolean
  fields(where: FieldWhereInput! = {}, orderBy: [FieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldWhereUniqueInput): [Field!]
  fieldsCount(where: FieldWhereInput! = {}): Int
  answers(where: FormAnswerWhereInput! = {}, orderBy: [FormAnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormAnswerWhereUniqueInput): [FormAnswer!]
  answersCount(where: FormAnswerWhereInput! = {}): Int
  updateTimeDesc: String
  updateTime: DateTime
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  questionsCount(where: QuestionWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  conditions(where: ConditionCollectionWhereInput! = {}, orderBy: [ConditionCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionCollectionWhereUniqueInput): [ConditionCollection!]
  conditionsCount(where: ConditionCollectionWhereInput! = {}): Int
  publisher: Publisher
  result(where: FormResultWhereInput! = {}, orderBy: [FormResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResultWhereUniqueInput): [FormResult!]
  resultCount(where: FormResultWhereInput! = {}): Int
  feedback: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum FormTypeType {
  qa
  form
  questionniare
  quiz
}

input FormWhereUniqueInput {
  id: ID
  slug: String
}

input FormWhereInput {
  AND: [FormWhereInput!]
  OR: [FormWhereInput!]
  NOT: [FormWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  type: FormTypeTypeNullableFilter
  heroImage: PhotoWhereInput
  mobileImage: PhotoWhereInput
  heroImageLink: StringFilter
  mobileImageLink: StringFilter
  heroVideo: VideoWhereInput
  heroVideoLink: StringFilter
  active: BooleanFilter
  fields: FieldManyRelationFilter
  answers: FormAnswerManyRelationFilter
  updateTimeDesc: StringFilter
  updateTime: DateTimeNullableFilter
  questions: QuestionManyRelationFilter
  tags: TagManyRelationFilter
  conditions: ConditionCollectionManyRelationFilter
  publisher: PublisherWhereInput
  result: FormResultManyRelationFilter
  feedback: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FormTypeTypeNullableFilter {
  equals: FormTypeType
  in: [FormTypeType!]
  notIn: [FormTypeType!]
  not: FormTypeTypeNullableFilter
}

input FieldManyRelationFilter {
  every: FieldWhereInput
  some: FieldWhereInput
  none: FieldWhereInput
}

input FormAnswerManyRelationFilter {
  every: FormAnswerWhereInput
  some: FormAnswerWhereInput
  none: FormAnswerWhereInput
}

input ConditionCollectionManyRelationFilter {
  every: ConditionCollectionWhereInput
  some: ConditionCollectionWhereInput
  none: ConditionCollectionWhereInput
}

input FormResultManyRelationFilter {
  every: FormResultWhereInput
  some: FormResultWhereInput
  none: FormResultWhereInput
}

input FormOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  type: OrderDirection
  heroImageLink: OrderDirection
  mobileImageLink: OrderDirection
  heroVideoLink: OrderDirection
  active: OrderDirection
  updateTimeDesc: OrderDirection
  updateTime: OrderDirection
  feedback: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormUpdateInput {
  name: String
  slug: String
  type: FormTypeType
  content: JSON
  heroImage: PhotoRelateToOneForUpdateInput
  mobileImage: PhotoRelateToOneForUpdateInput
  heroImageLink: String
  mobileImageLink: String
  heroVideo: VideoRelateToOneForUpdateInput
  heroVideoLink: String
  active: Boolean
  fields: FieldRelateToManyForUpdateInput
  answers: FormAnswerRelateToManyForUpdateInput
  updateTimeDesc: String
  updateTime: DateTime
  questions: QuestionRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  conditions: ConditionCollectionRelateToManyForUpdateInput
  publisher: PublisherRelateToOneForUpdateInput
  result: FormResultRelateToManyForUpdateInput
  feedback: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FieldRelateToManyForUpdateInput {
  disconnect: [FieldWhereUniqueInput!]
  set: [FieldWhereUniqueInput!]
  create: [FieldCreateInput!]
  connect: [FieldWhereUniqueInput!]
}

input FormAnswerRelateToManyForUpdateInput {
  disconnect: [FormAnswerWhereUniqueInput!]
  set: [FormAnswerWhereUniqueInput!]
  create: [FormAnswerCreateInput!]
  connect: [FormAnswerWhereUniqueInput!]
}

input ConditionCollectionRelateToManyForUpdateInput {
  disconnect: [ConditionCollectionWhereUniqueInput!]
  set: [ConditionCollectionWhereUniqueInput!]
  create: [ConditionCollectionCreateInput!]
  connect: [ConditionCollectionWhereUniqueInput!]
}

input FormResultRelateToManyForUpdateInput {
  disconnect: [FormResultWhereUniqueInput!]
  set: [FormResultWhereUniqueInput!]
  create: [FormResultCreateInput!]
  connect: [FormResultWhereUniqueInput!]
}

input FormUpdateArgs {
  where: FormWhereUniqueInput!
  data: FormUpdateInput!
}

input FormCreateInput {
  name: String
  slug: String
  type: FormTypeType
  content: JSON
  heroImage: PhotoRelateToOneForCreateInput
  mobileImage: PhotoRelateToOneForCreateInput
  heroImageLink: String
  mobileImageLink: String
  heroVideo: VideoRelateToOneForCreateInput
  heroVideoLink: String
  active: Boolean
  fields: FieldRelateToManyForCreateInput
  answers: FormAnswerRelateToManyForCreateInput
  updateTimeDesc: String
  updateTime: DateTime
  questions: QuestionRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  conditions: ConditionCollectionRelateToManyForCreateInput
  publisher: PublisherRelateToOneForCreateInput
  result: FormResultRelateToManyForCreateInput
  feedback: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FieldRelateToManyForCreateInput {
  create: [FieldCreateInput!]
  connect: [FieldWhereUniqueInput!]
}

input FormAnswerRelateToManyForCreateInput {
  create: [FormAnswerCreateInput!]
  connect: [FormAnswerWhereUniqueInput!]
}

input ConditionCollectionRelateToManyForCreateInput {
  create: [ConditionCollectionCreateInput!]
  connect: [ConditionCollectionWhereUniqueInput!]
}

input FormResultRelateToManyForCreateInput {
  create: [FormResultCreateInput!]
  connect: [FormResultWhereUniqueInput!]
}

type Field {
  id: ID!
  name: String
  type: FieldTypeType
  status: String
  heroImage: Photo
  heroImageLink: String
  content: JSON
  sortOrder: Int
  form: Form
  options(where: FieldOptionWhereInput! = {}, orderBy: [FieldOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldOptionWhereUniqueInput): [FieldOption!]
  optionsCount(where: FieldOptionWhereInput! = {}): Int
  conditionCollection(where: ConditionCollectionWhereInput! = {}, orderBy: [ConditionCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionCollectionWhereUniqueInput): [ConditionCollection!]
  conditionCollectionCount(where: ConditionCollectionWhereInput! = {}): Int
  condition(where: ConditionWhereInput! = {}, orderBy: [ConditionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionWhereUniqueInput): [Condition!]
  conditionCount(where: ConditionWhereInput! = {}): Int
  apiData: JSON
  result(where: FormResultWhereInput! = {}, orderBy: [FormResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResultWhereUniqueInput): [FormResult!]
  resultCount(where: FormResultWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

enum FieldTypeType {
  single
  multiple
  text
  checkbox
}

input FieldWhereUniqueInput {
  id: ID
}

input FieldWhereInput {
  AND: [FieldWhereInput!]
  OR: [FieldWhereInput!]
  NOT: [FieldWhereInput!]
  id: IDFilter
  name: StringFilter
  type: FieldTypeTypeNullableFilter
  status: StringNullableFilter
  heroImage: PhotoWhereInput
  heroImageLink: StringFilter
  sortOrder: IntNullableFilter
  form: FormWhereInput
  options: FieldOptionManyRelationFilter
  conditionCollection: ConditionCollectionManyRelationFilter
  condition: ConditionManyRelationFilter
  result: FormResultManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FieldTypeTypeNullableFilter {
  equals: FieldTypeType
  in: [FieldTypeType!]
  notIn: [FieldTypeType!]
  not: FieldTypeTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input FieldOptionManyRelationFilter {
  every: FieldOptionWhereInput
  some: FieldOptionWhereInput
  none: FieldOptionWhereInput
}

input ConditionManyRelationFilter {
  every: ConditionWhereInput
  some: ConditionWhereInput
  none: ConditionWhereInput
}

input FieldOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  status: OrderDirection
  heroImageLink: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FieldUpdateInput {
  name: String
  type: FieldTypeType
  status: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroImageLink: String
  content: JSON
  sortOrder: Int
  form: FormRelateToOneForUpdateInput
  options: FieldOptionRelateToManyForUpdateInput
  conditionCollection: ConditionCollectionRelateToManyForUpdateInput
  condition: ConditionRelateToManyForUpdateInput
  apiData: JSON
  result: FormResultRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormRelateToOneForUpdateInput {
  create: FormCreateInput
  connect: FormWhereUniqueInput
  disconnect: Boolean
}

input FieldOptionRelateToManyForUpdateInput {
  disconnect: [FieldOptionWhereUniqueInput!]
  set: [FieldOptionWhereUniqueInput!]
  create: [FieldOptionCreateInput!]
  connect: [FieldOptionWhereUniqueInput!]
}

input ConditionRelateToManyForUpdateInput {
  disconnect: [ConditionWhereUniqueInput!]
  set: [ConditionWhereUniqueInput!]
  create: [ConditionCreateInput!]
  connect: [ConditionWhereUniqueInput!]
}

input FieldUpdateArgs {
  where: FieldWhereUniqueInput!
  data: FieldUpdateInput!
}

input FieldCreateInput {
  name: String
  type: FieldTypeType
  status: String
  heroImage: PhotoRelateToOneForCreateInput
  heroImageLink: String
  content: JSON
  sortOrder: Int
  form: FormRelateToOneForCreateInput
  options: FieldOptionRelateToManyForCreateInput
  conditionCollection: ConditionCollectionRelateToManyForCreateInput
  condition: ConditionRelateToManyForCreateInput
  apiData: JSON
  result: FormResultRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FormRelateToOneForCreateInput {
  create: FormCreateInput
  connect: FormWhereUniqueInput
}

input FieldOptionRelateToManyForCreateInput {
  create: [FieldOptionCreateInput!]
  connect: [FieldOptionWhereUniqueInput!]
}

input ConditionRelateToManyForCreateInput {
  create: [ConditionCreateInput!]
  connect: [ConditionWhereUniqueInput!]
}

type FieldOption {
  id: ID!
  name: String
  heroImage: Photo
  heroImageLink: String
  content: String
  value: String
  sortOrder: Int
  field: Field
  condition(where: ConditionWhereInput! = {}, orderBy: [ConditionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionWhereUniqueInput): [Condition!]
  conditionCount(where: ConditionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FieldOptionWhereUniqueInput {
  id: ID
}

input FieldOptionWhereInput {
  AND: [FieldOptionWhereInput!]
  OR: [FieldOptionWhereInput!]
  NOT: [FieldOptionWhereInput!]
  id: IDFilter
  name: StringFilter
  heroImage: PhotoWhereInput
  heroImageLink: StringFilter
  content: StringFilter
  value: StringFilter
  sortOrder: IntNullableFilter
  field: FieldWhereInput
  condition: ConditionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FieldOptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  heroImageLink: OrderDirection
  content: OrderDirection
  value: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FieldOptionUpdateInput {
  name: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroImageLink: String
  content: String
  value: String
  sortOrder: Int
  field: FieldRelateToOneForUpdateInput
  condition: ConditionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FieldRelateToOneForUpdateInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
  disconnect: Boolean
}

input FieldOptionUpdateArgs {
  where: FieldOptionWhereUniqueInput!
  data: FieldOptionUpdateInput!
}

input FieldOptionCreateInput {
  name: String
  heroImage: PhotoRelateToOneForCreateInput
  heroImageLink: String
  content: String
  value: String
  sortOrder: Int
  field: FieldRelateToOneForCreateInput
  condition: ConditionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FieldRelateToOneForCreateInput {
  create: FieldCreateInput
  connect: FieldWhereUniqueInput
}

type FormAnswer {
  id: ID!
  name: String
  heroImage: Photo
  heroImageLink: String
  mobileImage: Photo
  mobileHeroImageLink: String
  content: JSON
  form: Form
  conditionCollection(where: ConditionCollectionWhereInput! = {}, orderBy: [ConditionCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionCollectionWhereUniqueInput): [ConditionCollection!]
  conditionCollectionCount(where: ConditionCollectionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FormAnswerWhereUniqueInput {
  id: ID
}

input FormAnswerWhereInput {
  AND: [FormAnswerWhereInput!]
  OR: [FormAnswerWhereInput!]
  NOT: [FormAnswerWhereInput!]
  id: IDFilter
  name: StringFilter
  heroImage: PhotoWhereInput
  heroImageLink: StringFilter
  mobileImage: PhotoWhereInput
  mobileHeroImageLink: StringFilter
  form: FormWhereInput
  conditionCollection: ConditionCollectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FormAnswerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  heroImageLink: OrderDirection
  mobileHeroImageLink: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormAnswerUpdateInput {
  name: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroImageLink: String
  mobileImage: PhotoRelateToOneForUpdateInput
  mobileHeroImageLink: String
  content: JSON
  form: FormRelateToOneForUpdateInput
  conditionCollection: ConditionCollectionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormAnswerUpdateArgs {
  where: FormAnswerWhereUniqueInput!
  data: FormAnswerUpdateInput!
}

input FormAnswerCreateInput {
  name: String
  heroImage: PhotoRelateToOneForCreateInput
  heroImageLink: String
  mobileImage: PhotoRelateToOneForCreateInput
  mobileHeroImageLink: String
  content: JSON
  form: FormRelateToOneForCreateInput
  conditionCollection: ConditionCollectionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type FormResult {
  id: ID!
  name: String
  ip: String
  result: String
  responseTime: DateTime
  form: Form
  field: Field
  uri: String
  hidden: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FormResultWhereUniqueInput {
  id: ID
}

input FormResultWhereInput {
  AND: [FormResultWhereInput!]
  OR: [FormResultWhereInput!]
  NOT: [FormResultWhereInput!]
  id: IDFilter
  name: StringFilter
  ip: StringFilter
  result: StringFilter
  responseTime: DateTimeNullableFilter
  form: FormWhereInput
  field: FieldWhereInput
  uri: StringFilter
  hidden: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FormResultOrderByInput {
  id: OrderDirection
  name: OrderDirection
  ip: OrderDirection
  result: OrderDirection
  responseTime: OrderDirection
  uri: OrderDirection
  hidden: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FormResultUpdateInput {
  name: String
  ip: String
  result: String
  responseTime: DateTime
  form: FormRelateToOneForUpdateInput
  field: FieldRelateToOneForUpdateInput
  uri: String
  hidden: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormResultUpdateArgs {
  where: FormResultWhereUniqueInput!
  data: FormResultUpdateInput!
}

input FormResultCreateInput {
  name: String
  ip: String
  result: String
  responseTime: DateTime
  form: FormRelateToOneForCreateInput
  field: FieldRelateToOneForCreateInput
  uri: String
  hidden: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Condition {
  id: ID!
  title: String
  formField: Field
  compare: String
  option(where: FieldOptionWhereInput! = {}, orderBy: [FieldOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldOptionWhereUniqueInput): [FieldOption!]
  optionCount(where: FieldOptionWhereInput! = {}): Int
  conditionCollection(where: ConditionCollectionWhereInput! = {}, orderBy: [ConditionCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionCollectionWhereUniqueInput): [ConditionCollection!]
  conditionCollectionCount(where: ConditionCollectionWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ConditionWhereUniqueInput {
  id: ID
}

input ConditionWhereInput {
  AND: [ConditionWhereInput!]
  OR: [ConditionWhereInput!]
  NOT: [ConditionWhereInput!]
  id: IDFilter
  title: StringFilter
  formField: FieldWhereInput
  compare: StringFilter
  option: FieldOptionManyRelationFilter
  conditionCollection: ConditionCollectionManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ConditionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  compare: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConditionUpdateInput {
  title: String
  formField: FieldRelateToOneForUpdateInput
  compare: String
  option: FieldOptionRelateToManyForUpdateInput
  conditionCollection: ConditionCollectionRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ConditionUpdateArgs {
  where: ConditionWhereUniqueInput!
  data: ConditionUpdateInput!
}

input ConditionCreateInput {
  title: String
  formField: FieldRelateToOneForCreateInput
  compare: String
  option: FieldOptionRelateToManyForCreateInput
  conditionCollection: ConditionCollectionRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ConditionCollection {
  id: ID!
  type: String
  order: Int
  condition(where: ConditionWhereInput! = {}, orderBy: [ConditionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionWhereUniqueInput): [Condition!]
  conditionCount(where: ConditionWhereInput! = {}): Int
  answer: FormAnswer
  next: Field
  goOut: String
  form: Form
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ConditionCollectionWhereUniqueInput {
  id: ID
}

input ConditionCollectionWhereInput {
  AND: [ConditionCollectionWhereInput!]
  OR: [ConditionCollectionWhereInput!]
  NOT: [ConditionCollectionWhereInput!]
  id: IDFilter
  type: StringNullableFilter
  order: IntFilter
  condition: ConditionManyRelationFilter
  answer: FormAnswerWhereInput
  next: FieldWhereInput
  goOut: StringFilter
  form: FormWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input ConditionCollectionOrderByInput {
  id: OrderDirection
  type: OrderDirection
  order: OrderDirection
  goOut: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ConditionCollectionUpdateInput {
  type: String
  order: Int
  condition: ConditionRelateToManyForUpdateInput
  answer: FormAnswerRelateToOneForUpdateInput
  next: FieldRelateToOneForUpdateInput
  goOut: String
  form: FormRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FormAnswerRelateToOneForUpdateInput {
  create: FormAnswerCreateInput
  connect: FormAnswerWhereUniqueInput
  disconnect: Boolean
}

input ConditionCollectionUpdateArgs {
  where: ConditionCollectionWhereUniqueInput!
  data: ConditionCollectionUpdateInput!
}

input ConditionCollectionCreateInput {
  type: String
  order: Int
  condition: ConditionRelateToManyForCreateInput
  answer: FormAnswerRelateToOneForCreateInput
  next: FieldRelateToOneForCreateInput
  goOut: String
  form: FormRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input FormAnswerRelateToOneForCreateInput {
  create: FormAnswerCreateInput
  connect: FormAnswerWhereUniqueInput
}

type Question {
  id: ID!
  title: String
  status: String
  publishTime: DateTime
  heroImage: Photo
  imageLink: String
  author: String
  content: JSON
  boost: Boolean
  subject: Tag
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  form(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  formCount(where: FormWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input QuestionWhereUniqueInput {
  id: ID
  title: String
}

input QuestionWhereInput {
  AND: [QuestionWhereInput!]
  OR: [QuestionWhereInput!]
  NOT: [QuestionWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishTime: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  imageLink: StringFilter
  author: StringFilter
  boost: BooleanFilter
  subject: TagWhereInput
  tags: TagManyRelationFilter
  form: FormManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QuestionOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishTime: OrderDirection
  imageLink: OrderDirection
  author: OrderDirection
  boost: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QuestionUpdateInput {
  title: String
  status: String
  publishTime: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  imageLink: String
  author: String
  content: JSON
  boost: Boolean
  subject: TagRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  form: FormRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input QuestionUpdateArgs {
  where: QuestionWhereUniqueInput!
  data: QuestionUpdateInput!
}

input QuestionCreateInput {
  title: String
  status: String
  publishTime: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  imageLink: String
  author: String
  content: JSON
  boost: Boolean
  subject: TagRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  form: FormRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type EmbedCode {
  id: ID!
  name: String
  form: Form
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EmbedCodeWhereUniqueInput {
  id: ID
}

input EmbedCodeWhereInput {
  AND: [EmbedCodeWhereInput!]
  OR: [EmbedCodeWhereInput!]
  NOT: [EmbedCodeWhereInput!]
  id: IDFilter
  name: StringFilter
  form: FormWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input EmbedCodeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EmbedCodeUpdateInput {
  name: String
  form: FormRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EmbedCodeUpdateArgs {
  where: EmbedCodeWhereUniqueInput!
  data: EmbedCodeUpdateInput!
}

input EmbedCodeCreateInput {
  name: String
  form: FormRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type InlineIndex {
  id: ID!
  name: String
  style: String
  themeColor: String
  index(where: IndexItemWhereInput! = {}, orderBy: [IndexItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IndexItemWhereUniqueInput): [IndexItem!]
  indexCount(where: IndexItemWhereInput! = {}): Int
  embedCode: String
  previewButton: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input InlineIndexWhereUniqueInput {
  id: ID
}

input InlineIndexWhereInput {
  AND: [InlineIndexWhereInput!]
  OR: [InlineIndexWhereInput!]
  NOT: [InlineIndexWhereInput!]
  id: IDFilter
  name: StringFilter
  style: StringNullableFilter
  themeColor: StringFilter
  index: IndexItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IndexItemManyRelationFilter {
  every: IndexItemWhereInput
  some: IndexItemWhereInput
  none: IndexItemWhereInput
}

input InlineIndexOrderByInput {
  id: OrderDirection
  name: OrderDirection
  style: OrderDirection
  themeColor: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input InlineIndexUpdateInput {
  name: String
  style: String
  themeColor: String
  index: IndexItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input IndexItemRelateToManyForUpdateInput {
  disconnect: [IndexItemWhereUniqueInput!]
  set: [IndexItemWhereUniqueInput!]
  create: [IndexItemCreateInput!]
  connect: [IndexItemWhereUniqueInput!]
}

input InlineIndexUpdateArgs {
  where: InlineIndexWhereUniqueInput!
  data: InlineIndexUpdateInput!
}

input InlineIndexCreateInput {
  name: String
  style: String
  themeColor: String
  index: IndexItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input IndexItemRelateToManyForCreateInput {
  create: [IndexItemCreateInput!]
  connect: [IndexItemWhereUniqueInput!]
}

type IndexItem {
  id: ID!
  name: String
  slug: String
  order: Int
  imageFile: ImageFieldOutput
  imageLink: String
  color: String
  index(where: InlineIndexWhereInput! = {}, orderBy: [InlineIndexOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InlineIndexWhereUniqueInput): [InlineIndex!]
  indexCount(where: InlineIndexWhereInput! = {}): Int
  originCode: String
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input IndexItemWhereUniqueInput {
  id: ID
}

input IndexItemWhereInput {
  AND: [IndexItemWhereInput!]
  OR: [IndexItemWhereInput!]
  NOT: [IndexItemWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  order: IntFilter
  imageLink: StringFilter
  color: StringFilter
  index: InlineIndexManyRelationFilter
  originCode: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input InlineIndexManyRelationFilter {
  every: InlineIndexWhereInput
  some: InlineIndexWhereInput
  none: InlineIndexWhereInput
}

input IndexItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  order: OrderDirection
  imageLink: OrderDirection
  color: OrderDirection
  originCode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input IndexItemUpdateInput {
  name: String
  slug: String
  order: Int
  imageFile: ImageFieldInput
  imageLink: String
  color: String
  index: InlineIndexRelateToManyForUpdateInput
  originCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input InlineIndexRelateToManyForUpdateInput {
  disconnect: [InlineIndexWhereUniqueInput!]
  set: [InlineIndexWhereUniqueInput!]
  create: [InlineIndexCreateInput!]
  connect: [InlineIndexWhereUniqueInput!]
}

input IndexItemUpdateArgs {
  where: IndexItemWhereUniqueInput!
  data: IndexItemUpdateInput!
}

input IndexItemCreateInput {
  name: String
  slug: String
  order: Int
  imageFile: ImageFieldInput
  imageLink: String
  color: String
  index: InlineIndexRelateToManyForCreateInput
  originCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input InlineIndexRelateToManyForCreateInput {
  create: [InlineIndexCreateInput!]
  connect: [InlineIndexWhereUniqueInput!]
}

type Karaoke {
  id: ID!
  name: String
  quote: String
  audio: FileFieldOutput
  imageFile: ImageFieldOutput
  audioLink: String
  imageLink: String
  muteHint: Boolean
  helper: ComponentHelp
  embedCode: String
  previewButton: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input KaraokeWhereUniqueInput {
  id: ID
}

input KaraokeWhereInput {
  AND: [KaraokeWhereInput!]
  OR: [KaraokeWhereInput!]
  NOT: [KaraokeWhereInput!]
  id: IDFilter
  name: StringFilter
  quote: StringFilter
  audioLink: StringFilter
  imageLink: StringFilter
  muteHint: BooleanFilter
  helper: ComponentHelpWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input KaraokeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  quote: OrderDirection
  audioLink: OrderDirection
  imageLink: OrderDirection
  muteHint: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input KaraokeUpdateInput {
  name: String
  quote: String
  audio: FileFieldInput
  imageFile: ImageFieldInput
  audioLink: String
  imageLink: String
  muteHint: Boolean
  helper: ComponentHelpRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ComponentHelpRelateToOneForUpdateInput {
  create: ComponentHelpCreateInput
  connect: ComponentHelpWhereUniqueInput
  disconnect: Boolean
}

input KaraokeUpdateArgs {
  where: KaraokeWhereUniqueInput!
  data: KaraokeUpdateInput!
}

input KaraokeCreateInput {
  name: String
  quote: String
  audio: FileFieldInput
  imageFile: ImageFieldInput
  audioLink: String
  imageLink: String
  muteHint: Boolean
  helper: ComponentHelpRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input ComponentHelpRelateToOneForCreateInput {
  create: ComponentHelpCreateInput
  connect: ComponentHelpWhereUniqueInput
}

type VideoPicker {
  id: ID!
  name: String
  video1920: FileFieldOutput
  video1440: FileFieldOutput
  video1280: FileFieldOutput
  video960: FileFieldOutput
  video720: FileFieldOutput
  muteHint: Boolean
  voiceHint: String
  voiceButton: String
  hintMode: String
  embedCode: String
  previewButton: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoPickerWhereUniqueInput {
  id: ID
}

input VideoPickerWhereInput {
  AND: [VideoPickerWhereInput!]
  OR: [VideoPickerWhereInput!]
  NOT: [VideoPickerWhereInput!]
  id: IDFilter
  name: StringFilter
  muteHint: BooleanFilter
  voiceHint: StringFilter
  voiceButton: StringFilter
  hintMode: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoPickerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  muteHint: OrderDirection
  voiceHint: OrderDirection
  voiceButton: OrderDirection
  hintMode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoPickerUpdateInput {
  name: String
  video1920: FileFieldInput
  video1440: FileFieldInput
  video1280: FileFieldInput
  video960: FileFieldInput
  video720: FileFieldInput
  muteHint: Boolean
  voiceHint: String
  voiceButton: String
  hintMode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoPickerUpdateArgs {
  where: VideoPickerWhereUniqueInput!
  data: VideoPickerUpdateInput!
}

input VideoPickerCreateInput {
  name: String
  video1920: FileFieldInput
  video1440: FileFieldInput
  video1280: FileFieldInput
  video960: FileFieldInput
  video720: FileFieldInput
  muteHint: Boolean
  voiceHint: String
  voiceButton: String
  hintMode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type QAList {
  id: ID!
  name: String
  items(where: QAItemWhereInput! = {}, orderBy: [QAItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QAItemWhereUniqueInput): [QAItem!]
  itemsCount(where: QAItemWhereInput! = {}): Int
  embedCode: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input QAListWhereUniqueInput {
  id: ID
}

input QAListWhereInput {
  AND: [QAListWhereInput!]
  OR: [QAListWhereInput!]
  NOT: [QAListWhereInput!]
  id: IDFilter
  name: StringFilter
  items: QAItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QAItemManyRelationFilter {
  every: QAItemWhereInput
  some: QAItemWhereInput
  none: QAItemWhereInput
}

input QAListOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QAListUpdateInput {
  name: String
  items: QAItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input QAItemRelateToManyForUpdateInput {
  disconnect: [QAItemWhereUniqueInput!]
  set: [QAItemWhereUniqueInput!]
  create: [QAItemCreateInput!]
  connect: [QAItemWhereUniqueInput!]
}

input QAListUpdateArgs {
  where: QAListWhereUniqueInput!
  data: QAListUpdateInput!
}

input QAListCreateInput {
  name: String
  items: QAItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input QAItemRelateToManyForCreateInput {
  create: [QAItemCreateInput!]
  connect: [QAItemWhereUniqueInput!]
}

type QAItem {
  id: ID!
  title: String
  content: JSON
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input QAItemWhereUniqueInput {
  id: ID
}

input QAItemWhereInput {
  AND: [QAItemWhereInput!]
  OR: [QAItemWhereInput!]
  NOT: [QAItemWhereInput!]
  id: IDFilter
  title: StringFilter
  sortOrder: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QAItemOrderByInput {
  id: OrderDirection
  title: OrderDirection
  sortOrder: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QAItemUpdateInput {
  title: String
  content: JSON
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input QAItemUpdateArgs {
  where: QAItemWhereUniqueInput!
  data: QAItemUpdateInput!
}

input QAItemCreateInput {
  title: String
  content: JSON
  sortOrder: Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type FeedbackCounter {
  id: ID!
  form: Form
  name: String
  uri: String
  theme: String
  shouldUseRecaptcha: Boolean
  thumbUpLabel: String
  thumbDownLabel: String
  embeddedCode: String
  previewButton: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FeedbackCounterWhereUniqueInput {
  id: ID
}

input FeedbackCounterWhereInput {
  AND: [FeedbackCounterWhereInput!]
  OR: [FeedbackCounterWhereInput!]
  NOT: [FeedbackCounterWhereInput!]
  id: IDFilter
  form: FormWhereInput
  name: StringFilter
  uri: StringFilter
  theme: StringFilter
  shouldUseRecaptcha: BooleanFilter
  thumbUpLabel: StringFilter
  thumbDownLabel: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FeedbackCounterOrderByInput {
  id: OrderDirection
  name: OrderDirection
  uri: OrderDirection
  theme: OrderDirection
  shouldUseRecaptcha: OrderDirection
  thumbUpLabel: OrderDirection
  thumbDownLabel: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FeedbackCounterUpdateInput {
  form: FormRelateToOneForUpdateInput
  name: String
  uri: String
  theme: String
  shouldUseRecaptcha: Boolean
  thumbUpLabel: String
  thumbDownLabel: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FeedbackCounterUpdateArgs {
  where: FeedbackCounterWhereUniqueInput!
  data: FeedbackCounterUpdateInput!
}

input FeedbackCounterCreateInput {
  form: FormRelateToOneForCreateInput
  name: String
  uri: String
  theme: String
  shouldUseRecaptcha: Boolean
  thumbUpLabel: String
  thumbDownLabel: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ThreeStoryPoint {
  id: ID!
  name: String
  model: FileFieldOutput
  desktopModel: FileFieldOutput
  lightModel: FileFieldOutput
  captions: JSON
  audios: JSON
  cameraRig: JSON
  debugMode: Boolean
  camerHelper: JSON
  embedCode: String
  preview: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ThreeStoryPointWhereUniqueInput {
  id: ID
}

input ThreeStoryPointWhereInput {
  AND: [ThreeStoryPointWhereInput!]
  OR: [ThreeStoryPointWhereInput!]
  NOT: [ThreeStoryPointWhereInput!]
  id: IDFilter
  name: StringFilter
  debugMode: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ThreeStoryPointOrderByInput {
  id: OrderDirection
  name: OrderDirection
  debugMode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ThreeStoryPointUpdateInput {
  name: String
  model: FileFieldInput
  desktopModel: FileFieldInput
  lightModel: FileFieldInput
  captions: JSON
  audios: JSON
  cameraRig: JSON
  debugMode: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ThreeStoryPointUpdateArgs {
  where: ThreeStoryPointWhereUniqueInput!
  data: ThreeStoryPointUpdateInput!
}

input ThreeStoryPointCreateInput {
  name: String
  model: FileFieldInput
  desktopModel: FileFieldInput
  lightModel: FileFieldInput
  captions: JSON
  audios: JSON
  cameraRig: JSON
  debugMode: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type DualSlide {
  id: ID!
  name: String
  slides: JSON
  helper: ComponentHelp
  embedCode: String
  preview: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input DualSlideWhereUniqueInput {
  id: ID
}

input DualSlideWhereInput {
  AND: [DualSlideWhereInput!]
  OR: [DualSlideWhereInput!]
  NOT: [DualSlideWhereInput!]
  id: IDFilter
  name: StringFilter
  helper: ComponentHelpWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DualSlideOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DualSlideUpdateInput {
  name: String
  slides: JSON
  helper: ComponentHelpRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DualSlideUpdateArgs {
  where: DualSlideWhereUniqueInput!
  data: DualSlideUpdateInput!
}

input DualSlideCreateInput {
  name: String
  slides: JSON
  helper: ComponentHelpRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type RandomTextSelector {
  id: ID!
  name: String
  json: JSON
  shiftLeft: Boolean
  helper: ComponentHelp
  highlightDesktop: ImageFieldOutput
  highlightMobile: ImageFieldOutput
  loadingIcon: ImageFieldOutput
  button: ImageFieldOutput
  buttonLabel: String
  backgroundColor: String
  isDebugMode: Boolean
  embedCode: String
  preview: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input RandomTextSelectorWhereUniqueInput {
  id: ID
}

input RandomTextSelectorWhereInput {
  AND: [RandomTextSelectorWhereInput!]
  OR: [RandomTextSelectorWhereInput!]
  NOT: [RandomTextSelectorWhereInput!]
  id: IDFilter
  name: StringFilter
  shiftLeft: BooleanFilter
  helper: ComponentHelpWhereInput
  buttonLabel: StringFilter
  backgroundColor: StringFilter
  isDebugMode: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input RandomTextSelectorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  shiftLeft: OrderDirection
  buttonLabel: OrderDirection
  backgroundColor: OrderDirection
  isDebugMode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input RandomTextSelectorUpdateInput {
  name: String
  json: JSON
  shiftLeft: Boolean
  helper: ComponentHelpRelateToOneForUpdateInput
  highlightDesktop: ImageFieldInput
  highlightMobile: ImageFieldInput
  loadingIcon: ImageFieldInput
  button: ImageFieldInput
  buttonLabel: String
  backgroundColor: String
  isDebugMode: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input RandomTextSelectorUpdateArgs {
  where: RandomTextSelectorWhereUniqueInput!
  data: RandomTextSelectorUpdateInput!
}

input RandomTextSelectorCreateInput {
  name: String
  json: JSON
  shiftLeft: Boolean
  helper: ComponentHelpRelateToOneForCreateInput
  highlightDesktop: ImageFieldInput
  highlightMobile: ImageFieldInput
  loadingIcon: ImageFieldInput
  button: ImageFieldInput
  buttonLabel: String
  backgroundColor: String
  isDebugMode: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ComponentHelp {
  id: ID!
  name: String
  desc: String
  relatedTopics: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ComponentHelpWhereUniqueInput {
  id: ID
}

input ComponentHelpWhereInput {
  AND: [ComponentHelpWhereInput!]
  OR: [ComponentHelpWhereInput!]
  NOT: [ComponentHelpWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  relatedTopics: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ComponentHelpOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  relatedTopics: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ComponentHelpUpdateInput {
  name: String
  desc: String
  relatedTopics: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ComponentHelpUpdateArgs {
  where: ComponentHelpWhereUniqueInput!
  data: ComponentHelpUpdateInput!
}

input ComponentHelpCreateInput {
  name: String
  desc: String
  relatedTopics: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type DroppingText {
  id: ID!
  name: String
  textArr: JSON
  shiftLeft: Boolean
  helper: ComponentHelp
  embedCode: String
  preview: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input DroppingTextWhereUniqueInput {
  id: ID
}

input DroppingTextWhereInput {
  AND: [DroppingTextWhereInput!]
  OR: [DroppingTextWhereInput!]
  NOT: [DroppingTextWhereInput!]
  id: IDFilter
  name: StringFilter
  shiftLeft: BooleanFilter
  helper: ComponentHelpWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DroppingTextOrderByInput {
  id: OrderDirection
  name: OrderDirection
  shiftLeft: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DroppingTextUpdateInput {
  name: String
  textArr: JSON
  shiftLeft: Boolean
  helper: ComponentHelpRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DroppingTextUpdateArgs {
  where: DroppingTextWhereUniqueInput!
  data: DroppingTextUpdateInput!
}

input DroppingTextCreateInput {
  name: String
  textArr: JSON
  shiftLeft: Boolean
  helper: ComponentHelpRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Theatre {
  id: ID!
  name: String
  displayMode: String
  objectJson: JSON
  animationJson: JSON
  mobileWidth: Int
  mobileObjectJson: JSON
  mobileAnimationJson: JSON
  theatreEditor: JSON
  embedCode: String
  preview: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TheatreWhereUniqueInput {
  id: ID
}

input TheatreWhereInput {
  AND: [TheatreWhereInput!]
  OR: [TheatreWhereInput!]
  NOT: [TheatreWhereInput!]
  id: IDFilter
  name: StringFilter
  displayMode: StringNullableFilter
  mobileWidth: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TheatreOrderByInput {
  id: OrderDirection
  name: OrderDirection
  displayMode: OrderDirection
  mobileWidth: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TheatreUpdateInput {
  name: String
  displayMode: String
  objectJson: JSON
  animationJson: JSON
  mobileWidth: Int
  mobileObjectJson: JSON
  mobileAnimationJson: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TheatreUpdateArgs {
  where: TheatreWhereUniqueInput!
  data: TheatreUpdateInput!
}

input TheatreCreateInput {
  name: String
  displayMode: String
  objectJson: JSON
  animationJson: JSON
  mobileWidth: Int
  mobileObjectJson: JSON
  mobileAnimationJson: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type FullScene {
  id: ID!
  name: String
  desc: String
  imageFile: ImageFieldOutput
  displayMode: String
  hotspotJson: JSON
  embedCode: String
  previewButton: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FullSceneWhereUniqueInput {
  id: ID
}

input FullSceneWhereInput {
  AND: [FullSceneWhereInput!]
  OR: [FullSceneWhereInput!]
  NOT: [FullSceneWhereInput!]
  id: IDFilter
  name: StringFilter
  desc: StringFilter
  displayMode: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FullSceneOrderByInput {
  id: OrderDirection
  name: OrderDirection
  desc: OrderDirection
  displayMode: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FullSceneUpdateInput {
  name: String
  desc: String
  imageFile: ImageFieldInput
  displayMode: String
  hotspotJson: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FullSceneUpdateArgs {
  where: FullSceneWhereUniqueInput!
  data: FullSceneUpdateInput!
}

input FullSceneCreateInput {
  name: String
  desc: String
  imageFile: ImageFieldInput
  displayMode: String
  hotspotJson: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type File {
  id: ID!
  name: String
  file: FileFieldOutput
  FileSrc: String
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FileUpdateInput {
  name: String
  file: FileFieldInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  name: String
  file: FileFieldInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createLiveblogItem(data: LiveblogItemCreateInput!): LiveblogItem
  createLiveblogItems(data: [LiveblogItemCreateInput!]!): [LiveblogItem]
  updateLiveblogItem(where: LiveblogItemWhereUniqueInput!, data: LiveblogItemUpdateInput!): LiveblogItem
  updateLiveblogItems(data: [LiveblogItemUpdateArgs!]!): [LiveblogItem]
  deleteLiveblogItem(where: LiveblogItemWhereUniqueInput!): LiveblogItem
  deleteLiveblogItems(where: [LiveblogItemWhereUniqueInput!]!): [LiveblogItem]
  createLiveblog(data: LiveblogCreateInput!): Liveblog
  createLiveblogs(data: [LiveblogCreateInput!]!): [Liveblog]
  updateLiveblog(where: LiveblogWhereUniqueInput!, data: LiveblogUpdateInput!): Liveblog
  updateLiveblogs(data: [LiveblogUpdateArgs!]!): [Liveblog]
  deleteLiveblog(where: LiveblogWhereUniqueInput!): Liveblog
  deleteLiveblogs(where: [LiveblogWhereUniqueInput!]!): [Liveblog]
  createPublisher(data: PublisherCreateInput!): Publisher
  createPublishers(data: [PublisherCreateInput!]!): [Publisher]
  updatePublisher(where: PublisherWhereUniqueInput!, data: PublisherUpdateInput!): Publisher
  updatePublishers(data: [PublisherUpdateArgs!]!): [Publisher]
  deletePublisher(where: PublisherWhereUniqueInput!): Publisher
  deletePublishers(where: [PublisherWhereUniqueInput!]!): [Publisher]
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(where: AudioFileWhereUniqueInput!, data: AudioFileUpdateInput!): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createForm(data: FormCreateInput!): Form
  createForms(data: [FormCreateInput!]!): [Form]
  updateForm(where: FormWhereUniqueInput!, data: FormUpdateInput!): Form
  updateForms(data: [FormUpdateArgs!]!): [Form]
  deleteForm(where: FormWhereUniqueInput!): Form
  deleteForms(where: [FormWhereUniqueInput!]!): [Form]
  createField(data: FieldCreateInput!): Field
  createFields(data: [FieldCreateInput!]!): [Field]
  updateField(where: FieldWhereUniqueInput!, data: FieldUpdateInput!): Field
  updateFields(data: [FieldUpdateArgs!]!): [Field]
  deleteField(where: FieldWhereUniqueInput!): Field
  deleteFields(where: [FieldWhereUniqueInput!]!): [Field]
  createFieldOption(data: FieldOptionCreateInput!): FieldOption
  createFieldOptions(data: [FieldOptionCreateInput!]!): [FieldOption]
  updateFieldOption(where: FieldOptionWhereUniqueInput!, data: FieldOptionUpdateInput!): FieldOption
  updateFieldOptions(data: [FieldOptionUpdateArgs!]!): [FieldOption]
  deleteFieldOption(where: FieldOptionWhereUniqueInput!): FieldOption
  deleteFieldOptions(where: [FieldOptionWhereUniqueInput!]!): [FieldOption]
  createFormAnswer(data: FormAnswerCreateInput!): FormAnswer
  createFormAnswers(data: [FormAnswerCreateInput!]!): [FormAnswer]
  updateFormAnswer(where: FormAnswerWhereUniqueInput!, data: FormAnswerUpdateInput!): FormAnswer
  updateFormAnswers(data: [FormAnswerUpdateArgs!]!): [FormAnswer]
  deleteFormAnswer(where: FormAnswerWhereUniqueInput!): FormAnswer
  deleteFormAnswers(where: [FormAnswerWhereUniqueInput!]!): [FormAnswer]
  createFormResult(data: FormResultCreateInput!): FormResult
  createFormResults(data: [FormResultCreateInput!]!): [FormResult]
  updateFormResult(where: FormResultWhereUniqueInput!, data: FormResultUpdateInput!): FormResult
  updateFormResults(data: [FormResultUpdateArgs!]!): [FormResult]
  deleteFormResult(where: FormResultWhereUniqueInput!): FormResult
  deleteFormResults(where: [FormResultWhereUniqueInput!]!): [FormResult]
  createCondition(data: ConditionCreateInput!): Condition
  createConditions(data: [ConditionCreateInput!]!): [Condition]
  updateCondition(where: ConditionWhereUniqueInput!, data: ConditionUpdateInput!): Condition
  updateConditions(data: [ConditionUpdateArgs!]!): [Condition]
  deleteCondition(where: ConditionWhereUniqueInput!): Condition
  deleteConditions(where: [ConditionWhereUniqueInput!]!): [Condition]
  createConditionCollection(data: ConditionCollectionCreateInput!): ConditionCollection
  createConditionCollections(data: [ConditionCollectionCreateInput!]!): [ConditionCollection]
  updateConditionCollection(where: ConditionCollectionWhereUniqueInput!, data: ConditionCollectionUpdateInput!): ConditionCollection
  updateConditionCollections(data: [ConditionCollectionUpdateArgs!]!): [ConditionCollection]
  deleteConditionCollection(where: ConditionCollectionWhereUniqueInput!): ConditionCollection
  deleteConditionCollections(where: [ConditionCollectionWhereUniqueInput!]!): [ConditionCollection]
  createQuestion(data: QuestionCreateInput!): Question
  createQuestions(data: [QuestionCreateInput!]!): [Question]
  updateQuestion(where: QuestionWhereUniqueInput!, data: QuestionUpdateInput!): Question
  updateQuestions(data: [QuestionUpdateArgs!]!): [Question]
  deleteQuestion(where: QuestionWhereUniqueInput!): Question
  deleteQuestions(where: [QuestionWhereUniqueInput!]!): [Question]
  createEmbedCode(data: EmbedCodeCreateInput!): EmbedCode
  createEmbedCodes(data: [EmbedCodeCreateInput!]!): [EmbedCode]
  updateEmbedCode(where: EmbedCodeWhereUniqueInput!, data: EmbedCodeUpdateInput!): EmbedCode
  updateEmbedCodes(data: [EmbedCodeUpdateArgs!]!): [EmbedCode]
  deleteEmbedCode(where: EmbedCodeWhereUniqueInput!): EmbedCode
  deleteEmbedCodes(where: [EmbedCodeWhereUniqueInput!]!): [EmbedCode]
  createInlineIndex(data: InlineIndexCreateInput!): InlineIndex
  createInlineIndices(data: [InlineIndexCreateInput!]!): [InlineIndex]
  updateInlineIndex(where: InlineIndexWhereUniqueInput!, data: InlineIndexUpdateInput!): InlineIndex
  updateInlineIndices(data: [InlineIndexUpdateArgs!]!): [InlineIndex]
  deleteInlineIndex(where: InlineIndexWhereUniqueInput!): InlineIndex
  deleteInlineIndices(where: [InlineIndexWhereUniqueInput!]!): [InlineIndex]
  createIndexItem(data: IndexItemCreateInput!): IndexItem
  createIndexItems(data: [IndexItemCreateInput!]!): [IndexItem]
  updateIndexItem(where: IndexItemWhereUniqueInput!, data: IndexItemUpdateInput!): IndexItem
  updateIndexItems(data: [IndexItemUpdateArgs!]!): [IndexItem]
  deleteIndexItem(where: IndexItemWhereUniqueInput!): IndexItem
  deleteIndexItems(where: [IndexItemWhereUniqueInput!]!): [IndexItem]
  createKaraoke(data: KaraokeCreateInput!): Karaoke
  createKaraokes(data: [KaraokeCreateInput!]!): [Karaoke]
  updateKaraoke(where: KaraokeWhereUniqueInput!, data: KaraokeUpdateInput!): Karaoke
  updateKaraokes(data: [KaraokeUpdateArgs!]!): [Karaoke]
  deleteKaraoke(where: KaraokeWhereUniqueInput!): Karaoke
  deleteKaraokes(where: [KaraokeWhereUniqueInput!]!): [Karaoke]
  createVideoPicker(data: VideoPickerCreateInput!): VideoPicker
  createVideoPickers(data: [VideoPickerCreateInput!]!): [VideoPicker]
  updateVideoPicker(where: VideoPickerWhereUniqueInput!, data: VideoPickerUpdateInput!): VideoPicker
  updateVideoPickers(data: [VideoPickerUpdateArgs!]!): [VideoPicker]
  deleteVideoPicker(where: VideoPickerWhereUniqueInput!): VideoPicker
  deleteVideoPickers(where: [VideoPickerWhereUniqueInput!]!): [VideoPicker]
  createQAList(data: QAListCreateInput!): QAList
  createQALists(data: [QAListCreateInput!]!): [QAList]
  updateQAList(where: QAListWhereUniqueInput!, data: QAListUpdateInput!): QAList
  updateQALists(data: [QAListUpdateArgs!]!): [QAList]
  deleteQAList(where: QAListWhereUniqueInput!): QAList
  deleteQALists(where: [QAListWhereUniqueInput!]!): [QAList]
  createQAItem(data: QAItemCreateInput!): QAItem
  createQAItems(data: [QAItemCreateInput!]!): [QAItem]
  updateQAItem(where: QAItemWhereUniqueInput!, data: QAItemUpdateInput!): QAItem
  updateQAItems(data: [QAItemUpdateArgs!]!): [QAItem]
  deleteQAItem(where: QAItemWhereUniqueInput!): QAItem
  deleteQAItems(where: [QAItemWhereUniqueInput!]!): [QAItem]
  createFeedbackCounter(data: FeedbackCounterCreateInput!): FeedbackCounter
  createFeedbackCounters(data: [FeedbackCounterCreateInput!]!): [FeedbackCounter]
  updateFeedbackCounter(where: FeedbackCounterWhereUniqueInput!, data: FeedbackCounterUpdateInput!): FeedbackCounter
  updateFeedbackCounters(data: [FeedbackCounterUpdateArgs!]!): [FeedbackCounter]
  deleteFeedbackCounter(where: FeedbackCounterWhereUniqueInput!): FeedbackCounter
  deleteFeedbackCounters(where: [FeedbackCounterWhereUniqueInput!]!): [FeedbackCounter]
  createThreeStoryPoint(data: ThreeStoryPointCreateInput!): ThreeStoryPoint
  createThreeStoryPoints(data: [ThreeStoryPointCreateInput!]!): [ThreeStoryPoint]
  updateThreeStoryPoint(where: ThreeStoryPointWhereUniqueInput!, data: ThreeStoryPointUpdateInput!): ThreeStoryPoint
  updateThreeStoryPoints(data: [ThreeStoryPointUpdateArgs!]!): [ThreeStoryPoint]
  deleteThreeStoryPoint(where: ThreeStoryPointWhereUniqueInput!): ThreeStoryPoint
  deleteThreeStoryPoints(where: [ThreeStoryPointWhereUniqueInput!]!): [ThreeStoryPoint]
  createDualSlide(data: DualSlideCreateInput!): DualSlide
  createDualSlides(data: [DualSlideCreateInput!]!): [DualSlide]
  updateDualSlide(where: DualSlideWhereUniqueInput!, data: DualSlideUpdateInput!): DualSlide
  updateDualSlides(data: [DualSlideUpdateArgs!]!): [DualSlide]
  deleteDualSlide(where: DualSlideWhereUniqueInput!): DualSlide
  deleteDualSlides(where: [DualSlideWhereUniqueInput!]!): [DualSlide]
  createRandomTextSelector(data: RandomTextSelectorCreateInput!): RandomTextSelector
  createRandomTextSelectors(data: [RandomTextSelectorCreateInput!]!): [RandomTextSelector]
  updateRandomTextSelector(where: RandomTextSelectorWhereUniqueInput!, data: RandomTextSelectorUpdateInput!): RandomTextSelector
  updateRandomTextSelectors(data: [RandomTextSelectorUpdateArgs!]!): [RandomTextSelector]
  deleteRandomTextSelector(where: RandomTextSelectorWhereUniqueInput!): RandomTextSelector
  deleteRandomTextSelectors(where: [RandomTextSelectorWhereUniqueInput!]!): [RandomTextSelector]
  createComponentHelp(data: ComponentHelpCreateInput!): ComponentHelp
  createComponentHelps(data: [ComponentHelpCreateInput!]!): [ComponentHelp]
  updateComponentHelp(where: ComponentHelpWhereUniqueInput!, data: ComponentHelpUpdateInput!): ComponentHelp
  updateComponentHelps(data: [ComponentHelpUpdateArgs!]!): [ComponentHelp]
  deleteComponentHelp(where: ComponentHelpWhereUniqueInput!): ComponentHelp
  deleteComponentHelps(where: [ComponentHelpWhereUniqueInput!]!): [ComponentHelp]
  createDroppingText(data: DroppingTextCreateInput!): DroppingText
  createDroppingTexts(data: [DroppingTextCreateInput!]!): [DroppingText]
  updateDroppingText(where: DroppingTextWhereUniqueInput!, data: DroppingTextUpdateInput!): DroppingText
  updateDroppingTexts(data: [DroppingTextUpdateArgs!]!): [DroppingText]
  deleteDroppingText(where: DroppingTextWhereUniqueInput!): DroppingText
  deleteDroppingTexts(where: [DroppingTextWhereUniqueInput!]!): [DroppingText]
  createTheatre(data: TheatreCreateInput!): Theatre
  createTheatres(data: [TheatreCreateInput!]!): [Theatre]
  updateTheatre(where: TheatreWhereUniqueInput!, data: TheatreUpdateInput!): Theatre
  updateTheatres(data: [TheatreUpdateArgs!]!): [Theatre]
  deleteTheatre(where: TheatreWhereUniqueInput!): Theatre
  deleteTheatres(where: [TheatreWhereUniqueInput!]!): [Theatre]
  createFullScene(data: FullSceneCreateInput!): FullScene
  createFullScenes(data: [FullSceneCreateInput!]!): [FullScene]
  updateFullScene(where: FullSceneWhereUniqueInput!, data: FullSceneUpdateInput!): FullScene
  updateFullScenes(data: [FullSceneUpdateArgs!]!): [FullScene]
  deleteFullScene(where: FullSceneWhereUniqueInput!): FullScene
  deleteFullScenes(where: [FullSceneWhereUniqueInput!]!): [FullScene]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  liveblogItems(where: LiveblogItemWhereInput! = {}, orderBy: [LiveblogItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LiveblogItemWhereUniqueInput): [LiveblogItem!]
  liveblogItem(where: LiveblogItemWhereUniqueInput!): LiveblogItem
  liveblogItemsCount(where: LiveblogItemWhereInput! = {}): Int
  liveblogs(where: LiveblogWhereInput! = {}, orderBy: [LiveblogOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LiveblogWhereUniqueInput): [Liveblog!]
  liveblog(where: LiveblogWhereUniqueInput!): Liveblog
  liveblogsCount(where: LiveblogWhereInput! = {}): Int
  publishers(where: PublisherWhereInput! = {}, orderBy: [PublisherOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PublisherWhereUniqueInput): [Publisher!]
  publisher(where: PublisherWhereUniqueInput!): Publisher
  publishersCount(where: PublisherWhereInput! = {}): Int
  audioFiles(where: AudioFileWhereInput! = {}, orderBy: [AudioFileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AudioFileWhereUniqueInput): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  forms(where: FormWhereInput! = {}, orderBy: [FormOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormWhereUniqueInput): [Form!]
  form(where: FormWhereUniqueInput!): Form
  formsCount(where: FormWhereInput! = {}): Int
  fields(where: FieldWhereInput! = {}, orderBy: [FieldOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldWhereUniqueInput): [Field!]
  field(where: FieldWhereUniqueInput!): Field
  fieldsCount(where: FieldWhereInput! = {}): Int
  fieldOptions(where: FieldOptionWhereInput! = {}, orderBy: [FieldOptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FieldOptionWhereUniqueInput): [FieldOption!]
  fieldOption(where: FieldOptionWhereUniqueInput!): FieldOption
  fieldOptionsCount(where: FieldOptionWhereInput! = {}): Int
  formAnswers(where: FormAnswerWhereInput! = {}, orderBy: [FormAnswerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormAnswerWhereUniqueInput): [FormAnswer!]
  formAnswer(where: FormAnswerWhereUniqueInput!): FormAnswer
  formAnswersCount(where: FormAnswerWhereInput! = {}): Int
  formResults(where: FormResultWhereInput! = {}, orderBy: [FormResultOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormResultWhereUniqueInput): [FormResult!]
  formResult(where: FormResultWhereUniqueInput!): FormResult
  formResultsCount(where: FormResultWhereInput! = {}): Int
  conditions(where: ConditionWhereInput! = {}, orderBy: [ConditionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionWhereUniqueInput): [Condition!]
  condition(where: ConditionWhereUniqueInput!): Condition
  conditionsCount(where: ConditionWhereInput! = {}): Int
  conditionCollections(where: ConditionCollectionWhereInput! = {}, orderBy: [ConditionCollectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConditionCollectionWhereUniqueInput): [ConditionCollection!]
  conditionCollection(where: ConditionCollectionWhereUniqueInput!): ConditionCollection
  conditionCollectionsCount(where: ConditionCollectionWhereInput! = {}): Int
  questions(where: QuestionWhereInput! = {}, orderBy: [QuestionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuestionWhereUniqueInput): [Question!]
  question(where: QuestionWhereUniqueInput!): Question
  questionsCount(where: QuestionWhereInput! = {}): Int
  embedCodes(where: EmbedCodeWhereInput! = {}, orderBy: [EmbedCodeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EmbedCodeWhereUniqueInput): [EmbedCode!]
  embedCode(where: EmbedCodeWhereUniqueInput!): EmbedCode
  embedCodesCount(where: EmbedCodeWhereInput! = {}): Int
  inlineIndices(where: InlineIndexWhereInput! = {}, orderBy: [InlineIndexOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InlineIndexWhereUniqueInput): [InlineIndex!]
  inlineIndex(where: InlineIndexWhereUniqueInput!): InlineIndex
  inlineIndicesCount(where: InlineIndexWhereInput! = {}): Int
  indexItems(where: IndexItemWhereInput! = {}, orderBy: [IndexItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: IndexItemWhereUniqueInput): [IndexItem!]
  indexItem(where: IndexItemWhereUniqueInput!): IndexItem
  indexItemsCount(where: IndexItemWhereInput! = {}): Int
  karaokes(where: KaraokeWhereInput! = {}, orderBy: [KaraokeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: KaraokeWhereUniqueInput): [Karaoke!]
  karaoke(where: KaraokeWhereUniqueInput!): Karaoke
  karaokesCount(where: KaraokeWhereInput! = {}): Int
  videoPickers(where: VideoPickerWhereInput! = {}, orderBy: [VideoPickerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoPickerWhereUniqueInput): [VideoPicker!]
  videoPicker(where: VideoPickerWhereUniqueInput!): VideoPicker
  videoPickersCount(where: VideoPickerWhereInput! = {}): Int
  qALists(where: QAListWhereInput! = {}, orderBy: [QAListOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QAListWhereUniqueInput): [QAList!]
  qAList(where: QAListWhereUniqueInput!): QAList
  qAListsCount(where: QAListWhereInput! = {}): Int
  qAItems(where: QAItemWhereInput! = {}, orderBy: [QAItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QAItemWhereUniqueInput): [QAItem!]
  qAItem(where: QAItemWhereUniqueInput!): QAItem
  qAItemsCount(where: QAItemWhereInput! = {}): Int
  feedbackCounters(where: FeedbackCounterWhereInput! = {}, orderBy: [FeedbackCounterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeedbackCounterWhereUniqueInput): [FeedbackCounter!]
  feedbackCounter(where: FeedbackCounterWhereUniqueInput!): FeedbackCounter
  feedbackCountersCount(where: FeedbackCounterWhereInput! = {}): Int
  threeStoryPoints(where: ThreeStoryPointWhereInput! = {}, orderBy: [ThreeStoryPointOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ThreeStoryPointWhereUniqueInput): [ThreeStoryPoint!]
  threeStoryPoint(where: ThreeStoryPointWhereUniqueInput!): ThreeStoryPoint
  threeStoryPointsCount(where: ThreeStoryPointWhereInput! = {}): Int
  dualSlides(where: DualSlideWhereInput! = {}, orderBy: [DualSlideOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DualSlideWhereUniqueInput): [DualSlide!]
  dualSlide(where: DualSlideWhereUniqueInput!): DualSlide
  dualSlidesCount(where: DualSlideWhereInput! = {}): Int
  randomTextSelectors(where: RandomTextSelectorWhereInput! = {}, orderBy: [RandomTextSelectorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RandomTextSelectorWhereUniqueInput): [RandomTextSelector!]
  randomTextSelector(where: RandomTextSelectorWhereUniqueInput!): RandomTextSelector
  randomTextSelectorsCount(where: RandomTextSelectorWhereInput! = {}): Int
  componentHelps(where: ComponentHelpWhereInput! = {}, orderBy: [ComponentHelpOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComponentHelpWhereUniqueInput): [ComponentHelp!]
  componentHelp(where: ComponentHelpWhereUniqueInput!): ComponentHelp
  componentHelpsCount(where: ComponentHelpWhereInput! = {}): Int
  droppingTexts(where: DroppingTextWhereInput! = {}, orderBy: [DroppingTextOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DroppingTextWhereUniqueInput): [DroppingText!]
  droppingText(where: DroppingTextWhereUniqueInput!): DroppingText
  droppingTextsCount(where: DroppingTextWhereInput! = {}): Int
  theatres(where: TheatreWhereInput! = {}, orderBy: [TheatreOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TheatreWhereUniqueInput): [Theatre!]
  theatre(where: TheatreWhereUniqueInput!): Theatre
  theatresCount(where: TheatreWhereInput! = {}): Int
  fullScenes(where: FullSceneWhereInput! = {}, orderBy: [FullSceneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FullSceneWhereUniqueInput): [FullScene!]
  fullScene(where: FullSceneWhereUniqueInput!): FullScene
  fullScenesCount(where: FullSceneWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
