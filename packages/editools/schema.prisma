// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model User {
  id                                 Int                   @id @default(autoincrement())
  name                               String                @default("")
  email                              String                @unique @default("")
  password                           String
  role                               String
  isProtected                        Boolean               @default(false)
  from_LiveblogItem_createdBy        LiveblogItem[]        @relation("LiveblogItem_createdBy")
  from_LiveblogItem_updatedBy        LiveblogItem[]        @relation("LiveblogItem_updatedBy")
  from_Liveblog_createdBy            Liveblog[]            @relation("Liveblog_createdBy")
  from_Liveblog_updatedBy            Liveblog[]            @relation("Liveblog_updatedBy")
  from_Publisher_createdBy           Publisher[]           @relation("Publisher_createdBy")
  from_Publisher_updatedBy           Publisher[]           @relation("Publisher_updatedBy")
  from_AudioFile_createdBy           AudioFile[]           @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy           AudioFile[]           @relation("AudioFile_updatedBy")
  from_Video_createdBy               Video[]               @relation("Video_createdBy")
  from_Video_updatedBy               Video[]               @relation("Video_updatedBy")
  from_Photo_createdBy               Photo[]               @relation("Photo_createdBy")
  from_Photo_updatedBy               Photo[]               @relation("Photo_updatedBy")
  from_Tag_createdBy                 Tag[]                 @relation("Tag_createdBy")
  from_Tag_updatedBy                 Tag[]                 @relation("Tag_updatedBy")
  from_Form_createdBy                Form[]                @relation("Form_createdBy")
  from_Form_updatedBy                Form[]                @relation("Form_updatedBy")
  from_Field_createdBy               Field[]               @relation("Field_createdBy")
  from_Field_updatedBy               Field[]               @relation("Field_updatedBy")
  from_FieldOption_createdBy         FieldOption[]         @relation("FieldOption_createdBy")
  from_FieldOption_updatedBy         FieldOption[]         @relation("FieldOption_updatedBy")
  from_FormAnswer_createdBy          FormAnswer[]          @relation("FormAnswer_createdBy")
  from_FormAnswer_updatedBy          FormAnswer[]          @relation("FormAnswer_updatedBy")
  from_FormResult_createdBy          FormResult[]          @relation("FormResult_createdBy")
  from_FormResult_updatedBy          FormResult[]          @relation("FormResult_updatedBy")
  from_Condition_createdBy           Condition[]           @relation("Condition_createdBy")
  from_Condition_updatedBy           Condition[]           @relation("Condition_updatedBy")
  from_ConditionCollection_createdBy ConditionCollection[] @relation("ConditionCollection_createdBy")
  from_ConditionCollection_updatedBy ConditionCollection[] @relation("ConditionCollection_updatedBy")
  from_Question_createdBy            Question[]            @relation("Question_createdBy")
  from_Question_updatedBy            Question[]            @relation("Question_updatedBy")
  from_EmbedCode_createdBy           EmbedCode[]           @relation("EmbedCode_createdBy")
  from_EmbedCode_updatedBy           EmbedCode[]           @relation("EmbedCode_updatedBy")
  from_InlineIndex_createdBy         InlineIndex[]         @relation("InlineIndex_createdBy")
  from_InlineIndex_updatedBy         InlineIndex[]         @relation("InlineIndex_updatedBy")
  from_IndexItem_createdBy           IndexItem[]           @relation("IndexItem_createdBy")
  from_IndexItem_updatedBy           IndexItem[]           @relation("IndexItem_updatedBy")
  from_Karaoke_createdBy             Karaoke[]             @relation("Karaoke_createdBy")
  from_Karaoke_updatedBy             Karaoke[]             @relation("Karaoke_updatedBy")
}

model LiveblogItem {
  id          Int       @id @default(autoincrement())
  title       String    @default("")
  status      String?   @default("draft")
  publishTime DateTime?
  heroImage   Photo?    @relation("LiveblogItem_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  author      String    @default("")
  name        Json?
  boost       Boolean   @default(false)
  liveblog    Liveblog? @relation("LiveblogItem_liveblog", fields: [liveblogId], references: [id])
  liveblogId  Int?      @map("liveblog")
  tags        Tag?      @relation("LiveblogItem_tags", fields: [tagsId], references: [id])
  tagsId      Int?      @map("tags")
  apiData     Json?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("LiveblogItem_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("LiveblogItem_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([liveblogId])
  @@index([tagsId])
  @@index([createdById])
  @@index([updatedById])
}

model Liveblog {
  id             Int            @id @default(autoincrement())
  name           String         @default("")
  slug           String         @unique @default("")
  desc           String         @default("")
  heroImage      Photo?         @relation("Liveblog_heroImage", fields: [heroImageId], references: [id])
  heroImageId    Int?           @map("heroImage")
  heroVideo      Video?         @relation("Liveblog_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId    Int?           @map("heroVideo")
  active         Boolean        @default(true)
  liveblog_items LiveblogItem[] @relation("LiveblogItem_liveblog")
  tags           Tag?           @relation("Liveblog_tags", fields: [tagsId], references: [id])
  tagsId         Int?           @map("tags")
  publisher      Publisher?     @relation("Liveblog_publisher", fields: [publisherId], references: [id])
  publisherId    Int?           @map("publisher")
  createdAt      DateTime?
  updatedAt      DateTime?
  createdBy      User?          @relation("Liveblog_createdBy", fields: [createdById], references: [id])
  createdById    Int?           @map("createdBy")
  updatedBy      User?          @relation("Liveblog_updatedBy", fields: [updatedById], references: [id])
  updatedById    Int?           @map("updatedBy")

  @@index([heroImageId])
  @@index([heroVideoId])
  @@index([tagsId])
  @@index([publisherId])
  @@index([createdById])
  @@index([updatedById])
}

model Publisher {
  id          Int        @id @default(autoincrement())
  name        String     @default("")
  slug        String     @default("")
  intro       String     @default("")
  is_active   Boolean    @default(true)
  template    String     @default("")
  liveblog    Liveblog[] @relation("Liveblog_publisher")
  form        Form[]     @relation("Form_publisher")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("Publisher_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("Publisher_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_mode     String?
  file_filename String?
  coverPhoto    Photo?    @relation("AudioFile_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId  Int?      @map("coverPhoto")
  tags          String    @default("")
  meta          String    @default("")
  url           String    @default("")
  duration      String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model Video {
  id                      Int        @id @default(autoincrement())
  name                    String     @default("")
  youtubeUrl              String     @default("")
  file_filesize           Int?
  file_mode               String?
  file_filename           String?
  coverPhoto              Photo?     @relation("Video_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId            Int?       @map("coverPhoto")
  description             String     @default("")
  tags                    String     @default("")
  meta                    String     @default("")
  url                     String     @default("")
  duration                String     @default("")
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?      @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById             Int?       @map("createdBy")
  updatedBy               User?      @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?       @map("updatedBy")
  from_Liveblog_heroVideo Liveblog[] @relation("Liveblog_heroVideo")
  from_Form_heroVideo     Form[]     @relation("Form_heroVideo")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  imageFile_filesize          Int?
  imageFile_extension         String?
  imageFile_width             Int?
  imageFile_height            Int?
  imageFile_mode              String?
  imageFile_id                String?
  file_filesize               Int?
  file_mode                   String?
  file_filename               String?
  urlOriginal                 String         @default("")
  createdAt                   DateTime?
  updatedAt                   DateTime?
  createdBy                   User?          @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                 Int?           @map("createdBy")
  updatedBy                   User?          @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                 Int?           @map("updatedBy")
  from_LiveblogItem_heroImage LiveblogItem[] @relation("LiveblogItem_heroImage")
  from_Liveblog_heroImage     Liveblog[]     @relation("Liveblog_heroImage")
  from_AudioFile_coverPhoto   AudioFile[]    @relation("AudioFile_coverPhoto")
  from_Video_coverPhoto       Video[]        @relation("Video_coverPhoto")
  from_Form_heroImage         Form[]         @relation("Form_heroImage")
  from_Form_mobileImage       Form[]         @relation("Form_mobileImage")
  from_Field_heroImage        Field[]        @relation("Field_heroImage")
  from_FieldOption_heroImage  FieldOption[]  @relation("FieldOption_heroImage")
  from_FormAnswer_heroImage   FormAnswer[]   @relation("FormAnswer_heroImage")
  from_FormAnswer_mobileImage FormAnswer[]   @relation("FormAnswer_mobileImage")
  from_Question_heroImage     Question[]     @relation("Question_heroImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Tag {
  id              Int            @id @default(autoincrement())
  name            String         @unique @default("")
  liveblog        Liveblog[]     @relation("Liveblog_tags")
  liveblog_items  LiveblogItem[] @relation("LiveblogItem_tags")
  questions       Question[]     @relation("Question_tags")
  questionSection Question[]     @relation("Question_subject")
  form            Form[]         @relation("Form_tags")
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?          @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById     Int?           @map("createdBy")
  updatedBy       User?          @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?           @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Form {
  id                  Int                   @id @default(autoincrement())
  name                String                @default("")
  slug                String                @unique @default("")
  type                FormTypeType
  content             Json?
  heroImage           Photo?                @relation("Form_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?                  @map("heroImage")
  mobileImage         Photo?                @relation("Form_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId       Int?                  @map("mobileImage")
  heroVideo           Video?                @relation("Form_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId         Int?                  @map("heroVideo")
  active              Boolean               @default(true)
  fields              Field[]               @relation("Field_form")
  answers             FormAnswer[]          @relation("FormAnswer_form")
  updateTime          DateTime?
  questions           Question[]            @relation("Form_questions")
  tags                Tag[]                 @relation("Form_tags")
  conditions          ConditionCollection[] @relation("ConditionCollection_form")
  publisher           Publisher?            @relation("Form_publisher", fields: [publisherId], references: [id])
  publisherId         Int?                  @map("publisher")
  result              FormResult[]          @relation("FormResult_form")
  feedback            String                @default("")
  apiData             Json?
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("Form_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("Form_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")
  from_EmbedCode_form EmbedCode[]           @relation("EmbedCode_form")

  @@index([heroImageId])
  @@index([mobileImageId])
  @@index([heroVideoId])
  @@index([publisherId])
  @@index([createdById])
  @@index([updatedById])
}

model Field {
  id                  Int                   @id @default(autoincrement())
  name                String                @default("")
  type                FieldTypeType
  status              String?               @default("draft")
  heroImage           Photo?                @relation("Field_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?                  @map("heroImage")
  content             Json?
  sortOrder           Int?
  form                Form?                 @relation("Field_form", fields: [formId], references: [id])
  formId              Int?                  @map("form")
  options             FieldOption[]         @relation("FieldOption_field")
  conditionCollection ConditionCollection[] @relation("ConditionCollection_next")
  condition           Condition[]           @relation("Condition_formField")
  apiData             Json?
  result              FormResult[]          @relation("FormResult_field")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("Field_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("Field_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")

  @@index([heroImageId])
  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model FieldOption {
  id          Int         @id @default(autoincrement())
  name        String      @default("")
  heroImage   Photo?      @relation("FieldOption_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?        @map("heroImage")
  content     String      @default("")
  value       String      @default("")
  sortOrder   Int?
  field       Field?      @relation("FieldOption_field", fields: [fieldId], references: [id])
  fieldId     Int?        @map("field")
  condition   Condition[] @relation("Condition_option")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?       @relation("FieldOption_createdBy", fields: [createdById], references: [id])
  createdById Int?        @map("createdBy")
  updatedBy   User?       @relation("FieldOption_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?        @map("updatedBy")

  @@index([heroImageId])
  @@index([fieldId])
  @@index([createdById])
  @@index([updatedById])
}

model FormAnswer {
  id                  Int                   @id @default(autoincrement())
  name                String                @default("")
  heroImage           Photo?                @relation("FormAnswer_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?                  @map("heroImage")
  mobileImage         Photo?                @relation("FormAnswer_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId       Int?                  @map("mobileImage")
  content             Json?
  form                Form?                 @relation("FormAnswer_form", fields: [formId], references: [id])
  formId              Int?                  @map("form")
  conditionCollection ConditionCollection[] @relation("ConditionCollection_answer")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("FormAnswer_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("FormAnswer_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")

  @@index([heroImageId])
  @@index([mobileImageId])
  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model FormResult {
  id           Int       @id @default(autoincrement())
  name         String    @default("")
  ip           String    @default("")
  result       String    @default("")
  responseTime DateTime?
  form         Form?     @relation("FormResult_form", fields: [formId], references: [id])
  formId       Int?      @map("form")
  field        Field?    @relation("FormResult_field", fields: [fieldId], references: [id])
  fieldId      Int?      @map("field")
  hidden       Boolean   @default(false)
  createdAt    DateTime?
  updatedAt    DateTime?
  createdBy    User?     @relation("FormResult_createdBy", fields: [createdById], references: [id])
  createdById  Int?      @map("createdBy")
  updatedBy    User?     @relation("FormResult_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int?      @map("updatedBy")

  @@index([formId])
  @@index([fieldId])
  @@index([createdById])
  @@index([updatedById])
}

model Condition {
  id                  Int                   @id @default(autoincrement())
  title               String                @default("")
  formField           Field?                @relation("Condition_formField", fields: [formFieldId], references: [id])
  formFieldId         Int?                  @map("formField")
  compare             String
  option              FieldOption[]         @relation("Condition_option")
  conditionCollection ConditionCollection[] @relation("Condition_conditionCollection")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("Condition_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("Condition_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")

  @@index([formFieldId])
  @@index([createdById])
  @@index([updatedById])
}

model ConditionCollection {
  id          Int         @id @default(autoincrement())
  type        String?     @default("AND")
  order       Int
  condition   Condition[] @relation("Condition_conditionCollection")
  answer      FormAnswer? @relation("ConditionCollection_answer", fields: [answerId], references: [id])
  answerId    Int?        @map("answer")
  next        Field?      @relation("ConditionCollection_next", fields: [nextId], references: [id])
  nextId      Int?        @map("next")
  goOut       String      @default("")
  form        Form?       @relation("ConditionCollection_form", fields: [formId], references: [id])
  formId      Int?        @map("form")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?       @relation("ConditionCollection_createdBy", fields: [createdById], references: [id])
  createdById Int?        @map("createdBy")
  updatedBy   User?       @relation("ConditionCollection_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?        @map("updatedBy")

  @@index([answerId])
  @@index([nextId])
  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model Question {
  id          Int       @id @default(autoincrement())
  title       String    @unique @default("")
  status      String?   @default("draft")
  publishTime DateTime?
  heroImage   Photo?    @relation("Question_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  author      String    @default("")
  content     Json?
  boost       Boolean   @default(false)
  subject     Tag?      @relation("Question_subject", fields: [subjectId], references: [id])
  subjectId   Int?      @map("subject")
  tags        Tag[]     @relation("Question_tags")
  form        Form[]    @relation("Form_questions")
  apiData     Json?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Question_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Question_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([subjectId])
  @@index([createdById])
  @@index([updatedById])
}

model EmbedCode {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  form        Form?     @relation("EmbedCode_form", fields: [formId], references: [id])
  formId      Int?      @map("form")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("EmbedCode_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("EmbedCode_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model InlineIndex {
  id          Int         @id @default(autoincrement())
  name        String      @default("")
  index       IndexItem[] @relation("IndexItem_index")
  style       String      @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?       @relation("InlineIndex_createdBy", fields: [createdById], references: [id])
  createdById Int?        @map("createdBy")
  updatedBy   User?       @relation("InlineIndex_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?        @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model IndexItem {
  id                  Int           @id @default(autoincrement())
  name                String        @default("")
  slug                String        @default("")
  imageFile_filesize  Int?
  imageFile_extension String?
  imageFile_width     Int?
  imageFile_height    Int?
  imageFile_mode      String?
  imageFile_id        String?
  color               String        @default("#fff")
  index               InlineIndex[] @relation("IndexItem_index")
  originCode          String        @default("")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?         @relation("IndexItem_createdBy", fields: [createdById], references: [id])
  createdById         Int?          @map("createdBy")
  updatedBy           User?         @relation("IndexItem_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?          @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Karaoke {
  id                  Int       @id @default(autoincrement())
  name                String    @default("")
  quote               String    @default("")
  audio_filesize      Int?
  audio_mode          String?
  audio_filename      String?
  imageFile_filesize  Int?
  imageFile_extension String?
  imageFile_width     Int?
  imageFile_height    Int?
  imageFile_mode      String?
  imageFile_id        String?
  muteHint            Boolean   @default(false)
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?     @relation("Karaoke_createdBy", fields: [createdById], references: [id])
  createdById         Int?      @map("createdBy")
  updatedBy           User?     @relation("Karaoke_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

enum FormTypeType {
  qa
  form
  questionniare
  quiz
}

enum FieldTypeType {
  single
  multiple
  text
  checkbox
}