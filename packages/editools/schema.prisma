// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                                 Int                   @id @default(autoincrement())
  name                               String                @default("")
  email                              String                @unique @default("")
  password                           String
  role                               String
  isProtected                        Boolean               @default(false)
  from_LiveblogItem_createdBy        LiveblogItem[]        @relation("LiveblogItem_createdBy")
  from_LiveblogItem_updatedBy        LiveblogItem[]        @relation("LiveblogItem_updatedBy")
  from_Liveblog_createdBy            Liveblog[]            @relation("Liveblog_createdBy")
  from_Liveblog_updatedBy            Liveblog[]            @relation("Liveblog_updatedBy")
  from_Publisher_createdBy           Publisher[]           @relation("Publisher_createdBy")
  from_Publisher_updatedBy           Publisher[]           @relation("Publisher_updatedBy")
  from_AudioFile_createdBy           AudioFile[]           @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy           AudioFile[]           @relation("AudioFile_updatedBy")
  from_Video_createdBy               Video[]               @relation("Video_createdBy")
  from_Video_updatedBy               Video[]               @relation("Video_updatedBy")
  from_Photo_createdBy               Photo[]               @relation("Photo_createdBy")
  from_Photo_updatedBy               Photo[]               @relation("Photo_updatedBy")
  from_Tag_createdBy                 Tag[]                 @relation("Tag_createdBy")
  from_Tag_updatedBy                 Tag[]                 @relation("Tag_updatedBy")
  from_Form_createdBy                Form[]                @relation("Form_createdBy")
  from_Form_updatedBy                Form[]                @relation("Form_updatedBy")
  from_Field_createdBy               Field[]               @relation("Field_createdBy")
  from_Field_updatedBy               Field[]               @relation("Field_updatedBy")
  from_FieldOption_createdBy         FieldOption[]         @relation("FieldOption_createdBy")
  from_FieldOption_updatedBy         FieldOption[]         @relation("FieldOption_updatedBy")
  from_FormAnswer_createdBy          FormAnswer[]          @relation("FormAnswer_createdBy")
  from_FormAnswer_updatedBy          FormAnswer[]          @relation("FormAnswer_updatedBy")
  from_FormResult_createdBy          FormResult[]          @relation("FormResult_createdBy")
  from_FormResult_updatedBy          FormResult[]          @relation("FormResult_updatedBy")
  from_Condition_createdBy           Condition[]           @relation("Condition_createdBy")
  from_Condition_updatedBy           Condition[]           @relation("Condition_updatedBy")
  from_ConditionCollection_createdBy ConditionCollection[] @relation("ConditionCollection_createdBy")
  from_ConditionCollection_updatedBy ConditionCollection[] @relation("ConditionCollection_updatedBy")
  from_Question_createdBy            Question[]            @relation("Question_createdBy")
  from_Question_updatedBy            Question[]            @relation("Question_updatedBy")
  from_EmbedCode_createdBy           EmbedCode[]           @relation("EmbedCode_createdBy")
  from_EmbedCode_updatedBy           EmbedCode[]           @relation("EmbedCode_updatedBy")
  from_InlineIndex_createdBy         InlineIndex[]         @relation("InlineIndex_createdBy")
  from_InlineIndex_updatedBy         InlineIndex[]         @relation("InlineIndex_updatedBy")
  from_IndexItem_createdBy           IndexItem[]           @relation("IndexItem_createdBy")
  from_IndexItem_updatedBy           IndexItem[]           @relation("IndexItem_updatedBy")
  from_Karaoke_createdBy             Karaoke[]             @relation("Karaoke_createdBy")
  from_Karaoke_updatedBy             Karaoke[]             @relation("Karaoke_updatedBy")
  from_VideoPicker_createdBy         VideoPicker[]         @relation("VideoPicker_createdBy")
  from_VideoPicker_updatedBy         VideoPicker[]         @relation("VideoPicker_updatedBy")
  from_QAList_createdBy              QAList[]              @relation("QAList_createdBy")
  from_QAList_updatedBy              QAList[]              @relation("QAList_updatedBy")
  from_QAItem_createdBy              QAItem[]              @relation("QAItem_createdBy")
  from_QAItem_updatedBy              QAItem[]              @relation("QAItem_updatedBy")
  from_FeedbackCounter_createdBy     FeedbackCounter[]     @relation("FeedbackCounter_createdBy")
  from_FeedbackCounter_updatedBy     FeedbackCounter[]     @relation("FeedbackCounter_updatedBy")
  from_ThreeStoryPoint_createdBy     ThreeStoryPoint[]     @relation("ThreeStoryPoint_createdBy")
  from_ThreeStoryPoint_updatedBy     ThreeStoryPoint[]     @relation("ThreeStoryPoint_updatedBy")
  from_DualSlide_createdBy           DualSlide[]           @relation("DualSlide_createdBy")
  from_DualSlide_updatedBy           DualSlide[]           @relation("DualSlide_updatedBy")
  from_RandomTextSelector_createdBy  RandomTextSelector[]  @relation("RandomTextSelector_createdBy")
  from_RandomTextSelector_updatedBy  RandomTextSelector[]  @relation("RandomTextSelector_updatedBy")
  from_ComponentHelp_createdBy       ComponentHelp[]       @relation("ComponentHelp_createdBy")
  from_ComponentHelp_updatedBy       ComponentHelp[]       @relation("ComponentHelp_updatedBy")
  from_DroppingText_createdBy        DroppingText[]        @relation("DroppingText_createdBy")
  from_DroppingText_updatedBy        DroppingText[]        @relation("DroppingText_updatedBy")
  from_Theatre_createdBy             Theatre[]             @relation("Theatre_createdBy")
  from_Theatre_updatedBy             Theatre[]             @relation("Theatre_updatedBy")
  from_FullScene_createdBy           FullScene[]           @relation("FullScene_createdBy")
  from_FullScene_updatedBy           FullScene[]           @relation("FullScene_updatedBy")
}

model LiveblogItem {
  id                Int       @id @default(autoincrement())
  title             String    @default("")
  status            String?   @default("draft")
  publishTime       DateTime?
  displayDateString String?   @default("day")
  heroImage         Photo?    @relation("LiveblogItem_heroImage", fields: [heroImageId], references: [id])
  heroImageId       Int?      @map("heroImage")
  heroVideo         Video?    @relation("LiveblogItem_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId       Int?      @map("heroVideo")
  imageCaption      String    @default("")
  type              String?   @default("article")
  author            String    @default("")
  name              Json?
  boost             Boolean   @default(false)
  external          String    @default("")
  liveblog          Liveblog? @relation("LiveblogItem_liveblog", fields: [liveblogId], references: [id])
  liveblogId        Int?      @map("liveblog")
  tags              Tag[]     @relation("LiveblogItem_tags")
  apiData           Json?
  createdAt         DateTime?
  updatedAt         DateTime?
  createdBy         User?     @relation("LiveblogItem_createdBy", fields: [createdById], references: [id])
  createdById       Int?      @map("createdBy")
  updatedBy         User?     @relation("LiveblogItem_updatedBy", fields: [updatedById], references: [id])
  updatedById       Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([heroVideoId])
  @@index([liveblogId])
  @@index([createdById])
  @@index([updatedById])
}

model Liveblog {
  id              Int            @id @default(autoincrement())
  name            String         @default("")
  slug            String         @unique @default("")
  desc            String         @default("")
  hint            Json?          @default("{\"dividerConfig\":{\"rwd\":{\"mobile\":{\"year\":5,\"month\":6,\"day\":7},\"pc\":{\"year\":5,\"month\":6,\"day\":7}},\"bubbleLevelSizesInDivider\":{\"5\":[23,36,48,60,76],\"6\":[23,36,48,60,66],\"7\":[23,28,36,48,60]}},\"headerHeightConfig\":{\"rwd\":{\"mobile\":66,\"pc\":80},\"rwdBreakpoints\":[{\"minWidth\":0,\"name\":\"mobile\"},{\"minWidth\":568,\"name\":\"pc\"}]},\"noEventContent\":\"<span style=\\\"text-align: center; font-size: 14px; line-height: 1.5; color: #989898;\\\">點擊泡泡<br />或往下滑動</span>\"}")
  sort            String?        @default("asc")
  displayType     String?        @default("liveblog")
  maxMeasures     String?        @default("年")
  defaultMeasures String?        @default("year")
  heroImage       Photo?         @relation("Liveblog_heroImage", fields: [heroImageId], references: [id])
  heroImageId     Int?           @map("heroImage")
  heroVideo       Video?         @relation("Liveblog_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId     Int?           @map("heroVideo")
  active          Boolean        @default(true)
  archive         Boolean        @default(false)
  credit          String         @default("")
  css             String         @default("")
  liveblog_items  LiveblogItem[] @relation("LiveblogItem_liveblog")
  tags            Tag?           @relation("Liveblog_tags", fields: [tagsId], references: [id])
  tagsId          Int?           @map("tags")
  publisher       Publisher?     @relation("Liveblog_publisher", fields: [publisherId], references: [id])
  publisherId     Int?           @map("publisher")
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?          @relation("Liveblog_createdBy", fields: [createdById], references: [id])
  createdById     Int?           @map("createdBy")
  updatedBy       User?          @relation("Liveblog_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?           @map("updatedBy")

  @@index([heroImageId])
  @@index([heroVideoId])
  @@index([tagsId])
  @@index([publisherId])
  @@index([createdById])
  @@index([updatedById])
}

model Publisher {
  id          Int        @id @default(autoincrement())
  name        String     @default("")
  slug        String     @default("")
  intro       String     @default("")
  is_active   Boolean    @default(true)
  template    String     @default("")
  liveblog    Liveblog[] @relation("Liveblog_publisher")
  form        Form[]     @relation("Form_publisher")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?      @relation("Publisher_createdBy", fields: [createdById], references: [id])
  createdById Int?       @map("createdBy")
  updatedBy   User?      @relation("Publisher_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?       @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  coverPhoto    Photo?    @relation("AudioFile_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId  Int?      @map("coverPhoto")
  tags          String    @default("")
  meta          String    @default("")
  url           String    @default("")
  duration      String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model Video {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  youtubeUrl                  String         @default("")
  file_filesize               Int?
  file_filename               String?
  coverPhoto                  Photo?         @relation("Video_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId                Int?           @map("coverPhoto")
  description                 String         @default("")
  tags                        String         @default("")
  meta                        String         @default("")
  url                         String         @default("")
  duration                    String         @default("")
  createdAt                   DateTime?
  updatedAt                   DateTime?
  createdBy                   User?          @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById                 Int?           @map("createdBy")
  updatedBy                   User?          @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById                 Int?           @map("updatedBy")
  from_LiveblogItem_heroVideo LiveblogItem[] @relation("LiveblogItem_heroVideo")
  from_Liveblog_heroVideo     Liveblog[]     @relation("Liveblog_heroVideo")
  from_Form_heroVideo         Form[]         @relation("Form_heroVideo")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  imageFile_filesize          Int?
  imageFile_extension         String?
  imageFile_width             Int?
  imageFile_height            Int?
  imageFile_id                String?
  urlOriginal                 String         @default("")
  createdAt                   DateTime?
  updatedAt                   DateTime?
  createdBy                   User?          @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                 Int?           @map("createdBy")
  updatedBy                   User?          @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                 Int?           @map("updatedBy")
  from_LiveblogItem_heroImage LiveblogItem[] @relation("LiveblogItem_heroImage")
  from_Liveblog_heroImage     Liveblog[]     @relation("Liveblog_heroImage")
  from_AudioFile_coverPhoto   AudioFile[]    @relation("AudioFile_coverPhoto")
  from_Video_coverPhoto       Video[]        @relation("Video_coverPhoto")
  from_Form_heroImage         Form[]         @relation("Form_heroImage")
  from_Form_mobileImage       Form[]         @relation("Form_mobileImage")
  from_Field_heroImage        Field[]        @relation("Field_heroImage")
  from_FieldOption_heroImage  FieldOption[]  @relation("FieldOption_heroImage")
  from_FormAnswer_heroImage   FormAnswer[]   @relation("FormAnswer_heroImage")
  from_FormAnswer_mobileImage FormAnswer[]   @relation("FormAnswer_mobileImage")
  from_Question_heroImage     Question[]     @relation("Question_heroImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Tag {
  id              Int            @id @default(autoincrement())
  name            String         @unique @default("")
  liveblog        Liveblog[]     @relation("Liveblog_tags")
  liveblog_items  LiveblogItem[] @relation("LiveblogItem_tags")
  questions       Question[]     @relation("Question_tags")
  questionSection Question[]     @relation("Question_subject")
  form            Form[]         @relation("Form_tags")
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?          @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById     Int?           @map("createdBy")
  updatedBy       User?          @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?           @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Form {
  id                        Int                   @id @default(autoincrement())
  name                      String                @default("")
  slug                      String                @unique @default("")
  type                      FormTypeType
  content                   Json?
  heroImage                 Photo?                @relation("Form_heroImage", fields: [heroImageId], references: [id])
  heroImageId               Int?                  @map("heroImage")
  mobileImage               Photo?                @relation("Form_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId             Int?                  @map("mobileImage")
  heroImageLink             String                @default("")
  mobileImageLink           String                @default("")
  heroVideo                 Video?                @relation("Form_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId               Int?                  @map("heroVideo")
  heroVideoLink             String                @default("")
  active                    Boolean               @default(true)
  fields                    Field[]               @relation("Field_form")
  answers                   FormAnswer[]          @relation("FormAnswer_form")
  updateTimeDesc            String                @default("")
  updateTime                DateTime?
  questions                 Question[]            @relation("Form_questions")
  tags                      Tag[]                 @relation("Form_tags")
  conditions                ConditionCollection[] @relation("ConditionCollection_form")
  publisher                 Publisher?            @relation("Form_publisher", fields: [publisherId], references: [id])
  publisherId               Int?                  @map("publisher")
  result                    FormResult[]          @relation("FormResult_form")
  feedback                  String                @default("")
  apiData                   Json?
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?                 @relation("Form_createdBy", fields: [createdById], references: [id])
  createdById               Int?                  @map("createdBy")
  updatedBy                 User?                 @relation("Form_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?                  @map("updatedBy")
  from_EmbedCode_form       EmbedCode[]           @relation("EmbedCode_form")
  from_FeedbackCounter_form FeedbackCounter[]     @relation("FeedbackCounter_form")

  @@index([heroImageId])
  @@index([mobileImageId])
  @@index([heroVideoId])
  @@index([publisherId])
  @@index([createdById])
  @@index([updatedById])
}

model Field {
  id                  Int                   @id @default(autoincrement())
  name                String                @default("")
  type                FieldTypeType
  status              String?               @default("draft")
  heroImage           Photo?                @relation("Field_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?                  @map("heroImage")
  heroImageLink       String                @default("")
  content             Json?
  sortOrder           Int?
  form                Form?                 @relation("Field_form", fields: [formId], references: [id])
  formId              Int?                  @map("form")
  options             FieldOption[]         @relation("FieldOption_field")
  conditionCollection ConditionCollection[] @relation("ConditionCollection_next")
  condition           Condition[]           @relation("Condition_formField")
  apiData             Json?
  result              FormResult[]          @relation("FormResult_field")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("Field_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("Field_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")

  @@index([heroImageId])
  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model FieldOption {
  id            Int         @id @default(autoincrement())
  name          String      @default("")
  heroImage     Photo?      @relation("FieldOption_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?        @map("heroImage")
  heroImageLink String      @default("")
  content       String      @default("")
  value         String      @default("")
  sortOrder     Int?
  field         Field?      @relation("FieldOption_field", fields: [fieldId], references: [id])
  fieldId       Int?        @map("field")
  condition     Condition[] @relation("Condition_option")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?       @relation("FieldOption_createdBy", fields: [createdById], references: [id])
  createdById   Int?        @map("createdBy")
  updatedBy     User?       @relation("FieldOption_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?        @map("updatedBy")

  @@index([heroImageId])
  @@index([fieldId])
  @@index([createdById])
  @@index([updatedById])
}

model FormAnswer {
  id                  Int                   @id @default(autoincrement())
  name                String                @default("")
  heroImage           Photo?                @relation("FormAnswer_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?                  @map("heroImage")
  heroImageLink       String                @default("")
  mobileImage         Photo?                @relation("FormAnswer_mobileImage", fields: [mobileImageId], references: [id])
  mobileImageId       Int?                  @map("mobileImage")
  mobileHeroImageLink String                @default("")
  content             Json?
  form                Form?                 @relation("FormAnswer_form", fields: [formId], references: [id])
  formId              Int?                  @map("form")
  conditionCollection ConditionCollection[] @relation("ConditionCollection_answer")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("FormAnswer_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("FormAnswer_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")

  @@index([heroImageId])
  @@index([mobileImageId])
  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model FormResult {
  id           Int       @id @default(autoincrement())
  name         String    @default("")
  ip           String    @default("")
  result       String    @default("")
  responseTime DateTime?
  form         Form?     @relation("FormResult_form", fields: [formId], references: [id])
  formId       Int?      @map("form")
  field        Field?    @relation("FormResult_field", fields: [fieldId], references: [id])
  fieldId      Int?      @map("field")
  uri          String    @default("")
  hidden       Boolean   @default(false)
  createdAt    DateTime?
  updatedAt    DateTime?
  createdBy    User?     @relation("FormResult_createdBy", fields: [createdById], references: [id])
  createdById  Int?      @map("createdBy")
  updatedBy    User?     @relation("FormResult_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int?      @map("updatedBy")

  @@index([formId])
  @@index([fieldId])
  @@index([createdById])
  @@index([updatedById])
}

model Condition {
  id                  Int                   @id @default(autoincrement())
  title               String                @default("")
  formField           Field?                @relation("Condition_formField", fields: [formFieldId], references: [id])
  formFieldId         Int?                  @map("formField")
  compare             String
  option              FieldOption[]         @relation("Condition_option")
  conditionCollection ConditionCollection[] @relation("Condition_conditionCollection")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?                 @relation("Condition_createdBy", fields: [createdById], references: [id])
  createdById         Int?                  @map("createdBy")
  updatedBy           User?                 @relation("Condition_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?                  @map("updatedBy")

  @@index([formFieldId])
  @@index([createdById])
  @@index([updatedById])
}

model ConditionCollection {
  id          Int         @id @default(autoincrement())
  type        String?     @default("AND")
  order       Int
  condition   Condition[] @relation("Condition_conditionCollection")
  answer      FormAnswer? @relation("ConditionCollection_answer", fields: [answerId], references: [id])
  answerId    Int?        @map("answer")
  next        Field?      @relation("ConditionCollection_next", fields: [nextId], references: [id])
  nextId      Int?        @map("next")
  goOut       String      @default("")
  form        Form?       @relation("ConditionCollection_form", fields: [formId], references: [id])
  formId      Int?        @map("form")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?       @relation("ConditionCollection_createdBy", fields: [createdById], references: [id])
  createdById Int?        @map("createdBy")
  updatedBy   User?       @relation("ConditionCollection_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?        @map("updatedBy")

  @@index([answerId])
  @@index([nextId])
  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model Question {
  id          Int       @id @default(autoincrement())
  title       String    @unique @default("")
  status      String?   @default("draft")
  publishTime DateTime?
  heroImage   Photo?    @relation("Question_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  imageLink   String    @default("")
  author      String    @default("")
  content     Json?
  boost       Boolean   @default(false)
  subject     Tag?      @relation("Question_subject", fields: [subjectId], references: [id])
  subjectId   Int?      @map("subject")
  tags        Tag[]     @relation("Question_tags")
  form        Form[]    @relation("Form_questions")
  apiData     Json?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Question_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Question_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([subjectId])
  @@index([createdById])
  @@index([updatedById])
}

model EmbedCode {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  form        Form?     @relation("EmbedCode_form", fields: [formId], references: [id])
  formId      Int?      @map("form")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("EmbedCode_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("EmbedCode_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model InlineIndex {
  id          Int         @id @default(autoincrement())
  name        String      @default("")
  index       IndexItem[] @relation("IndexItem_index")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?       @relation("InlineIndex_createdBy", fields: [createdById], references: [id])
  createdById Int?        @map("createdBy")
  updatedBy   User?       @relation("InlineIndex_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?        @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model IndexItem {
  id                  Int           @id @default(autoincrement())
  name                String        @default("")
  slug                String        @default("")
  order               Int
  imageFile_filesize  Int?
  imageFile_extension String?
  imageFile_width     Int?
  imageFile_height    Int?
  imageFile_id        String?
  imageLink           String        @default("")
  color               String        @default("#fff")
  index               InlineIndex[] @relation("IndexItem_index")
  originCode          String        @default("")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?         @relation("IndexItem_createdBy", fields: [createdById], references: [id])
  createdById         Int?          @map("createdBy")
  updatedBy           User?         @relation("IndexItem_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?          @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Karaoke {
  id                  Int            @id @default(autoincrement())
  name                String         @default("")
  quote               String         @default("")
  audio_filesize      Int?
  audio_filename      String?
  imageFile_filesize  Int?
  imageFile_extension String?
  imageFile_width     Int?
  imageFile_height    Int?
  imageFile_id        String?
  audioLink           String         @default("")
  imageLink           String         @default("")
  muteHint            Boolean        @default(false)
  helper              ComponentHelp? @relation("Karaoke_helper", fields: [helperId], references: [id])
  helperId            Int?           @map("helper")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?          @relation("Karaoke_createdBy", fields: [createdById], references: [id])
  createdById         Int?           @map("createdBy")
  updatedBy           User?          @relation("Karaoke_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?           @map("updatedBy")

  @@index([helperId])
  @@index([createdById])
  @@index([updatedById])
}

model VideoPicker {
  id                 Int       @id @default(autoincrement())
  name               String    @default("")
  video1920_filesize Int?
  video1920_filename String?
  video1440_filesize Int?
  video1440_filename String?
  video1280_filesize Int?
  video1280_filename String?
  video960_filesize  Int?
  video960_filename  String?
  video720_filesize  Int?
  video720_filename  String?
  muteHint           Boolean   @default(false)
  voiceHint          String    @default("")
  voiceButton        String    @default("")
  hintMode           String?   @default("light")
  createdAt          DateTime?
  updatedAt          DateTime?
  createdBy          User?     @relation("VideoPicker_createdBy", fields: [createdById], references: [id])
  createdById        Int?      @map("createdBy")
  updatedBy          User?     @relation("VideoPicker_updatedBy", fields: [updatedById], references: [id])
  updatedById        Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model QAList {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  items       QAItem[]  @relation("QAList_items")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("QAList_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("QAList_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model QAItem {
  id                Int       @id @default(autoincrement())
  title             String    @default("")
  content           Json?
  sortOrder         Int?
  createdAt         DateTime?
  updatedAt         DateTime?
  createdBy         User?     @relation("QAItem_createdBy", fields: [createdById], references: [id])
  createdById       Int?      @map("createdBy")
  updatedBy         User?     @relation("QAItem_updatedBy", fields: [updatedById], references: [id])
  updatedById       Int?      @map("updatedBy")
  from_QAList_items QAList[]  @relation("QAList_items")

  @@index([createdById])
  @@index([updatedById])
}

model FeedbackCounter {
  id                 Int       @id @default(autoincrement())
  form               Form?     @relation("FeedbackCounter_form", fields: [formId], references: [id])
  formId             Int?      @map("form")
  name               String    @default("")
  uri                String    @default("")
  theme              String    @default("")
  shouldUseRecaptcha Boolean   @default(false)
  thumbUpLabel       String    @default("")
  thumbDownLabel     String    @default("")
  createdAt          DateTime?
  updatedAt          DateTime?
  createdBy          User?     @relation("FeedbackCounter_createdBy", fields: [createdById], references: [id])
  createdById        Int?      @map("createdBy")
  updatedBy          User?     @relation("FeedbackCounter_updatedBy", fields: [updatedById], references: [id])
  updatedById        Int?      @map("updatedBy")

  @@index([formId])
  @@index([createdById])
  @@index([updatedById])
}

model ThreeStoryPoint {
  id                    Int       @id @default(autoincrement())
  name                  String    @default("")
  model_filesize        Int?
  model_filename        String?
  desktopModel_filesize Int?
  desktopModel_filename String?
  lightModel_filesize   Int?
  lightModel_filename   String?
  captions              Json?     @default("[]")
  audios                Json?     @default("[{\"urls\":[],\"preload\":\"auto\"}]")
  cameraRig             Json?     @default("{\"pois\":[]}")
  debugMode             Boolean   @default(false)
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?     @relation("ThreeStoryPoint_createdBy", fields: [createdById], references: [id])
  createdById           Int?      @map("createdBy")
  updatedBy             User?     @relation("ThreeStoryPoint_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model DualSlide {
  id          Int            @id @default(autoincrement())
  name        String         @default("")
  slides      Json?          @default("[{\"content\":[\"\"],\"imgSrc\":\"\"}]")
  helper      ComponentHelp? @relation("DualSlide_helper", fields: [helperId], references: [id])
  helperId    Int?           @map("helper")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?          @relation("DualSlide_createdBy", fields: [createdById], references: [id])
  createdById Int?           @map("createdBy")
  updatedBy   User?          @relation("DualSlide_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?           @map("updatedBy")

  @@index([helperId])
  @@index([createdById])
  @@index([updatedById])
}

model RandomTextSelector {
  id                         Int            @id @default(autoincrement())
  name                       String         @default("")
  json                       Json?          @default("[\"001.json\"]")
  shiftLeft                  Boolean        @default(false)
  helper                     ComponentHelp? @relation("RandomTextSelector_helper", fields: [helperId], references: [id])
  helperId                   Int?           @map("helper")
  highlightDesktop_filesize  Int?
  highlightDesktop_extension String?
  highlightDesktop_width     Int?
  highlightDesktop_height    Int?
  highlightDesktop_id        String?
  highlightMobile_filesize   Int?
  highlightMobile_extension  String?
  highlightMobile_width      Int?
  highlightMobile_height     Int?
  highlightMobile_id         String?
  loadingIcon_filesize       Int?
  loadingIcon_extension      String?
  loadingIcon_width          Int?
  loadingIcon_height         Int?
  loadingIcon_id             String?
  button_filesize            Int?
  button_extension           String?
  button_width               Int?
  button_height              Int?
  button_id                  String?
  buttonLabel                String         @default("")
  backgroundColor            String         @default("#000")
  isDebugMode                Boolean        @default(false)
  createdAt                  DateTime?
  updatedAt                  DateTime?
  createdBy                  User?          @relation("RandomTextSelector_createdBy", fields: [createdById], references: [id])
  createdById                Int?           @map("createdBy")
  updatedBy                  User?          @relation("RandomTextSelector_updatedBy", fields: [updatedById], references: [id])
  updatedById                Int?           @map("updatedBy")

  @@index([helperId])
  @@index([createdById])
  @@index([updatedById])
}

model ComponentHelp {
  id                             Int                  @id @default(autoincrement())
  name                           String               @default("")
  desc                           String               @default("")
  relatedTopics                  String               @default("")
  createdAt                      DateTime?
  updatedAt                      DateTime?
  createdBy                      User?                @relation("ComponentHelp_createdBy", fields: [createdById], references: [id])
  createdById                    Int?                 @map("createdBy")
  updatedBy                      User?                @relation("ComponentHelp_updatedBy", fields: [updatedById], references: [id])
  updatedById                    Int?                 @map("updatedBy")
  from_Karaoke_helper            Karaoke[]            @relation("Karaoke_helper")
  from_DualSlide_helper          DualSlide[]          @relation("DualSlide_helper")
  from_RandomTextSelector_helper RandomTextSelector[] @relation("RandomTextSelector_helper")
  from_DroppingText_helper       DroppingText[]       @relation("DroppingText_helper")

  @@index([createdById])
  @@index([updatedById])
}

model DroppingText {
  id          Int            @id @default(autoincrement())
  name        String         @default("")
  textArr     Json?          @default("[\"這是\",\"Dropping Text\",\"套件\"]")
  shiftLeft   Boolean        @default(false)
  helper      ComponentHelp? @relation("DroppingText_helper", fields: [helperId], references: [id])
  helperId    Int?           @map("helper")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?          @relation("DroppingText_createdBy", fields: [createdById], references: [id])
  createdById Int?           @map("createdBy")
  updatedBy   User?          @relation("DroppingText_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?           @map("updatedBy")

  @@index([helperId])
  @@index([createdById])
  @@index([updatedById])
}

model Theatre {
  id                  Int       @id @default(autoincrement())
  name                String    @default("")
  displayMode         String?   @default("scroll")
  objectJson          Json?
  animationJson       Json?
  mobileWidth         Int?      @default(768)
  mobileObjectJson    Json?
  mobileAnimationJson Json?
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?     @relation("Theatre_createdBy", fields: [createdById], references: [id])
  createdById         Int?      @map("createdBy")
  updatedBy           User?     @relation("Theatre_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model FullScene {
  id                  Int       @id @default(autoincrement())
  name                String    @default("")
  desc                String    @default("")
  imageFile_filesize  Int?
  imageFile_extension String?
  imageFile_width     Int?
  imageFile_height    Int?
  imageFile_id        String?
  displayMode         String?   @default("container")
  hotspotJson         Json?
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?     @relation("FullScene_createdBy", fields: [createdById], references: [id])
  createdById         Int?      @map("createdBy")
  updatedBy           User?     @relation("FullScene_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

enum FormTypeType {
  qa
  form
  questionniare
  quiz
}

enum FieldTypeType {
  single
  multiple
  text
  checkbox
}
