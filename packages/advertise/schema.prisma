// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int      @id @default(autoincrement())
  name                  String   @default("")
  email                 String   @unique @default("")
  password              String
  role                  String
  isProtected           Boolean  @default(false)
  from_Photo_createdBy  Photo[]  @relation("Photo_createdBy")
  from_Photo_updatedBy  Photo[]  @relation("Photo_updatedBy")
  from_Video_createdBy  Video[]  @relation("Video_createdBy")
  from_Video_updatedBy  Video[]  @relation("Video_updatedBy")
  from_Member_createdBy Member[] @relation("Member_createdBy")
  from_Member_updatedBy Member[] @relation("Member_updatedBy")
  from_Order_createdBy  Order[]  @relation("Order_createdBy")
  from_Order_updatedBy  Order[]  @relation("Order_updatedBy")
  from_Pdf_createdBy    Pdf[]    @relation("Pdf_createdBy")
  from_Pdf_updatedBy    Pdf[]    @relation("Pdf_updatedBy")
}

model Photo {
  id                    Int       @id @default(autoincrement())
  name                  String    @default("")
  imageFile_filesize    Int?
  imageFile_extension   String?
  imageFile_width       Int?
  imageFile_height      Int?
  imageFile_id          String?
  file_filesize         Int?
  file_filename         String?
  urlOriginal           String    @default("")
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?     @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById           Int?      @map("createdBy")
  updatedBy             User?     @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?      @map("updatedBy")
  from_Video_coverPhoto Video[]   @relation("Video_coverPhoto")
  from_Order_image      Order[]   @relation("Order_image")
  from_Order_demoImage  Order[]   @relation("Order_demoImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Video {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  youtubeUrl    String    @default("")
  file_filesize Int?
  file_filename String?
  coverPhoto    Photo?    @relation("Video_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId  Int?      @map("coverPhoto")
  description   String    @default("")
  meta          String    @default("")
  duration      String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model Member {
  id          Int       @id @default(autoincrement())
  firebaseID  String    @unique @default("")
  email       String?   @unique
  state       String    @default("active")
  name        String?
  mobile      String?
  orders      Order[]   @relation("Order_member")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Member_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Member_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Order {
  id                      Int       @id @default(autoincrement())
  member                  Member?   @relation("Order_member", fields: [memberId], references: [id])
  memberId                Int?      @map("member")
  orderNumber             String    @unique @default("")
  name                    String    @default("")
  state                   String?   @default("paid")
  relatedOrder            Order[]   @relation("Order_relatedOrder")
  attachment              Pdf?      @relation("Order_attachment", fields: [attachmentId], references: [id])
  attachmentId            Int?      @map("attachment")
  paragraphOne            String    @default("")
  paragraphOneEditable    Boolean   @default(false)
  paragraphTwo            String    @default("")
  paragraphTwoEditable    Boolean   @default(false)
  image                   Photo?    @relation("Order_image", fields: [imageId], references: [id])
  imageId                 Int?      @map("image")
  imageEditable           Boolean   @default(false)
  demoImage               Photo[]   @relation("Order_demoImage")
  schedule                String    @default("")
  scheduleEditable        Boolean   @default(false)
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?     @relation("Order_createdBy", fields: [createdById], references: [id])
  createdById             Int?      @map("createdBy")
  updatedBy               User?     @relation("Order_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?      @map("updatedBy")
  from_Order_relatedOrder Order[]   @relation("Order_relatedOrder")

  @@index([memberId])
  @@index([attachmentId])
  @@index([imageId])
  @@index([createdById])
  @@index([updatedById])
}

model Pdf {
  id                    Int       @id @default(autoincrement())
  name                  String    @default("")
  description           String    @default("")
  file_filesize         Int?
  file_filename         String?
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?     @relation("Pdf_createdBy", fields: [createdById], references: [id])
  createdById           Int?      @map("createdBy")
  updatedBy             User?     @relation("Pdf_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?      @map("updatedBy")
  from_Order_attachment Order[]   @relation("Order_attachment")

  @@index([createdById])
  @@index([updatedById])
}
