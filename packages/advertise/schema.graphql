# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  resizedWebp: ResizedWebPImages
  file: FileFieldOutput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type ResizedWebPImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: FileFieldOutput
  coverPhoto: Photo
  description: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  meta: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  meta: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

type Member {
  id: ID!
  firebaseID: String
  email: String
  state: String
  name: String
  mobile: String
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  ordersCount(where: OrderWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MemberWhereUniqueInput {
  id: ID
  firebaseID: String
  email: String
}

input MemberWhereInput {
  AND: [MemberWhereInput!]
  OR: [MemberWhereInput!]
  NOT: [MemberWhereInput!]
  id: IDFilter
  firebaseID: StringFilter
  email: StringNullableFilter
  state: StringFilter
  name: StringNullableFilter
  mobile: StringNullableFilter
  orders: OrderManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input OrderManyRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

input MemberOrderByInput {
  id: OrderDirection
  firebaseID: OrderDirection
  email: OrderDirection
  state: OrderDirection
  name: OrderDirection
  mobile: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MemberUpdateInput {
  firebaseID: String
  email: String
  state: String
  name: String
  mobile: String
  orders: OrderRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input OrderRelateToManyForUpdateInput {
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

input MemberUpdateArgs {
  where: MemberWhereUniqueInput!
  data: MemberUpdateInput!
}

input MemberCreateInput {
  firebaseID: String
  email: String
  state: String
  name: String
  mobile: String
  orders: OrderRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input OrderRelateToManyForCreateInput {
  create: [OrderCreateInput!]
  connect: [OrderWhereUniqueInput!]
}

type Order {
  id: ID!
  member: Member
  orderNumber: String
  name: String
  state: String
  relatedOrder(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  relatedOrderCount(where: OrderWhereInput! = {}): Int
  attachment: Pdf
  paragraphOne: String
  paragraphOneEditable: Boolean
  paragraphTwo: String
  paragraphTwoEditable: Boolean
  image: Photo
  imageEditable: Boolean
  demoImage(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  demoImageCount(where: PhotoWhereInput! = {}): Int
  schedule: String
  scheduleEditable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input OrderWhereUniqueInput {
  id: ID
  orderNumber: String
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IDFilter
  member: MemberWhereInput
  orderNumber: StringFilter
  name: StringFilter
  state: StringNullableFilter
  relatedOrder: OrderManyRelationFilter
  attachment: PdfWhereInput
  paragraphOne: StringFilter
  paragraphOneEditable: BooleanFilter
  paragraphTwo: StringFilter
  paragraphTwoEditable: BooleanFilter
  image: PhotoWhereInput
  imageEditable: BooleanFilter
  demoImage: PhotoManyRelationFilter
  schedule: StringFilter
  scheduleEditable: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input OrderOrderByInput {
  id: OrderDirection
  orderNumber: OrderDirection
  name: OrderDirection
  state: OrderDirection
  paragraphOne: OrderDirection
  paragraphOneEditable: OrderDirection
  paragraphTwo: OrderDirection
  paragraphTwoEditable: OrderDirection
  imageEditable: OrderDirection
  schedule: OrderDirection
  scheduleEditable: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input OrderUpdateInput {
  member: MemberRelateToOneForUpdateInput
  orderNumber: String
  name: String
  state: String
  relatedOrder: OrderRelateToManyForUpdateInput
  attachment: PdfRelateToOneForUpdateInput
  paragraphOne: String
  paragraphOneEditable: Boolean
  paragraphTwo: String
  paragraphTwoEditable: Boolean
  image: PhotoRelateToOneForUpdateInput
  imageEditable: Boolean
  demoImage: PhotoRelateToManyForUpdateInput
  schedule: String
  scheduleEditable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MemberRelateToOneForUpdateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
  disconnect: Boolean
}

input PdfRelateToOneForUpdateInput {
  create: PdfCreateInput
  connect: PdfWhereUniqueInput
  disconnect: Boolean
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input OrderUpdateArgs {
  where: OrderWhereUniqueInput!
  data: OrderUpdateInput!
}

input OrderCreateInput {
  member: MemberRelateToOneForCreateInput
  orderNumber: String
  name: String
  state: String
  relatedOrder: OrderRelateToManyForCreateInput
  attachment: PdfRelateToOneForCreateInput
  paragraphOne: String
  paragraphOneEditable: Boolean
  paragraphTwo: String
  paragraphTwoEditable: Boolean
  image: PhotoRelateToOneForCreateInput
  imageEditable: Boolean
  demoImage: PhotoRelateToManyForCreateInput
  schedule: String
  scheduleEditable: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input MemberRelateToOneForCreateInput {
  create: MemberCreateInput
  connect: MemberWhereUniqueInput
}

input PdfRelateToOneForCreateInput {
  create: PdfCreateInput
  connect: PdfWhereUniqueInput
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

type Pdf {
  id: ID!
  name: String
  description: String
  file: FileFieldOutput
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PdfWhereUniqueInput {
  id: ID
}

input PdfWhereInput {
  AND: [PdfWhereInput!]
  OR: [PdfWhereInput!]
  NOT: [PdfWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PdfOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PdfUpdateInput {
  name: String
  description: String
  file: FileFieldInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PdfUpdateArgs {
  where: PdfWhereUniqueInput!
  data: PdfUpdateInput!
}

input PdfCreateInput {
  name: String
  description: String
  file: FileFieldInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createMember(data: MemberCreateInput!): Member
  createMembers(data: [MemberCreateInput!]!): [Member]
  updateMember(where: MemberWhereUniqueInput!, data: MemberUpdateInput!): Member
  updateMembers(data: [MemberUpdateArgs!]!): [Member]
  deleteMember(where: MemberWhereUniqueInput!): Member
  deleteMembers(where: [MemberWhereUniqueInput!]!): [Member]
  createOrder(data: OrderCreateInput!): Order
  createOrders(data: [OrderCreateInput!]!): [Order]
  updateOrder(where: OrderWhereUniqueInput!, data: OrderUpdateInput!): Order
  updateOrders(data: [OrderUpdateArgs!]!): [Order]
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteOrders(where: [OrderWhereUniqueInput!]!): [Order]
  createPdf(data: PdfCreateInput!): Pdf
  createPdfs(data: [PdfCreateInput!]!): [Pdf]
  updatePdf(where: PdfWhereUniqueInput!, data: PdfUpdateInput!): Pdf
  updatePdfs(data: [PdfUpdateArgs!]!): [Pdf]
  deletePdf(where: PdfWhereUniqueInput!): Pdf
  deletePdfs(where: [PdfWhereUniqueInput!]!): [Pdf]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  members(where: MemberWhereInput! = {}, orderBy: [MemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MemberWhereUniqueInput): [Member!]
  member(where: MemberWhereUniqueInput!): Member
  membersCount(where: MemberWhereInput! = {}): Int
  orders(where: OrderWhereInput! = {}, orderBy: [OrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrderWhereUniqueInput): [Order!]
  order(where: OrderWhereUniqueInput!): Order
  ordersCount(where: OrderWhereInput! = {}): Int
  pdfs(where: PdfWhereInput! = {}, orderBy: [PdfOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PdfWhereUniqueInput): [Pdf!]
  pdf(where: PdfWhereUniqueInput!): Pdf
  pdfsCount(where: PdfWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
