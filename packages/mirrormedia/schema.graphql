# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type AudioFile {
  id: ID!
  name: String
  file: FileFieldOutput
  urlOriginal: String
  heroImage: Photo
  content: JSON
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AudioFileWhereUniqueInput {
  id: ID
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  heroImage: PhotoWhereInput
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AudioFileUpdateInput {
  name: String
  file: FileFieldInput
  urlOriginal: String
  heroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  tags: TagRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: FileFieldInput
  urlOriginal: String
  heroImage: PhotoRelateToOneForCreateInput
  content: JSON
  tags: TagRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  slug: String
  order: Int
  state: String
  heroImage: Photo
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  isMemberOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  order: IntNullableFilter
  state: StringFilter
  heroImage: PhotoWhereInput
  sections: SectionManyRelationFilter
  posts: PostManyRelationFilter
  isMemberOnly: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SectionManyRelationFilter {
  every: SectionWhereInput
  some: SectionWhereInput
  none: SectionWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  order: OrderDirection
  state: OrderDirection
  isMemberOnly: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  slug: String
  order: Int
  state: String
  heroImage: PhotoRelateToOneForUpdateInput
  sections: SectionRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  isMemberOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToManyForUpdateInput {
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  slug: String
  order: Int
  state: String
  heroImage: PhotoRelateToOneForCreateInput
  sections: SectionRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  isMemberOnly: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToManyForCreateInput {
  create: [SectionCreateInput!]
  connect: [SectionWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Contact {
  id: ID!
  name: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ContactWhereUniqueInput {
  id: ID
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  id: IDFilter
  name: StringFilter
  content: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ContactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ContactUpdateInput {
  name: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ContactUpdateArgs {
  where: ContactWhereUniqueInput!
  data: ContactUpdateInput!
}

input ContactCreateInput {
  name: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type EditorChoice {
  id: ID!
  order: Int
  choices: Post
  state: String
  publishedDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EditorChoiceWhereUniqueInput {
  id: ID
  order: Int
}

input EditorChoiceWhereInput {
  AND: [EditorChoiceWhereInput!]
  OR: [EditorChoiceWhereInput!]
  NOT: [EditorChoiceWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  choices: PostWhereInput
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input EditorChoiceOrderByInput {
  id: OrderDirection
  order: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditorChoiceUpdateInput {
  order: Int
  choices: PostRelateToOneForUpdateInput
  state: String
  publishedDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input EditorChoiceUpdateArgs {
  where: EditorChoiceWhereUniqueInput!
  data: EditorChoiceUpdateInput!
}

input EditorChoiceCreateInput {
  order: Int
  choices: PostRelateToOneForCreateInput
  state: String
  publishedDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  slug: String
  state: String
  publishedDate: DateTime
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  eventType: String
  startDate: DateTime
  endDate: DateTime
  heroImage: Photo
  link: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input EventWhereUniqueInput {
  id: ID
  slug: String
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  sections: SectionManyRelationFilter
  eventType: StringNullableFilter
  startDate: DateTimeFilter
  endDate: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  link: StringFilter
  isFeatured: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  eventType: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  link: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EventUpdateInput {
  name: String
  slug: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForUpdateInput
  eventType: String
  startDate: DateTime
  endDate: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  link: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  slug: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForCreateInput
  eventType: String
  startDate: DateTime
  endDate: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  link: String
  isFeatured: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type External {
  id: ID!
  slug: String
  partner: Partner
  title: String
  state: String
  publishedDate: DateTime
  extend_byline: String
  thumb: String
  brief: String
  content: String
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ExternalWhereUniqueInput {
  id: ID
  slug: String
}

input ExternalWhereInput {
  AND: [ExternalWhereInput!]
  OR: [ExternalWhereInput!]
  NOT: [ExternalWhereInput!]
  id: IDFilter
  slug: StringFilter
  partner: PartnerWhereInput
  title: StringFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  extend_byline: StringFilter
  thumb: StringFilter
  brief: StringFilter
  content: StringFilter
  source: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ExternalOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  extend_byline: OrderDirection
  thumb: OrderDirection
  brief: OrderDirection
  content: OrderDirection
  source: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ExternalUpdateInput {
  slug: String
  partner: PartnerRelateToOneForUpdateInput
  title: String
  state: String
  publishedDate: DateTime
  extend_byline: String
  thumb: String
  brief: String
  content: String
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PartnerRelateToOneForUpdateInput {
  create: PartnerCreateInput
  connect: PartnerWhereUniqueInput
  disconnect: Boolean
}

input ExternalUpdateArgs {
  where: ExternalWhereUniqueInput!
  data: ExternalUpdateInput!
}

input ExternalCreateInput {
  slug: String
  partner: PartnerRelateToOneForCreateInput
  title: String
  state: String
  publishedDate: DateTime
  extend_byline: String
  thumb: String
  brief: String
  content: String
  source: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PartnerRelateToOneForCreateInput {
  create: PartnerCreateInput
  connect: PartnerWhereUniqueInput
}

type Header {
  id: ID!
  order: Int
  section: Section
  category: Category
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input HeaderWhereUniqueInput {
  id: ID
  order: Int
}

input HeaderWhereInput {
  AND: [HeaderWhereInput!]
  OR: [HeaderWhereInput!]
  NOT: [HeaderWhereInput!]
  id: IDFilter
  order: IntNullableFilter
  section: SectionWhereInput
  category: CategoryWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input HeaderOrderByInput {
  id: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input HeaderUpdateInput {
  order: Int
  section: SectionRelateToOneForUpdateInput
  category: CategoryRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input SectionRelateToOneForUpdateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  disconnect: Boolean
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input HeaderUpdateArgs {
  where: HeaderWhereUniqueInput!
  data: HeaderUpdateInput!
}

input HeaderCreateInput {
  order: Int
  section: SectionRelateToOneForCreateInput
  category: CategoryRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input SectionRelateToOneForCreateInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Magazine {
  id: ID!
  slug: String
  title: String
  pdfFile: FileFieldOutput
  urlOriginal: String
  coverPhoto: Photo
  type: String
  state: String
  publishedDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input MagazineWhereUniqueInput {
  id: ID
  slug: String
}

input MagazineWhereInput {
  AND: [MagazineWhereInput!]
  OR: [MagazineWhereInput!]
  NOT: [MagazineWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  urlOriginal: StringFilter
  coverPhoto: PhotoWhereInput
  type: StringNullableFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input MagazineOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  urlOriginal: OrderDirection
  type: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input MagazineUpdateInput {
  slug: String
  title: String
  pdfFile: FileFieldInput
  urlOriginal: String
  coverPhoto: PhotoRelateToOneForUpdateInput
  type: String
  state: String
  publishedDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input MagazineUpdateArgs {
  where: MagazineWhereUniqueInput!
  data: MagazineUpdateInput!
}

input MagazineCreateInput {
  slug: String
  title: String
  pdfFile: FileFieldInput
  urlOriginal: String
  coverPhoto: PhotoRelateToOneForCreateInput
  type: String
  state: String
  publishedDate: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Partner {
  id: ID!
  slug: String
  name: String
  website: String
  public: Boolean
  showOnIndex: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PartnerWhereUniqueInput {
  id: ID
  slug: String
}

input PartnerWhereInput {
  AND: [PartnerWhereInput!]
  OR: [PartnerWhereInput!]
  NOT: [PartnerWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  website: StringFilter
  public: BooleanFilter
  showOnIndex: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PartnerOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  website: OrderDirection
  public: OrderDirection
  showOnIndex: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PartnerUpdateInput {
  slug: String
  name: String
  website: String
  public: Boolean
  showOnIndex: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PartnerUpdateArgs {
  where: PartnerWhereUniqueInput!
  data: PartnerUpdateInput!
}

input PartnerCreateInput {
  slug: String
  name: String
  website: String
  public: Boolean
  showOnIndex: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  waterMark: Boolean
  resized: ResizedImages
  resizedWebp: ResizedWebPImages
  file: FileFieldOutput
  topicKeywords: String
  copyRight: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type ResizedWebPImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  waterMark: BooleanFilter
  topicKeywords: StringFilter
  copyRight: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  waterMark: OrderDirection
  topicKeywords: OrderDirection
  copyRight: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  waterMark: Boolean
  file: FileFieldInput
  topicKeywords: String
  copyRight: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  waterMark: Boolean
  file: FileFieldInput
  topicKeywords: String
  copyRight: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Post {
  id: ID!
  lockBy: User
  lockExpireAt: DateTime
  slug: String
  title: String
  state: String
  publishedDate: DateTime
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  manualOrderOfSections: JSON
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  manualOrderOfCategories: JSON
  writers(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  writersCount(where: ContactWhereInput! = {}): Int
  manualOrderOfWriters: JSON
  photographers(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  photographersCount(where: ContactWhereInput! = {}): Int
  camera_man(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  camera_manCount(where: ContactWhereInput! = {}): Int
  designers(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  designersCount(where: ContactWhereInput! = {}): Int
  engineers(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  engineersCount(where: ContactWhereInput! = {}): Int
  vocals(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  vocalsCount(where: ContactWhereInput! = {}): Int
  extend_byline: String
  heroVideo: Video
  heroImage: Photo
  heroCaption: String
  style: String
  brief: JSON
  trimmedContent: JSON
  content: JSON
  topics: Topic
  relateds(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedsCount(where: PostWhereInput! = {}): Int
  manualOrderOfRelateds: JSON
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  og_title: String
  og_description: String
  og_image: Photo
  related_videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  related_videosCount(where: VideoWhereInput! = {}): Int
  manualOrderOfRelatedVideos: JSON
  isMember: Boolean
  isFeatured: Boolean
  isAdvertised: Boolean
  hiddenAdvertised: Boolean
  isAdult: Boolean
  redirect: String
  adTrace: String
  css: String
  apiDataBrief: JSON
  apiData: JSON
  trimmedApiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
  writersInInputOrder: [Contact]
  sectionsInInputOrder: [Section]
  categoriesInInputOrder: [Category]
  relatedsInInputOrder: [Post]
  related_videosInInputOrder: [Video]
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  lockBy: UserWhereInput
  lockExpireAt: DateTimeNullableFilter
  slug: StringFilter
  title: StringFilter
  state: StringNullableFilter
  publishedDate: DateTimeFilter
  sections: SectionManyRelationFilter
  categories: CategoryManyRelationFilter
  writers: ContactManyRelationFilter
  photographers: ContactManyRelationFilter
  camera_man: ContactManyRelationFilter
  designers: ContactManyRelationFilter
  engineers: ContactManyRelationFilter
  vocals: ContactManyRelationFilter
  extend_byline: StringFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  style: StringNullableFilter
  topics: TopicWhereInput
  relateds: PostManyRelationFilter
  tags: TagManyRelationFilter
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  related_videos: VideoManyRelationFilter
  isMember: BooleanFilter
  isFeatured: BooleanFilter
  isAdvertised: BooleanFilter
  hiddenAdvertised: BooleanFilter
  isAdult: BooleanFilter
  redirect: StringFilter
  adTrace: StringFilter
  css: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input ContactManyRelationFilter {
  every: ContactWhereInput
  some: ContactWhereInput
  none: ContactWhereInput
}

input VideoManyRelationFilter {
  every: VideoWhereInput
  some: VideoWhereInput
  none: VideoWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  lockExpireAt: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  extend_byline: OrderDirection
  heroCaption: OrderDirection
  style: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  isMember: OrderDirection
  isFeatured: OrderDirection
  isAdvertised: OrderDirection
  hiddenAdvertised: OrderDirection
  isAdult: OrderDirection
  redirect: OrderDirection
  adTrace: OrderDirection
  css: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  lockBy: UserRelateToOneForUpdateInput
  lockExpireAt: DateTime
  slug: String
  title: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForUpdateInput
  manualOrderOfSections: JSON
  categories: CategoryRelateToManyForUpdateInput
  manualOrderOfCategories: JSON
  writers: ContactRelateToManyForUpdateInput
  manualOrderOfWriters: JSON
  photographers: ContactRelateToManyForUpdateInput
  camera_man: ContactRelateToManyForUpdateInput
  designers: ContactRelateToManyForUpdateInput
  engineers: ContactRelateToManyForUpdateInput
  vocals: ContactRelateToManyForUpdateInput
  extend_byline: String
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  style: String
  brief: JSON
  content: JSON
  topics: TopicRelateToOneForUpdateInput
  relateds: PostRelateToManyForUpdateInput
  manualOrderOfRelateds: JSON
  tags: TagRelateToManyForUpdateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  related_videos: VideoRelateToManyForUpdateInput
  manualOrderOfRelatedVideos: JSON
  isMember: Boolean
  isFeatured: Boolean
  isAdvertised: Boolean
  hiddenAdvertised: Boolean
  isAdult: Boolean
  redirect: String
  adTrace: String
  css: String
  apiDataBrief: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ContactRelateToManyForUpdateInput {
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input VideoRelateToOneForUpdateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input VideoRelateToManyForUpdateInput {
  disconnect: [VideoWhereUniqueInput!]
  set: [VideoWhereUniqueInput!]
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  lockBy: UserRelateToOneForCreateInput
  lockExpireAt: DateTime
  slug: String
  title: String
  state: String
  publishedDate: DateTime
  sections: SectionRelateToManyForCreateInput
  manualOrderOfSections: JSON
  categories: CategoryRelateToManyForCreateInput
  manualOrderOfCategories: JSON
  writers: ContactRelateToManyForCreateInput
  manualOrderOfWriters: JSON
  photographers: ContactRelateToManyForCreateInput
  camera_man: ContactRelateToManyForCreateInput
  designers: ContactRelateToManyForCreateInput
  engineers: ContactRelateToManyForCreateInput
  vocals: ContactRelateToManyForCreateInput
  extend_byline: String
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  style: String
  brief: JSON
  content: JSON
  topics: TopicRelateToOneForCreateInput
  relateds: PostRelateToManyForCreateInput
  manualOrderOfRelateds: JSON
  tags: TagRelateToManyForCreateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  related_videos: VideoRelateToManyForCreateInput
  manualOrderOfRelatedVideos: JSON
  isMember: Boolean
  isFeatured: Boolean
  isAdvertised: Boolean
  hiddenAdvertised: Boolean
  isAdult: Boolean
  redirect: String
  adTrace: String
  css: String
  apiDataBrief: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input ContactRelateToManyForCreateInput {
  create: [ContactCreateInput!]
  connect: [ContactWhereUniqueInput!]
}

input VideoRelateToOneForCreateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

input VideoRelateToManyForCreateInput {
  create: [VideoCreateInput!]
  connect: [VideoWhereUniqueInput!]
}

type Section {
  id: ID!
  name: String
  description: String
  slug: String
  order: Int
  state: String
  isFeatured: Boolean
  heroImage: Photo
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input SectionWhereUniqueInput {
  id: ID
  slug: String
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  NOT: [SectionWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  slug: StringFilter
  order: IntNullableFilter
  state: StringFilter
  isFeatured: BooleanFilter
  heroImage: PhotoWhereInput
  categories: CategoryManyRelationFilter
  posts: PostManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input SectionOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  slug: OrderDirection
  order: OrderDirection
  state: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SectionUpdateInput {
  name: String
  description: String
  slug: String
  order: Int
  state: String
  isFeatured: Boolean
  heroImage: PhotoRelateToOneForUpdateInput
  categories: CategoryRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input SectionUpdateArgs {
  where: SectionWhereUniqueInput!
  data: SectionUpdateInput!
}

input SectionCreateInput {
  name: String
  description: String
  slug: String
  order: Int
  state: String
  isFeatured: Boolean
  heroImage: PhotoRelateToOneForCreateInput
  categories: CategoryRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

type Tag {
  id: ID!
  slug: String
  name: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  slug: String
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  posts: PostManyRelationFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  slug: String
  name: String
  posts: PostRelateToManyForUpdateInput
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  slug: String
  name: String
  posts: PostRelateToManyForCreateInput
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Topic {
  id: ID!
  name: String
  slug: String
  sortOrder: Int
  state: String
  brief: JSON
  heroImage: Photo
  leading: String
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  sectionsCount(where: SectionWhereInput! = {}): Int
  og_title: String
  og_description: String
  og_image: Photo
  isFeatured: Boolean
  title_style: String
  type: String
  style: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  slideshow_images(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  slideshow_imagesCount(where: PhotoWhereInput! = {}): Int
  manualOrderOfSlideshowImages: JSON
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  javascript: String
  dfp: String
  mobile_dfp: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
  slideshow_imagesInInputOrder: [Photo]
}

input TopicWhereUniqueInput {
  id: ID
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  sortOrder: IntNullableFilter
  state: StringNullableFilter
  heroImage: PhotoWhereInput
  leading: StringNullableFilter
  sections: SectionManyRelationFilter
  og_title: StringFilter
  og_description: StringFilter
  og_image: PhotoWhereInput
  isFeatured: BooleanFilter
  title_style: StringNullableFilter
  type: StringNullableFilter
  style: StringFilter
  tags: TagManyRelationFilter
  slideshow_images: PhotoManyRelationFilter
  posts: PostManyRelationFilter
  javascript: StringFilter
  dfp: StringFilter
  mobile_dfp: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  leading: OrderDirection
  og_title: OrderDirection
  og_description: OrderDirection
  isFeatured: OrderDirection
  title_style: OrderDirection
  type: OrderDirection
  style: OrderDirection
  javascript: OrderDirection
  dfp: OrderDirection
  mobile_dfp: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicUpdateInput {
  name: String
  slug: String
  sortOrder: Int
  state: String
  brief: JSON
  heroImage: PhotoRelateToOneForUpdateInput
  leading: String
  sections: SectionRelateToManyForUpdateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  title_style: String
  type: String
  style: String
  tags: TagRelateToManyForUpdateInput
  slideshow_images: PhotoRelateToManyForUpdateInput
  manualOrderOfSlideshowImages: JSON
  posts: PostRelateToManyForUpdateInput
  javascript: String
  dfp: String
  mobile_dfp: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  name: String
  slug: String
  sortOrder: Int
  state: String
  brief: JSON
  heroImage: PhotoRelateToOneForCreateInput
  leading: String
  sections: SectionRelateToManyForCreateInput
  og_title: String
  og_description: String
  og_image: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  title_style: String
  type: String
  style: String
  tags: TagRelateToManyForCreateInput
  slideshow_images: PhotoRelateToManyForCreateInput
  manualOrderOfSlideshowImages: JSON
  posts: PostRelateToManyForCreateInput
  javascript: String
  dfp: String
  mobile_dfp: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type Video {
  id: ID!
  name: String
  file: FileFieldOutput
  urlOriginal: String
  content: JSON
  heroImage: Photo
  isFeed: Boolean
  related_posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  related_postsCount(where: PostWhereInput! = {}): Int
  manualOrderOfRelatedPosts: JSON
  state: String
  publishedDate: DateTime
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
  related_postsInInputOrder: [Post]
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  urlOriginal: StringFilter
  heroImage: PhotoWhereInput
  isFeed: BooleanFilter
  related_posts: PostManyRelationFilter
  state: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  tags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  isFeed: OrderDirection
  state: OrderDirection
  publishedDate: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  file: FileFieldInput
  urlOriginal: String
  content: JSON
  heroImage: PhotoRelateToOneForUpdateInput
  isFeed: Boolean
  related_posts: PostRelateToManyForUpdateInput
  manualOrderOfRelatedPosts: JSON
  state: String
  publishedDate: DateTime
  tags: TagRelateToManyForUpdateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  file: FileFieldInput
  urlOriginal: String
  content: JSON
  heroImage: PhotoRelateToOneForCreateInput
  isFeed: Boolean
  related_posts: PostRelateToManyForCreateInput
  manualOrderOfRelatedPosts: JSON
  state: String
  publishedDate: DateTime
  tags: TagRelateToManyForCreateInput
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(where: AudioFileWhereUniqueInput!, data: AudioFileUpdateInput!): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createContact(data: ContactCreateInput!): Contact
  createContacts(data: [ContactCreateInput!]!): [Contact]
  updateContact(where: ContactWhereUniqueInput!, data: ContactUpdateInput!): Contact
  updateContacts(data: [ContactUpdateArgs!]!): [Contact]
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteContacts(where: [ContactWhereUniqueInput!]!): [Contact]
  createEditorChoice(data: EditorChoiceCreateInput!): EditorChoice
  createEditorChoices(data: [EditorChoiceCreateInput!]!): [EditorChoice]
  updateEditorChoice(where: EditorChoiceWhereUniqueInput!, data: EditorChoiceUpdateInput!): EditorChoice
  updateEditorChoices(data: [EditorChoiceUpdateArgs!]!): [EditorChoice]
  deleteEditorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  deleteEditorChoices(where: [EditorChoiceWhereUniqueInput!]!): [EditorChoice]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createExternal(data: ExternalCreateInput!): External
  createExternals(data: [ExternalCreateInput!]!): [External]
  updateExternal(where: ExternalWhereUniqueInput!, data: ExternalUpdateInput!): External
  updateExternals(data: [ExternalUpdateArgs!]!): [External]
  deleteExternal(where: ExternalWhereUniqueInput!): External
  deleteExternals(where: [ExternalWhereUniqueInput!]!): [External]
  createHeader(data: HeaderCreateInput!): Header
  createHeaders(data: [HeaderCreateInput!]!): [Header]
  updateHeader(where: HeaderWhereUniqueInput!, data: HeaderUpdateInput!): Header
  updateHeaders(data: [HeaderUpdateArgs!]!): [Header]
  deleteHeader(where: HeaderWhereUniqueInput!): Header
  deleteHeaders(where: [HeaderWhereUniqueInput!]!): [Header]
  createMagazine(data: MagazineCreateInput!): Magazine
  createMagazines(data: [MagazineCreateInput!]!): [Magazine]
  updateMagazine(where: MagazineWhereUniqueInput!, data: MagazineUpdateInput!): Magazine
  updateMagazines(data: [MagazineUpdateArgs!]!): [Magazine]
  deleteMagazine(where: MagazineWhereUniqueInput!): Magazine
  deleteMagazines(where: [MagazineWhereUniqueInput!]!): [Magazine]
  createPartner(data: PartnerCreateInput!): Partner
  createPartners(data: [PartnerCreateInput!]!): [Partner]
  updatePartner(where: PartnerWhereUniqueInput!, data: PartnerUpdateInput!): Partner
  updatePartners(data: [PartnerUpdateArgs!]!): [Partner]
  deletePartner(where: PartnerWhereUniqueInput!): Partner
  deletePartners(where: [PartnerWhereUniqueInput!]!): [Partner]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createSection(data: SectionCreateInput!): Section
  createSections(data: [SectionCreateInput!]!): [Section]
  updateSection(where: SectionWhereUniqueInput!, data: SectionUpdateInput!): Section
  updateSections(data: [SectionUpdateArgs!]!): [Section]
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSections(where: [SectionWhereUniqueInput!]!): [Section]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  audioFiles(where: AudioFileWhereInput! = {}, orderBy: [AudioFileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AudioFileWhereUniqueInput): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  contacts(where: ContactWhereInput! = {}, orderBy: [ContactOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ContactWhereUniqueInput): [Contact!]
  contact(where: ContactWhereUniqueInput!): Contact
  contactsCount(where: ContactWhereInput! = {}): Int
  editorChoices(where: EditorChoiceWhereInput! = {}, orderBy: [EditorChoiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditorChoiceWhereUniqueInput): [EditorChoice!]
  editorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  editorChoicesCount(where: EditorChoiceWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EventWhereUniqueInput): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  externals(where: ExternalWhereInput! = {}, orderBy: [ExternalOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ExternalWhereUniqueInput): [External!]
  external(where: ExternalWhereUniqueInput!): External
  externalsCount(where: ExternalWhereInput! = {}): Int
  headers(where: HeaderWhereInput! = {}, orderBy: [HeaderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: HeaderWhereUniqueInput): [Header!]
  header(where: HeaderWhereUniqueInput!): Header
  headersCount(where: HeaderWhereInput! = {}): Int
  magazines(where: MagazineWhereInput! = {}, orderBy: [MagazineOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MagazineWhereUniqueInput): [Magazine!]
  magazine(where: MagazineWhereUniqueInput!): Magazine
  magazinesCount(where: MagazineWhereInput! = {}): Int
  partners(where: PartnerWhereInput! = {}, orderBy: [PartnerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartnerWhereUniqueInput): [Partner!]
  partner(where: PartnerWhereUniqueInput!): Partner
  partnersCount(where: PartnerWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  sections(where: SectionWhereInput! = {}, orderBy: [SectionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SectionWhereUniqueInput): [Section!]
  section(where: SectionWhereUniqueInput!): Section
  sectionsCount(where: SectionWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topic(where: TopicWhereUniqueInput!): Topic
  topicsCount(where: TopicWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
