// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  urlOriginal   String    @default("")
  heroImage     Photo?    @relation("AudioFile_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  content       Json?
  tags          Tag[]     @relation("AudioFile_tags")
  apiData       Json?
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id                   Int       @id @default(autoincrement())
  name                 String    @unique @default("")
  slug                 String    @unique @default("")
  order                Int?
  state                String    @default("active")
  heroImage            Photo?    @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId          Int?      @map("heroImage")
  sections             Section[] @relation("Category_sections")
  posts                Post[]    @relation("Category_posts")
  isMemberOnly         Boolean   @default(false)
  createdAt            DateTime?
  updatedAt            DateTime?
  createdBy            User?     @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById          Int?      @map("createdBy")
  updatedBy            User?     @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById          Int?      @map("updatedBy")
  from_Header_category Header[]  @relation("Header_category")

  @@index([state])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Contact {
  id                      Int       @id @default(autoincrement())
  name                    String    @default("")
  content                 String    @default("")
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?     @relation("Contact_createdBy", fields: [createdById], references: [id])
  createdById             Int?      @map("createdBy")
  updatedBy               User?     @relation("Contact_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?      @map("updatedBy")
  from_Post_writers       Post[]    @relation("Post_writers")
  from_Post_photographers Post[]    @relation("Post_photographers")
  from_Post_camera_man    Post[]    @relation("Post_camera_man")
  from_Post_designers     Post[]    @relation("Post_designers")
  from_Post_engineers     Post[]    @relation("Post_engineers")
  from_Post_vocals        Post[]    @relation("Post_vocals")

  @@index([name])
  @@index([createdById])
  @@index([updatedById])
}

model EditorChoice {
  id            Int       @id @default(autoincrement())
  order         Int?      @unique
  choices       Post?     @relation("EditorChoice_choices", fields: [choicesId], references: [id])
  choicesId     Int?      @map("choices")
  state         String?   @default("draft")
  publishedDate DateTime?
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([choicesId])
  @@index([state])
  @@index([publishedDate])
  @@index([createdById])
  @@index([updatedById])
}

model Event {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  slug          String    @unique @default("")
  state         String?   @default("draft")
  publishedDate DateTime?
  sections      Section[] @relation("Event_sections")
  eventType     String?
  startDate     DateTime
  endDate       DateTime?
  heroImage     Photo?    @relation("Event_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  link          String    @default("")
  isFeatured    Boolean   @default(false)
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Event_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Event_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([name])
  @@index([state])
  @@index([publishedDate])
  @@index([eventType])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model External {
  id                  Int       @id @default(autoincrement())
  slug                String    @unique @default("")
  partner             Partner?  @relation("External_partner", fields: [partnerId], references: [id])
  partnerId           Int?      @map("partner")
  title               String    @default("")
  state               String?   @default("draft")
  publishedDate       DateTime?
  publishedDateString String    @default("")
  extend_byline       String    @default("")
  thumb               String    @default("")
  brief               String    @default("")
  content             String    @default("")
  source              String    @default("")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?     @relation("External_createdBy", fields: [createdById], references: [id])
  createdById         Int?      @map("createdBy")
  updatedBy           User?     @relation("External_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?      @map("updatedBy")

  @@index([partnerId])
  @@index([state])
  @@index([publishedDate])
  @@index([createdById])
  @@index([updatedById])
}

model Header {
  id          Int       @id @default(autoincrement())
  order       Int?      @unique
  section     Section?  @relation("Header_section", fields: [sectionId], references: [id])
  sectionId   Int?      @map("section")
  category    Category? @relation("Header_category", fields: [categoryId], references: [id])
  categoryId  Int?      @map("category")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Header_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Header_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([sectionId])
  @@index([categoryId])
  @@index([createdById])
  @@index([updatedById])
}

model Magazine {
  id               Int       @id @default(autoincrement())
  slug             String    @unique @default("")
  title            String    @default("")
  pdfFile_filesize Int?
  pdfFile_filename String?
  urlOriginal      String    @default("")
  coverPhoto       Photo?    @relation("Magazine_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId     Int?      @map("coverPhoto")
  type             String?   @default("weekly")
  state            String?   @default("draft")
  publishedDate    DateTime?
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?     @relation("Magazine_createdBy", fields: [createdById], references: [id])
  createdById      Int?      @map("createdBy")
  updatedBy        User?     @relation("Magazine_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?      @map("updatedBy")

  @@index([coverPhotoId])
  @@index([type])
  @@index([state])
  @@index([publishedDate])
  @@index([createdById])
  @@index([updatedById])
}

model Partner {
  id                    Int        @id @default(autoincrement())
  slug                  String     @unique @default("")
  name                  String     @default("")
  website               String     @default("")
  public                Boolean    @default(true)
  showOnIndex           Boolean    @default(true)
  createdAt             DateTime?
  updatedAt             DateTime?
  createdBy             User?      @relation("Partner_createdBy", fields: [createdById], references: [id])
  createdById           Int?       @map("createdBy")
  updatedBy             User?      @relation("Partner_updatedBy", fields: [updatedById], references: [id])
  updatedById           Int?       @map("updatedBy")
  from_External_partner External[] @relation("External_partner")

  @@index([name])
  @@index([website])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                          Int         @id @default(autoincrement())
  name                        String      @default("")
  imageFile_filesize          Int?
  imageFile_extension         String?
  imageFile_width             Int?
  imageFile_height            Int?
  imageFile_id                String?
  waterMark                   Boolean     @default(false)
  file_filesize               Int?
  file_filename               String?
  topicKeywords               String      @default("")
  copyRight                   Boolean     @default(false)
  createdAt                   DateTime?
  updatedAt                   DateTime?
  createdBy                   User?       @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                 Int?        @map("createdBy")
  updatedBy                   User?       @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                 Int?        @map("updatedBy")
  from_AudioFile_heroImage    AudioFile[] @relation("AudioFile_heroImage")
  from_Category_heroImage     Category[]  @relation("Category_heroImage")
  from_Event_heroImage        Event[]     @relation("Event_heroImage")
  from_Magazine_coverPhoto    Magazine[]  @relation("Magazine_coverPhoto")
  from_Post_heroImage         Post[]      @relation("Post_heroImage")
  from_Post_og_image          Post[]      @relation("Post_og_image")
  from_Section_heroImage      Section[]   @relation("Section_heroImage")
  from_Topic_heroImage        Topic[]     @relation("Topic_heroImage")
  from_Topic_og_image         Topic[]     @relation("Topic_og_image")
  from_Topic_slideshow_images Topic[]     @relation("Topic_slideshow_images")
  from_Video_heroImage        Video[]     @relation("Video_heroImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Post {
  id                         Int            @id @default(autoincrement())
  lockBy                     User?          @relation("Post_lockBy", fields: [lockById], references: [id])
  lockById                   Int?           @map("lockBy")
  lockExpireAt               DateTime?
  slug                       String         @unique @default("")
  title                      String         @default("")
  subtitle                   String         @default("")
  state                      String?        @default("draft")
  publishedDate              DateTime       @default(now())
  publishedDateString        String         @default("")
  updateTimeStamp            Boolean        @default(false)
  sections                   Section[]      @relation("Post_sections")
  manualOrderOfSections      Json?
  categories                 Category[]     @relation("Category_posts")
  manualOrderOfCategories    Json?
  writers                    Contact[]      @relation("Post_writers")
  manualOrderOfWriters       Json?
  photographers              Contact[]      @relation("Post_photographers")
  camera_man                 Contact[]      @relation("Post_camera_man")
  designers                  Contact[]      @relation("Post_designers")
  engineers                  Contact[]      @relation("Post_engineers")
  vocals                     Contact[]      @relation("Post_vocals")
  extend_byline              String         @default("")
  heroVideo                  Video?         @relation("Post_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId                Int?           @map("heroVideo")
  heroImage                  Photo?         @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                Int?           @map("heroImage")
  heroCaption                String         @default("")
  style                      String?        @default("article")
  brief                      Json?
  content                    Json?
  isMember                   Boolean        @default(false)
  topics                     Topic?         @relation("Post_topics", fields: [topicsId], references: [id])
  topicsId                   Int?           @map("topics")
  relateds                   Post[]         @relation("Post_relateds")
  manualOrderOfRelateds      Json?
  tags                       Tag[]          @relation("Post_tags")
  og_title                   String         @default("")
  og_description             String         @default("")
  og_image                   Photo?         @relation("Post_og_image", fields: [og_imageId], references: [id])
  og_imageId                 Int?           @map("og_image")
  related_videos             Video[]        @relation("Post_related_videos")
  manualOrderOfRelatedVideos Json?
  isFeatured                 Boolean        @default(false)
  isAdvertised               Boolean        @default(false)
  hiddenAdvertised           Boolean        @default(false)
  isAdult                    Boolean        @default(false)
  redirect                   String         @default("")
  adTrace                    String         @default("")
  css                        String         @default("")
  apiDataBrief               Json?
  apiData                    Json?
  createdAt                  DateTime?
  updatedAt                  DateTime?
  createdBy                  User?          @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                Int?           @map("createdBy")
  updatedBy                  User?          @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                Int?           @map("updatedBy")
  from_EditorChoice_choices  EditorChoice[] @relation("EditorChoice_choices")
  from_Post_relateds         Post[]         @relation("Post_relateds")

  @@index([lockById])
  @@index([lockExpireAt])
  @@index([state])
  @@index([publishedDate])
  @@index([heroVideoId])
  @@index([heroImageId])
  @@index([style])
  @@index([topicsId])
  @@index([og_imageId])
  @@index([createdById])
  @@index([updatedById])
}

model Section {
  id                  Int        @id @default(autoincrement())
  name                String     @unique @default("")
  description         String     @default("")
  slug                String     @unique @default("")
  order               Int?
  state               String     @default("active")
  isFeatured          Boolean    @default(false)
  heroImage           Photo?     @relation("Section_heroImage", fields: [heroImageId], references: [id])
  heroImageId         Int?       @map("heroImage")
  categories          Category[] @relation("Category_sections")
  posts               Post[]     @relation("Post_sections")
  topics              Topic[]    @relation("Section_topics")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?      @relation("Section_createdBy", fields: [createdById], references: [id])
  createdById         Int?       @map("createdBy")
  updatedBy           User?      @relation("Section_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?       @map("updatedBy")
  from_Event_sections Event[]    @relation("Event_sections")
  from_Header_section Header[]   @relation("Header_section")

  @@index([state])
  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id                  Int         @id @default(autoincrement())
  slug                String      @unique @default("")
  name                String      @unique @default("")
  posts               Post[]      @relation("Post_tags")
  topics              Topic[]     @relation("Tag_topics")
  createdAt           DateTime?
  updatedAt           DateTime?
  createdBy           User?       @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById         Int?        @map("createdBy")
  updatedBy           User?       @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById         Int?        @map("updatedBy")
  from_AudioFile_tags AudioFile[] @relation("AudioFile_tags")
  from_Video_tags     Video[]     @relation("Video_tags")

  @@index([createdById])
  @@index([updatedById])
}

model Topic {
  id                           Int       @id @default(autoincrement())
  name                         String    @unique @default("")
  slug                         String    @unique @default("")
  sortOrder                    Int?
  state                        String?   @default("draft")
  brief                        Json?
  heroImage                    Photo?    @relation("Topic_heroImage", fields: [heroImageId], references: [id])
  heroImageId                  Int?      @map("heroImage")
  heroUrl                      String?
  leading                      String?
  sections                     Section[] @relation("Section_topics")
  og_title                     String    @default("")
  og_description               String    @default("")
  og_image                     Photo?    @relation("Topic_og_image", fields: [og_imageId], references: [id])
  og_imageId                   Int?      @map("og_image")
  isFeatured                   Boolean   @default(false)
  title_style                  String?   @default("feature")
  type                         String?   @default("list")
  style                        String    @default("")
  tags                         Tag[]     @relation("Tag_topics")
  slideshow_images             Photo[]   @relation("Topic_slideshow_images")
  manualOrderOfSlideshowImages Json?
  posts                        Post[]    @relation("Post_topics")
  javascript                   String    @default("")
  dfp                          String    @default("")
  mobile_dfp                   String    @default("")
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?     @relation("Topic_createdBy", fields: [createdById], references: [id])
  createdById                  Int?      @map("createdBy")
  updatedBy                    User?     @relation("Topic_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?      @map("updatedBy")

  @@index([state])
  @@index([heroImageId])
  @@index([leading])
  @@index([og_imageId])
  @@index([title_style])
  @@index([type])
  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                          Int            @id @default(autoincrement())
  name                        String         @default("")
  email                       String         @unique @default("")
  password                    String
  role                        String
  isProtected                 Boolean        @default(false)
  from_AudioFile_createdBy    AudioFile[]    @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy    AudioFile[]    @relation("AudioFile_updatedBy")
  from_Category_createdBy     Category[]     @relation("Category_createdBy")
  from_Category_updatedBy     Category[]     @relation("Category_updatedBy")
  from_Contact_createdBy      Contact[]      @relation("Contact_createdBy")
  from_Contact_updatedBy      Contact[]      @relation("Contact_updatedBy")
  from_EditorChoice_createdBy EditorChoice[] @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy EditorChoice[] @relation("EditorChoice_updatedBy")
  from_Event_createdBy        Event[]        @relation("Event_createdBy")
  from_Event_updatedBy        Event[]        @relation("Event_updatedBy")
  from_External_createdBy     External[]     @relation("External_createdBy")
  from_External_updatedBy     External[]     @relation("External_updatedBy")
  from_Header_createdBy       Header[]       @relation("Header_createdBy")
  from_Header_updatedBy       Header[]       @relation("Header_updatedBy")
  from_Magazine_createdBy     Magazine[]     @relation("Magazine_createdBy")
  from_Magazine_updatedBy     Magazine[]     @relation("Magazine_updatedBy")
  from_Partner_createdBy      Partner[]      @relation("Partner_createdBy")
  from_Partner_updatedBy      Partner[]      @relation("Partner_updatedBy")
  from_Photo_createdBy        Photo[]        @relation("Photo_createdBy")
  from_Photo_updatedBy        Photo[]        @relation("Photo_updatedBy")
  from_Post_lockBy            Post[]         @relation("Post_lockBy")
  from_Post_createdBy         Post[]         @relation("Post_createdBy")
  from_Post_updatedBy         Post[]         @relation("Post_updatedBy")
  from_Section_createdBy      Section[]      @relation("Section_createdBy")
  from_Section_updatedBy      Section[]      @relation("Section_updatedBy")
  from_Tag_createdBy          Tag[]          @relation("Tag_createdBy")
  from_Tag_updatedBy          Tag[]          @relation("Tag_updatedBy")
  from_Topic_createdBy        Topic[]        @relation("Topic_createdBy")
  from_Topic_updatedBy        Topic[]        @relation("Topic_updatedBy")
  from_Video_createdBy        Video[]        @relation("Video_createdBy")
  from_Video_updatedBy        Video[]        @relation("Video_updatedBy")
}

model Video {
  id                        Int       @id @default(autoincrement())
  name                      String    @default("")
  file_filesize             Int?
  file_filename             String?
  urlOriginal               String    @default("")
  content                   Json?
  heroImage                 Photo?    @relation("Video_heroImage", fields: [heroImageId], references: [id])
  heroImageId               Int?      @map("heroImage")
  isFeed                    Boolean   @default(false)
  related_posts             Post[]    @relation("Post_related_videos")
  manualOrderOfRelatedPosts Json?
  state                     String?   @default("draft")
  publishedDate             DateTime?
  tags                      Tag[]     @relation("Video_tags")
  apiData                   Json?
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?     @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById               Int?      @map("createdBy")
  updatedBy                 User?     @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?      @map("updatedBy")
  from_Post_heroVideo       Post[]    @relation("Post_heroVideo")

  @@index([heroImageId])
  @@index([state])
  @@index([publishedDate])
  @@index([createdById])
  @@index([updatedById])
}
