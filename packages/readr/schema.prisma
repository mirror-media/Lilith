// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model EditorChoice {
  id          Int       @id @default(autoincrement())
  sortOrder   Int?
  name        String    @default("")
  description String    @default("")
  choices     Post?     @relation("EditorChoice_choices", fields: [choicesId], references: [id])
  choicesId   Int?      @map("choices")
  link        String    @default("")
  heroImage   Photo?    @relation("EditorChoice_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  state       String?   @default("draft")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("EditorChoice_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("EditorChoice_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([choicesId])
  @@index([heroImageId])
  @@index([state])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                               Int             @id @default(autoincrement())
  name                             String          @default("")
  imageFile_filesize               Int?
  imageFile_extension              String?
  imageFile_width                  Int?
  imageFile_height                 Int?
  imageFile_id                     String?
  file_filesize                    Int?
  file_filename                    String?
  tags                             Tag[]           @relation("Photo_tags")
  urlOriginal                      String          @default("")
  createdAt                        DateTime?
  updatedAt                        DateTime?
  createdBy                        User?           @relation("Photo_createdBy", fields: [createdById], references: [id])
  createdById                      Int?            @map("createdBy")
  updatedBy                        User?           @relation("Photo_updatedBy", fields: [updatedById], references: [id])
  updatedById                      Int?            @map("updatedBy")
  from_EditorChoice_heroImage      EditorChoice[]  @relation("EditorChoice_heroImage")
  from_Author_image                Author[]        @relation("Author_image")
  from_PageVariable_relatedImage   PageVariable[]  @relation("PageVariable_relatedImage")
  from_Video_coverPhoto            Video[]         @relation("Video_coverPhoto")
  from_Tag_ogImage                 Tag[]           @relation("Tag_ogImage")
  from_Category_heroImage          Category[]      @relation("Category_heroImage")
  from_Category_ogImage            Category[]      @relation("Category_ogImage")
  from_Post_heroImage              Post[]          @relation("Post_heroImage")
  from_Post_ogImage                Post[]          @relation("Post_ogImage")
  from_Collaboration_bannerMobile  Collaboration[] @relation("Collaboration_bannerMobile")
  from_Collaboration_bannerTablet  Collaboration[] @relation("Collaboration_bannerTablet")
  from_Collaboration_bannerDesktop Collaboration[] @relation("Collaboration_bannerDesktop")
  from_Collaboration_heroImage     Collaboration[] @relation("Collaboration_heroImage")
  from_Gallery_heroImage           Gallery[]       @relation("Gallery_heroImage")
  from_Project_heroImage           Project[]       @relation("Project_heroImage")
  from_Project_ogImage             Project[]       @relation("Project_ogImage")

  @@index([createdById])
  @@index([updatedById])
  @@map("Image")
}

model Author {
  id                        Int           @id @default(autoincrement())
  name                      String        @default("")
  name_en                   String        @default("")
  title                     String?       @default("journalist")
  title_en                  String?       @default("journalist")
  email                     String?       @unique
  image                     Photo?        @relation("Author_image", fields: [imageId], references: [id])
  imageId                   Int?          @map("image")
  homepage                  String        @default("")
  sort                      Int?
  isMember                  Boolean       @default(false)
  special_number            String        @default("")
  number_desc               String        @default("")
  number_desc_en            String        @default("")
  facebook                  String        @default("")
  twitter                   String        @default("")
  instagram                 String        @default("")
  address                   String        @default("")
  bio                       String        @default("")
  posts                     Post[]        @relation("Author_posts")
  notes                     ProjectNote[] @relation("Author_notes")
  quote                     Quote[]       @relation("Quote_writer")
  gallery                   Gallery[]     @relation("Author_gallery")
  projects                  Project[]     @relation("Author_projects")
  createdAt                 DateTime?
  updatedAt                 DateTime?
  createdBy                 User?         @relation("Author_createdBy", fields: [createdById], references: [id])
  createdById               Int?          @map("createdBy")
  updatedBy                 User?         @relation("Author_updatedBy", fields: [updatedById], references: [id])
  updatedById               Int?          @map("updatedBy")
  from_Post_photographers   Post[]        @relation("Post_photographers")
  from_Post_cameraOperators Post[]        @relation("Post_cameraOperators")
  from_Post_designers       Post[]        @relation("Post_designers")
  from_Post_engineers       Post[]        @relation("Post_engineers")
  from_Post_dataAnalysts    Post[]        @relation("Post_dataAnalysts")

  @@index([name])
  @@index([imageId])
  @@index([instagram])
  @@index([createdById])
  @@index([updatedById])
}

model PageVariable {
  id             Int       @id @default(autoincrement())
  name           String    @default("")
  relatedImage   Photo?    @relation("PageVariable_relatedImage", fields: [relatedImageId], references: [id])
  relatedImageId Int?      @map("relatedImage")
  value          Json?
  page           String?   @default("about")
  url            String    @default("")
  createdAt      DateTime?
  updatedAt      DateTime?
  createdBy      User?     @relation("PageVariable_createdBy", fields: [createdById], references: [id])
  createdById    Int?      @map("createdBy")
  updatedBy      User?     @relation("PageVariable_updatedBy", fields: [updatedById], references: [id])
  updatedById    Int?      @map("updatedBy")

  @@index([relatedImageId])
  @@index([page])
  @@index([createdById])
  @@index([updatedById])
}

model Award {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  name_en     String    @default("")
  report      String    @default("")
  report_en   String    @default("")
  url         String    @default("")
  desc        String    @default("")
  desc_en     String    @default("")
  awardTime   DateTime?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Award_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Award_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([awardTime])
  @@index([createdById])
  @@index([updatedById])
}

model Video {
  id                           Int             @id @default(autoincrement())
  name                         String          @default("")
  youtubeUrl                   String          @default("")
  file_filesize                Int?
  file_filename                String?
  coverPhoto                   Photo?          @relation("Video_coverPhoto", fields: [coverPhotoId], references: [id])
  coverPhotoId                 Int?            @map("coverPhoto")
  description                  String          @default("")
  tags                         String          @default("")
  meta                         String          @default("")
  duration                     String          @default("")
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?           @relation("Video_createdBy", fields: [createdById], references: [id])
  createdById                  Int?            @map("createdBy")
  updatedBy                    User?           @relation("Video_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?            @map("updatedBy")
  from_Tag_heroVideo           Tag[]           @relation("Tag_heroVideo")
  from_Post_heroVideo          Post[]          @relation("Post_heroVideo")
  from_Collaboration_heroVideo Collaboration[] @relation("Collaboration_heroVideo")
  from_Project_heroVideo       Project[]       @relation("Project_heroVideo")

  @@index([coverPhotoId])
  @@index([createdById])
  @@index([updatedById])
}

model AudioFile {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  file_filesize Int?
  file_filename String?
  description   String    @default("")
  tags          String    @default("")
  meta          String    @default("")
  duration      String    @default("")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("AudioFile_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("AudioFile_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Tag {
  id            Int       @id @default(autoincrement())
  name          String    @unique @default("")
  brief         String    @default("")
  heroVideo     Video?    @relation("Tag_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId   Int?      @map("heroVideo")
  state         String?   @default("active")
  ogTitle       String    @default("")
  ogDescription String    @default("")
  ogImage       Photo?    @relation("Tag_ogImage", fields: [ogImageId], references: [id])
  ogImageId     Int?      @map("ogImage")
  isFeatured    Boolean   @default(false)
  posts         Post[]    @relation("Post_tags")
  images        Photo[]   @relation("Photo_tags")
  projects      Project[] @relation("Project_tags")
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Tag_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Tag_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([heroVideoId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Category {
  id                      Int       @id @default(autoincrement())
  slug                    String    @unique @default("")
  title                   String    @default("")
  isFeatured              Boolean   @default(false)
  state                   String?
  style                   String?
  heroImage               Photo?    @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId             Int?      @map("heroImage")
  sortOrder               Int?      @default(1)
  ogTitle                 String    @default("")
  ogDescription           String    @default("")
  ogImage                 Photo?    @relation("Category_ogImage", fields: [ogImageId], references: [id])
  ogImageId               Int?      @map("ogImage")
  css                     String    @default("")
  javascript              String    @default("")
  relatedPost             Post[]    @relation("Category_relatedPost")
  createdAt               DateTime?
  updatedAt               DateTime?
  createdBy               User?     @relation("Category_createdBy", fields: [createdById], references: [id])
  createdById             Int?      @map("createdBy")
  updatedBy               User?     @relation("Category_updatedBy", fields: [updatedById], references: [id])
  updatedById             Int?      @map("updatedBy")
  from_Project_categories Project[] @relation("Project_categories")

  @@index([state])
  @@index([style])
  @@index([heroImageId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}

model User {
  id                              Int                @id @default(autoincrement())
  name                            String             @default("")
  email                           String             @unique @default("")
  password                        String
  role                            String
  isProtected                     Boolean            @default(false)
  from_EditorChoice_createdBy     EditorChoice[]     @relation("EditorChoice_createdBy")
  from_EditorChoice_updatedBy     EditorChoice[]     @relation("EditorChoice_updatedBy")
  from_Photo_createdBy            Photo[]            @relation("Photo_createdBy")
  from_Photo_updatedBy            Photo[]            @relation("Photo_updatedBy")
  from_Author_createdBy           Author[]           @relation("Author_createdBy")
  from_Author_updatedBy           Author[]           @relation("Author_updatedBy")
  from_PageVariable_createdBy     PageVariable[]     @relation("PageVariable_createdBy")
  from_PageVariable_updatedBy     PageVariable[]     @relation("PageVariable_updatedBy")
  from_Award_createdBy            Award[]            @relation("Award_createdBy")
  from_Award_updatedBy            Award[]            @relation("Award_updatedBy")
  from_Video_createdBy            Video[]            @relation("Video_createdBy")
  from_Video_updatedBy            Video[]            @relation("Video_updatedBy")
  from_AudioFile_createdBy        AudioFile[]        @relation("AudioFile_createdBy")
  from_AudioFile_updatedBy        AudioFile[]        @relation("AudioFile_updatedBy")
  from_Tag_createdBy              Tag[]              @relation("Tag_createdBy")
  from_Tag_updatedBy              Tag[]              @relation("Tag_updatedBy")
  from_Category_createdBy         Category[]         @relation("Category_createdBy")
  from_Category_updatedBy         Category[]         @relation("Category_updatedBy")
  from_Post_createdBy             Post[]             @relation("Post_createdBy")
  from_Post_updatedBy             Post[]             @relation("Post_updatedBy")
  from_Collaboration_createdBy    Collaboration[]    @relation("Collaboration_createdBy")
  from_Collaboration_updatedBy    Collaboration[]    @relation("Collaboration_updatedBy")
  from_DataSet_createdBy          DataSet[]          @relation("DataSet_createdBy")
  from_DataSet_updatedBy          DataSet[]          @relation("DataSet_updatedBy")
  from_Feature_createdBy          Feature[]          @relation("Feature_createdBy")
  from_Feature_updatedBy          Feature[]          @relation("Feature_updatedBy")
  from_Gallery_createdBy          Gallery[]          @relation("Gallery_createdBy")
  from_Gallery_updatedBy          Gallery[]          @relation("Gallery_updatedBy")
  from_Project_createdBy          Project[]          @relation("Project_createdBy")
  from_Project_updatedBy          Project[]          @relation("Project_updatedBy")
  from_ProjectChecklist_createdBy ProjectChecklist[] @relation("ProjectChecklist_createdBy")
  from_ProjectChecklist_updatedBy ProjectChecklist[] @relation("ProjectChecklist_updatedBy")
  from_ProjectNote_createdBy      ProjectNote[]      @relation("ProjectNote_createdBy")
  from_ProjectNote_updatedBy      ProjectNote[]      @relation("ProjectNote_updatedBy")
  from_NoteCategory_createdBy     NoteCategory[]     @relation("NoteCategory_createdBy")
  from_NoteCategory_updatedBy     NoteCategory[]     @relation("NoteCategory_updatedBy")
  from_Quote_createdBy            Quote[]            @relation("Quote_createdBy")
  from_Quote_updatedBy            Quote[]            @relation("Quote_updatedBy")
}

model Post {
  id                           Int               @id @default(autoincrement())
  slug                         String            @default("")
  sortOrder                    Int?
  name                         String            @default("")
  subtitle                     String?
  state                        String?           @default("draft")
  publishTime                  DateTime?
  categories                   Category[]        @relation("Category_relatedPost")
  writers                      Author[]          @relation("Author_posts")
  photographers                Author[]          @relation("Post_photographers")
  cameraOperators              Author[]          @relation("Post_cameraOperators")
  designers                    Author[]          @relation("Post_designers")
  engineers                    Author[]          @relation("Post_engineers")
  dataAnalysts                 Author[]          @relation("Post_dataAnalysts")
  otherByline                  String?
  leadingEmbeddedCode          String            @default("")
  heroVideo                    Video?            @relation("Post_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId                  Int?              @map("heroVideo")
  heroImage                    Photo?            @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                  Int?              @map("heroImage")
  heroCaption                  String?
  heroImageSize                String?           @default("normal")
  style                        String?           @default("news")
  summary                      Json?
  content                      Json?
  actionList                   Json?
  citation                     Json?
  readringTime                 Int?
  projects                     Project?          @relation("Post_projects", fields: [projectsId], references: [id])
  projectsId                   Int?              @map("projects")
  tags                         Tag[]             @relation("Post_tags")
  wordCount                    Int?
  readingTime                  Int?
  collabration                 Collaboration[]   @relation("Collaboration_posts")
  relatedPosts                 Post[]            @relation("Post_relatedPosts")
  data                         DataSet[]         @relation("DataSet_relatedPosts")
  ogTitle                      String?
  ogDescription                String?
  ogImage                      Photo?            @relation("Post_ogImage", fields: [ogImageId], references: [id])
  ogImageId                    Int?              @map("ogImage")
  isFeatured                   Boolean           @default(false)
  note                         ProjectNote[]     @relation("Post_note")
  project                      ProjectChecklist? @relation("Post_project", fields: [projectId], references: [id])
  projectId                    Int?              @unique @map("project")
  css                          String            @default("")
  summaryApiData               Json?
  apiData                      Json?
  actionlistApiData            Json?
  citationApiData              Json?
  createdAt                    DateTime?
  updatedAt                    DateTime?
  createdBy                    User?             @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                  Int?              @map("createdBy")
  updatedBy                    User?             @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                  Int?              @map("updatedBy")
  manualOrderOfWriters         Json?
  manualOrderOfPhotographers   Json?
  manualOrderOfCameraOperators Json?
  manualOrderOfDesigners       Json?
  manualOrderOfEngineers       Json?
  manualOrderOfDataAnalysts    Json?
  manualOrderOfRelatedPosts    Json?
  from_EditorChoice_choices    EditorChoice[]    @relation("EditorChoice_choices")
  from_Post_relatedPosts       Post[]            @relation("Post_relatedPosts")
  from_Feature_featurePost     Feature[]         @relation("Feature_featurePost")

  @@index([state])
  @@index([publishTime])
  @@index([heroVideoId])
  @@index([heroImageId])
  @@index([style])
  @@index([projectsId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Collaboration {
  id              Int       @id @default(autoincrement())
  name            String    @default("")
  sortOrder       Int?
  description     String    @default("")
  requireTime     Int?
  heroVideo       Video?    @relation("Collaboration_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId     Int?      @map("heroVideo")
  isBanner        Boolean   @default(false)
  bannerMobile    Photo?    @relation("Collaboration_bannerMobile", fields: [bannerMobileId], references: [id])
  bannerMobileId  Int?      @map("bannerMobile")
  bannerTablet    Photo?    @relation("Collaboration_bannerTablet", fields: [bannerTabletId], references: [id])
  bannerTabletId  Int?      @map("bannerTablet")
  bannerDesktop   Photo?    @relation("Collaboration_bannerDesktop", fields: [bannerDesktopId], references: [id])
  bannerDesktopId Int?      @map("bannerDesktop")
  heroImage       Photo?    @relation("Collaboration_heroImage", fields: [heroImageId], references: [id])
  heroImageId     Int?      @map("heroImage")
  startTime       DateTime?
  endTime         DateTime?
  progress        Int?
  collabLink      String    @default("")
  achvLink        String    @default("")
  state           String?   @default("draft")
  posts           Post[]    @relation("Collaboration_posts")
  publishTime     DateTime?
  createdAt       DateTime?
  updatedAt       DateTime?
  createdBy       User?     @relation("Collaboration_createdBy", fields: [createdById], references: [id])
  createdById     Int?      @map("createdBy")
  updatedBy       User?     @relation("Collaboration_updatedBy", fields: [updatedById], references: [id])
  updatedById     Int?      @map("updatedBy")

  @@index([heroVideoId])
  @@index([bannerMobileId])
  @@index([bannerTabletId])
  @@index([bannerDesktopId])
  @@index([heroImageId])
  @@index([state])
  @@index([createdById])
  @@index([updatedById])
}

model DataSet {
  id           Int       @id @default(autoincrement())
  name         String    @default("")
  sortOrder    Int?
  state        String?   @default("draft")
  description  String    @default("")
  relatedPosts Post[]    @relation("DataSet_relatedPosts")
  gallery      Gallery[] @relation("DataSet_gallery")
  publishTime  DateTime?
  link         String    @default("")
  createdAt    DateTime?
  updatedAt    DateTime?
  createdBy    User?     @relation("DataSet_createdBy", fields: [createdById], references: [id])
  createdById  Int?      @map("createdBy")
  updatedBy    User?     @relation("DataSet_updatedBy", fields: [updatedById], references: [id])
  updatedById  Int?      @map("updatedBy")

  @@index([name])
  @@index([state])
  @@index([publishTime])
  @@index([createdById])
  @@index([updatedById])
}

model Feature {
  id            Int       @id @default(autoincrement())
  name          String    @default("")
  subtitle      String    @default("")
  sortOrder     Int?
  state         String?   @default("draft")
  description   String    @default("")
  featurePost   Post?     @relation("Feature_featurePost", fields: [featurePostId], references: [id])
  featurePostId Int?      @map("featurePost")
  publishTime   DateTime?
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?     @relation("Feature_createdBy", fields: [createdById], references: [id])
  createdById   Int?      @map("createdBy")
  updatedBy     User?     @relation("Feature_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?      @map("updatedBy")

  @@index([state])
  @@index([featurePostId])
  @@index([createdById])
  @@index([updatedById])
}

model Gallery {
  id          Int       @id @default(autoincrement())
  data        DataSet[] @relation("DataSet_gallery")
  link        String    @default("")
  heroImage   Photo?    @relation("Gallery_heroImage", fields: [heroImageId], references: [id])
  heroImageId Int?      @map("heroImage")
  writer      Author[]  @relation("Author_gallery")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Gallery_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Gallery_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([heroImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Project {
  id            Int        @id @default(autoincrement())
  name          String     @unique @default("")
  subtitle      String     @default("")
  sortOrder     Int?
  state         String?    @default("draft")
  description   String     @default("")
  leading       String?
  categories    Category[] @relation("Project_categories")
  heroVideo     Video?     @relation("Project_heroVideo", fields: [heroVideoId], references: [id])
  heroVideoId   Int?       @map("heroVideo")
  heroImage     Photo?     @relation("Project_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?       @map("heroImage")
  heroImageSize String?    @default("normal")
  ogTitle       String     @default("")
  ogDescription String     @default("")
  ogImage       Photo?     @relation("Project_ogImage", fields: [ogImageId], references: [id])
  ogImageId     Int?       @map("ogImage")
  isFeatured    Boolean    @default(false)
  writers       Author[]   @relation("Author_projects")
  title_style   String?    @default("feature")
  style         String     @default("")
  tags          Tag[]      @relation("Project_tags")
  posts         Post[]     @relation("Post_projects")
  javascript    String     @default("")
  publishTime   DateTime?
  createdAt     DateTime?
  updatedAt     DateTime?
  createdBy     User?      @relation("Project_createdBy", fields: [createdById], references: [id])
  createdById   Int?       @map("createdBy")
  updatedBy     User?      @relation("Project_updatedBy", fields: [updatedById], references: [id])
  updatedById   Int?       @map("updatedBy")

  @@index([state])
  @@index([leading])
  @@index([heroVideoId])
  @@index([heroImageId])
  @@index([ogImageId])
  @@index([title_style])
  @@index([createdById])
  @@index([updatedById])
}

model ProjectChecklist {
  id               Int       @id @default(autoincrement())
  project          Post?     @relation("Post_project")
  asanaCheck       Boolean   @default(false)
  uiCheck          Boolean   @default(false)
  performanceCheck Boolean   @default(false)
  ga               Boolean   @default(false)
  gtm              Boolean   @default(false)
  og               Boolean   @default(false)
  module           String    @default("")
  document         String    @default("")
  asana            String    @default("")
  tracking         String    @default("")
  sourceCode       String    @default("")
  gaLink           String    @default("")
  retro            String    @default("")
  createdAt        DateTime?
  updatedAt        DateTime?
  createdBy        User?     @relation("ProjectChecklist_createdBy", fields: [createdById], references: [id])
  createdById      Int?      @map("createdBy")
  updatedBy        User?     @relation("ProjectChecklist_updatedBy", fields: [updatedById], references: [id])
  updatedById      Int?      @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model ProjectNote {
  id          Int            @id @default(autoincrement())
  post        Post[]         @relation("Post_note")
  title       String         @default("")
  writers     Author[]       @relation("Author_notes")
  category    NoteCategory[] @relation("NoteCategory_note")
  publishTime DateTime?
  content     Json?
  apiData     Json?
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?          @relation("ProjectNote_createdBy", fields: [createdById], references: [id])
  createdById Int?           @map("createdBy")
  updatedBy   User?          @relation("ProjectNote_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?           @map("updatedBy")

  @@index([publishTime])
  @@index([createdById])
  @@index([updatedById])
}

model NoteCategory {
  id          Int           @id @default(autoincrement())
  slug        String        @unique @default("")
  title       String        @default("")
  isFeatured  Boolean       @default(false)
  state       String?
  note        ProjectNote[] @relation("NoteCategory_note")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?         @relation("NoteCategory_createdBy", fields: [createdById], references: [id])
  createdById Int?          @map("createdBy")
  updatedBy   User?         @relation("NoteCategory_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?          @map("updatedBy")

  @@index([createdById])
  @@index([updatedById])
}

model Quote {
  id          Int       @id @default(autoincrement())
  name        String    @default("")
  sortOrder   Int?
  state       String?   @default("draft")
  byline      String    @default("")
  writer      Author?   @relation("Quote_writer", fields: [writerId], references: [id])
  writerId    Int?      @map("writer")
  publishTime DateTime?
  link        String    @default("")
  createdAt   DateTime?
  updatedAt   DateTime?
  createdBy   User?     @relation("Quote_createdBy", fields: [createdById], references: [id])
  createdById Int?      @map("createdBy")
  updatedBy   User?     @relation("Quote_updatedBy", fields: [updatedById], references: [id])
  updatedById Int?      @map("updatedBy")

  @@index([name])
  @@index([state])
  @@index([writerId])
  @@index([publishTime])
  @@index([createdById])
  @@index([updatedById])
}
