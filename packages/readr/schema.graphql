# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type EditorChoice {
  id: ID!
  sortOrder: Int
  name: String
  description: String
  choices: Post
  link: String
  heroImage: Photo
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input EditorChoiceWhereUniqueInput {
  id: ID
}

input EditorChoiceWhereInput {
  AND: [EditorChoiceWhereInput!]
  OR: [EditorChoiceWhereInput!]
  NOT: [EditorChoiceWhereInput!]
  id: IDFilter
  sortOrder: IntNullableFilter
  name: StringFilter
  description: StringFilter
  choices: PostWhereInput
  link: StringFilter
  heroImage: PhotoWhereInput
  state: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input EditorChoiceOrderByInput {
  id: OrderDirection
  sortOrder: OrderDirection
  name: OrderDirection
  description: OrderDirection
  link: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input EditorChoiceUpdateInput {
  sortOrder: Int
  name: String
  description: String
  choices: PostRelateToOneForUpdateInput
  link: String
  heroImage: PhotoRelateToOneForUpdateInput
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToOneForUpdateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
  disconnect: Boolean
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input EditorChoiceUpdateArgs {
  where: EditorChoiceWhereUniqueInput!
  data: EditorChoiceUpdateInput!
}

input EditorChoiceCreateInput {
  sortOrder: Int
  name: String
  description: String
  choices: PostRelateToOneForCreateInput
  link: String
  heroImage: PhotoRelateToOneForCreateInput
  state: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToOneForCreateInput {
  create: PostCreateInput
  connect: PostWhereUniqueInput
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  resized: ResizedImages
  resizedWebp: ResizedWebPImages
  file: FileFieldOutput
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type ResizedWebPImages {
  original: String
  w480: String
  w800: String
  w1200: String
  w1600: String
  w2400: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  tags: TagManyRelationFilter
  urlOriginal: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  urlOriginal: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  tags: TagRelateToManyForUpdateInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input FileFieldInput {
  upload: Upload!
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  file: FileFieldInput
  tags: TagRelateToManyForCreateInput
  urlOriginal: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Author {
  id: ID!
  name: String
  name_en: String
  title: String
  title_en: String
  email: String
  image: Photo
  homepage: String
  sort: Int
  isMember: Boolean
  special_number: String
  number_desc: String
  number_desc_en: String
  facebook: String
  twitter: String
  instagram: String
  address: String
  bio: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  notes(where: ProjectNoteWhereInput! = {}, orderBy: [ProjectNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectNoteWhereUniqueInput): [ProjectNote!]
  notesCount(where: ProjectNoteWhereInput! = {}): Int
  quote(where: QuoteWhereInput! = {}, orderBy: [QuoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteWhereUniqueInput): [Quote!]
  quoteCount(where: QuoteWhereInput! = {}): Int
  gallery(where: GalleryWhereInput! = {}, orderBy: [GalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryWhereUniqueInput): [Gallery!]
  galleryCount(where: GalleryWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AuthorWhereUniqueInput {
  id: ID
  email: String
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
  name_en: StringFilter
  title: StringNullableFilter
  title_en: StringNullableFilter
  email: StringNullableFilter
  image: PhotoWhereInput
  homepage: StringFilter
  sort: IntNullableFilter
  isMember: BooleanFilter
  special_number: StringFilter
  number_desc: StringFilter
  number_desc_en: StringFilter
  facebook: StringFilter
  twitter: StringFilter
  instagram: StringFilter
  address: StringFilter
  bio: StringFilter
  posts: PostManyRelationFilter
  notes: ProjectNoteManyRelationFilter
  quote: QuoteManyRelationFilter
  gallery: GalleryManyRelationFilter
  projects: ProjectManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ProjectNoteManyRelationFilter {
  every: ProjectNoteWhereInput
  some: ProjectNoteWhereInput
  none: ProjectNoteWhereInput
}

input QuoteManyRelationFilter {
  every: QuoteWhereInput
  some: QuoteWhereInput
  none: QuoteWhereInput
}

input GalleryManyRelationFilter {
  every: GalleryWhereInput
  some: GalleryWhereInput
  none: GalleryWhereInput
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  name_en: OrderDirection
  title: OrderDirection
  title_en: OrderDirection
  email: OrderDirection
  homepage: OrderDirection
  sort: OrderDirection
  isMember: OrderDirection
  special_number: OrderDirection
  number_desc: OrderDirection
  number_desc_en: OrderDirection
  facebook: OrderDirection
  twitter: OrderDirection
  instagram: OrderDirection
  address: OrderDirection
  bio: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AuthorUpdateInput {
  name: String
  name_en: String
  title: String
  title_en: String
  email: String
  image: PhotoRelateToOneForUpdateInput
  homepage: String
  sort: Int
  isMember: Boolean
  special_number: String
  number_desc: String
  number_desc_en: String
  facebook: String
  twitter: String
  instagram: String
  address: String
  bio: String
  posts: PostRelateToManyForUpdateInput
  notes: ProjectNoteRelateToManyForUpdateInput
  quote: QuoteRelateToManyForUpdateInput
  gallery: GalleryRelateToManyForUpdateInput
  projects: ProjectRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ProjectNoteRelateToManyForUpdateInput {
  disconnect: [ProjectNoteWhereUniqueInput!]
  set: [ProjectNoteWhereUniqueInput!]
  create: [ProjectNoteCreateInput!]
  connect: [ProjectNoteWhereUniqueInput!]
}

input QuoteRelateToManyForUpdateInput {
  disconnect: [QuoteWhereUniqueInput!]
  set: [QuoteWhereUniqueInput!]
  create: [QuoteCreateInput!]
  connect: [QuoteWhereUniqueInput!]
}

input GalleryRelateToManyForUpdateInput {
  disconnect: [GalleryWhereUniqueInput!]
  set: [GalleryWhereUniqueInput!]
  create: [GalleryCreateInput!]
  connect: [GalleryWhereUniqueInput!]
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
  name_en: String
  title: String
  title_en: String
  email: String
  image: PhotoRelateToOneForCreateInput
  homepage: String
  sort: Int
  isMember: Boolean
  special_number: String
  number_desc: String
  number_desc_en: String
  facebook: String
  twitter: String
  instagram: String
  address: String
  bio: String
  posts: PostRelateToManyForCreateInput
  notes: ProjectNoteRelateToManyForCreateInput
  quote: QuoteRelateToManyForCreateInput
  gallery: GalleryRelateToManyForCreateInput
  projects: ProjectRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ProjectNoteRelateToManyForCreateInput {
  create: [ProjectNoteCreateInput!]
  connect: [ProjectNoteWhereUniqueInput!]
}

input QuoteRelateToManyForCreateInput {
  create: [QuoteCreateInput!]
  connect: [QuoteWhereUniqueInput!]
}

input GalleryRelateToManyForCreateInput {
  create: [GalleryCreateInput!]
  connect: [GalleryWhereUniqueInput!]
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

type PageVariable {
  id: ID!
  name: String
  relatedImage: Photo
  value: JSON
  page: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input PageVariableWhereUniqueInput {
  id: ID
}

input PageVariableWhereInput {
  AND: [PageVariableWhereInput!]
  OR: [PageVariableWhereInput!]
  NOT: [PageVariableWhereInput!]
  id: IDFilter
  name: StringFilter
  relatedImage: PhotoWhereInput
  page: StringNullableFilter
  url: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PageVariableOrderByInput {
  id: OrderDirection
  name: OrderDirection
  page: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PageVariableUpdateInput {
  name: String
  relatedImage: PhotoRelateToOneForUpdateInput
  value: JSON
  page: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input PageVariableUpdateArgs {
  where: PageVariableWhereUniqueInput!
  data: PageVariableUpdateInput!
}

input PageVariableCreateInput {
  name: String
  relatedImage: PhotoRelateToOneForCreateInput
  value: JSON
  page: String
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Award {
  id: ID!
  name: String
  name_en: String
  report: String
  report_en: String
  url: String
  desc: String
  desc_en: String
  awardTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AwardWhereUniqueInput {
  id: ID
}

input AwardWhereInput {
  AND: [AwardWhereInput!]
  OR: [AwardWhereInput!]
  NOT: [AwardWhereInput!]
  id: IDFilter
  name: StringFilter
  name_en: StringFilter
  report: StringFilter
  report_en: StringFilter
  url: StringFilter
  desc: StringFilter
  desc_en: StringFilter
  awardTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AwardOrderByInput {
  id: OrderDirection
  name: OrderDirection
  name_en: OrderDirection
  report: OrderDirection
  report_en: OrderDirection
  url: OrderDirection
  desc: OrderDirection
  desc_en: OrderDirection
  awardTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AwardUpdateInput {
  name: String
  name_en: String
  report: String
  report_en: String
  url: String
  desc: String
  desc_en: String
  awardTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AwardUpdateArgs {
  where: AwardWhereUniqueInput!
  data: AwardUpdateInput!
}

input AwardCreateInput {
  name: String
  name_en: String
  report: String
  report_en: String
  url: String
  desc: String
  desc_en: String
  awardTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Video {
  id: ID!
  name: String
  youtubeUrl: String
  file: FileFieldOutput
  coverPhoto: Photo
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  name: StringFilter
  youtubeUrl: StringFilter
  coverPhoto: PhotoWhereInput
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input VideoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  youtubeUrl: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input VideoUpdateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForUpdateInput
  description: String
  tags: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  name: String
  youtubeUrl: String
  file: FileFieldInput
  coverPhoto: PhotoRelateToOneForCreateInput
  description: String
  tags: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type AudioFile {
  id: ID!
  name: String
  file: FileFieldOutput
  description: String
  tags: String
  meta: String
  url: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input AudioFileWhereUniqueInput {
  id: ID
}

input AudioFileWhereInput {
  AND: [AudioFileWhereInput!]
  OR: [AudioFileWhereInput!]
  NOT: [AudioFileWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  tags: StringFilter
  meta: StringFilter
  duration: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input AudioFileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  tags: OrderDirection
  meta: OrderDirection
  duration: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AudioFileUpdateInput {
  name: String
  file: FileFieldInput
  description: String
  tags: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AudioFileUpdateArgs {
  where: AudioFileWhereUniqueInput!
  data: AudioFileUpdateInput!
}

input AudioFileCreateInput {
  name: String
  file: FileFieldInput
  description: String
  tags: String
  meta: String
  duration: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Tag {
  id: ID!
  name: String
  brief: String
  heroVideo: Video
  state: String
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  isFeatured: Boolean
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  images(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  imagesCount(where: PhotoWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  brief: StringFilter
  heroVideo: VideoWhereInput
  state: StringNullableFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  isFeatured: BooleanFilter
  posts: PostManyRelationFilter
  images: PhotoManyRelationFilter
  projects: ProjectManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input PhotoManyRelationFilter {
  every: PhotoWhereInput
  some: PhotoWhereInput
  none: PhotoWhereInput
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brief: OrderDirection
  state: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  isFeatured: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  name: String
  brief: String
  heroVideo: VideoRelateToOneForUpdateInput
  state: String
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  posts: PostRelateToManyForUpdateInput
  images: PhotoRelateToManyForUpdateInput
  projects: ProjectRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input VideoRelateToOneForUpdateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
  disconnect: Boolean
}

input PhotoRelateToManyForUpdateInput {
  disconnect: [PhotoWhereUniqueInput!]
  set: [PhotoWhereUniqueInput!]
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  brief: String
  heroVideo: VideoRelateToOneForCreateInput
  state: String
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  posts: PostRelateToManyForCreateInput
  images: PhotoRelateToManyForCreateInput
  projects: ProjectRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input VideoRelateToOneForCreateInput {
  create: VideoCreateInput
  connect: VideoWhereUniqueInput
}

input PhotoRelateToManyForCreateInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

type Category {
  id: ID!
  slug: String
  title: String
  isFeatured: Boolean
  state: String
  style: String
  heroImage: Photo
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  css: String
  javascript: String
  relatedPost(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  isFeatured: BooleanFilter
  state: StringNullableFilter
  style: StringNullableFilter
  heroImage: PhotoWhereInput
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  css: StringFilter
  javascript: StringFilter
  relatedPost: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  isFeatured: OrderDirection
  state: OrderDirection
  style: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  css: OrderDirection
  javascript: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  slug: String
  title: String
  isFeatured: Boolean
  state: String
  style: String
  heroImage: PhotoRelateToOneForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  css: String
  javascript: String
  relatedPost: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  slug: String
  title: String
  isFeatured: Boolean
  state: String
  style: String
  heroImage: PhotoRelateToOneForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  css: String
  javascript: String
  relatedPost: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
}

type Post {
  id: ID!
  slug: String
  sortOrder: Int
  name: String
  subtitle: String
  state: String
  publishTime: DateTime
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  writers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  writersCount(where: AuthorWhereInput! = {}): Int
  photographers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  photographersCount(where: AuthorWhereInput! = {}): Int
  cameraOperators(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  cameraOperatorsCount(where: AuthorWhereInput! = {}): Int
  designers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  designersCount(where: AuthorWhereInput! = {}): Int
  engineers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  engineersCount(where: AuthorWhereInput! = {}): Int
  dataAnalysts(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  dataAnalystsCount(where: AuthorWhereInput! = {}): Int
  otherByline: String
  leadingEmbeddedCode: String
  heroVideo: Video
  heroImage: Photo
  heroCaption: String
  heroImageSize: String
  style: String
  summary: JSON
  content: JSON
  actionList: JSON
  citation: JSON
  readringTime: Int
  projects: Project
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  wordCount: Int
  readingTime: Int
  collabration(where: CollaborationWhereInput! = {}, orderBy: [CollaborationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollaborationWhereUniqueInput): [Collaboration!]
  collabrationCount(where: CollaborationWhereInput! = {}): Int
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  data(where: DataSetWhereInput! = {}, orderBy: [DataSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DataSetWhereUniqueInput): [DataSet!]
  dataCount(where: DataSetWhereInput! = {}): Int
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  isFeatured: Boolean
  note(where: ProjectNoteWhereInput! = {}, orderBy: [ProjectNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectNoteWhereUniqueInput): [ProjectNote!]
  noteCount(where: ProjectNoteWhereInput! = {}): Int
  project: ProjectChecklist
  css: String
  summaryApiData: JSON
  apiData: JSON
  actionlistApiData: JSON
  citationApiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
  manualOrderOfWriters: JSON
  writersInInputOrder: [Author]
  manualOrderOfPhotographers: JSON
  photographersInInputOrder: [Author]
  manualOrderOfCameraOperators: JSON
  cameraOperatorsInInputOrder: [Author]
  manualOrderOfDesigners: JSON
  designersInInputOrder: [Author]
  manualOrderOfEngineers: JSON
  engineersInInputOrder: [Author]
  manualOrderOfDataAnalysts: JSON
  dataAnalystsInInputOrder: [Author]
  manualOrderOfRelatedPosts: JSON
  relatedPostsInInputOrder: [Post]
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  sortOrder: IntNullableFilter
  name: StringFilter
  subtitle: StringNullableFilter
  state: StringNullableFilter
  publishTime: DateTimeNullableFilter
  categories: CategoryManyRelationFilter
  writers: AuthorManyRelationFilter
  photographers: AuthorManyRelationFilter
  cameraOperators: AuthorManyRelationFilter
  designers: AuthorManyRelationFilter
  engineers: AuthorManyRelationFilter
  dataAnalysts: AuthorManyRelationFilter
  otherByline: StringNullableFilter
  leadingEmbeddedCode: StringFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  heroCaption: StringNullableFilter
  heroImageSize: StringNullableFilter
  style: StringNullableFilter
  readringTime: IntNullableFilter
  projects: ProjectWhereInput
  tags: TagManyRelationFilter
  wordCount: IntNullableFilter
  readingTime: IntNullableFilter
  collabration: CollaborationManyRelationFilter
  relatedPosts: PostManyRelationFilter
  data: DataSetManyRelationFilter
  ogTitle: StringNullableFilter
  ogDescription: StringNullableFilter
  ogImage: PhotoWhereInput
  isFeatured: BooleanFilter
  note: ProjectNoteManyRelationFilter
  project: ProjectChecklistWhereInput
  css: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CategoryManyRelationFilter {
  every: CategoryWhereInput
  some: CategoryWhereInput
  none: CategoryWhereInput
}

input AuthorManyRelationFilter {
  every: AuthorWhereInput
  some: AuthorWhereInput
  none: AuthorWhereInput
}

input CollaborationManyRelationFilter {
  every: CollaborationWhereInput
  some: CollaborationWhereInput
  none: CollaborationWhereInput
}

input DataSetManyRelationFilter {
  every: DataSetWhereInput
  some: DataSetWhereInput
  none: DataSetWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  sortOrder: OrderDirection
  name: OrderDirection
  subtitle: OrderDirection
  state: OrderDirection
  publishTime: OrderDirection
  otherByline: OrderDirection
  leadingEmbeddedCode: OrderDirection
  heroCaption: OrderDirection
  heroImageSize: OrderDirection
  style: OrderDirection
  readringTime: OrderDirection
  wordCount: OrderDirection
  readingTime: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  isFeatured: OrderDirection
  css: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  slug: String
  sortOrder: Int
  name: String
  subtitle: String
  state: String
  publishTime: DateTime
  categories: CategoryRelateToManyForUpdateInput
  writers: AuthorRelateToManyForUpdateInput
  photographers: AuthorRelateToManyForUpdateInput
  cameraOperators: AuthorRelateToManyForUpdateInput
  designers: AuthorRelateToManyForUpdateInput
  engineers: AuthorRelateToManyForUpdateInput
  dataAnalysts: AuthorRelateToManyForUpdateInput
  otherByline: String
  leadingEmbeddedCode: String
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  heroImageSize: String
  style: String
  summary: JSON
  content: JSON
  actionList: JSON
  citation: JSON
  readringTime: Int
  projects: ProjectRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
  wordCount: Int
  readingTime: Int
  collabration: CollaborationRelateToManyForUpdateInput
  relatedPosts: PostRelateToManyForUpdateInput
  data: DataSetRelateToManyForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  note: ProjectNoteRelateToManyForUpdateInput
  project: ProjectChecklistRelateToOneForUpdateInput
  css: String
  summaryApiData: JSON
  apiData: JSON
  actionlistApiData: JSON
  citationApiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
  manualOrderOfWriters: JSON
  manualOrderOfPhotographers: JSON
  manualOrderOfCameraOperators: JSON
  manualOrderOfDesigners: JSON
  manualOrderOfEngineers: JSON
  manualOrderOfDataAnalysts: JSON
  manualOrderOfRelatedPosts: JSON
}

input CategoryRelateToManyForUpdateInput {
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input AuthorRelateToManyForUpdateInput {
  disconnect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input CollaborationRelateToManyForUpdateInput {
  disconnect: [CollaborationWhereUniqueInput!]
  set: [CollaborationWhereUniqueInput!]
  create: [CollaborationCreateInput!]
  connect: [CollaborationWhereUniqueInput!]
}

input DataSetRelateToManyForUpdateInput {
  disconnect: [DataSetWhereUniqueInput!]
  set: [DataSetWhereUniqueInput!]
  create: [DataSetCreateInput!]
  connect: [DataSetWhereUniqueInput!]
}

input ProjectChecklistRelateToOneForUpdateInput {
  create: ProjectChecklistCreateInput
  connect: ProjectChecklistWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  slug: String
  sortOrder: Int
  name: String
  subtitle: String
  state: String
  publishTime: DateTime
  categories: CategoryRelateToManyForCreateInput
  writers: AuthorRelateToManyForCreateInput
  photographers: AuthorRelateToManyForCreateInput
  cameraOperators: AuthorRelateToManyForCreateInput
  designers: AuthorRelateToManyForCreateInput
  engineers: AuthorRelateToManyForCreateInput
  dataAnalysts: AuthorRelateToManyForCreateInput
  otherByline: String
  leadingEmbeddedCode: String
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  heroImageSize: String
  style: String
  summary: JSON
  content: JSON
  actionList: JSON
  citation: JSON
  readringTime: Int
  projects: ProjectRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
  wordCount: Int
  readingTime: Int
  collabration: CollaborationRelateToManyForCreateInput
  relatedPosts: PostRelateToManyForCreateInput
  data: DataSetRelateToManyForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  note: ProjectNoteRelateToManyForCreateInput
  project: ProjectChecklistRelateToOneForCreateInput
  css: String
  summaryApiData: JSON
  apiData: JSON
  actionlistApiData: JSON
  citationApiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
  manualOrderOfWriters: JSON
  manualOrderOfPhotographers: JSON
  manualOrderOfCameraOperators: JSON
  manualOrderOfDesigners: JSON
  manualOrderOfEngineers: JSON
  manualOrderOfDataAnalysts: JSON
  manualOrderOfRelatedPosts: JSON
}

input CategoryRelateToManyForCreateInput {
  create: [CategoryCreateInput!]
  connect: [CategoryWhereUniqueInput!]
}

input AuthorRelateToManyForCreateInput {
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input CollaborationRelateToManyForCreateInput {
  create: [CollaborationCreateInput!]
  connect: [CollaborationWhereUniqueInput!]
}

input DataSetRelateToManyForCreateInput {
  create: [DataSetCreateInput!]
  connect: [DataSetWhereUniqueInput!]
}

input ProjectChecklistRelateToOneForCreateInput {
  create: ProjectChecklistCreateInput
  connect: ProjectChecklistWhereUniqueInput
}

type Collaboration {
  id: ID!
  name: String
  sortOrder: Int
  description: String
  requireTime: Int
  heroVideo: Video
  heroImage: Photo
  startTime: DateTime
  endTime: DateTime
  progress: Int
  collabLink: String
  achvLink: String
  state: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input CollaborationWhereUniqueInput {
  id: ID
}

input CollaborationWhereInput {
  AND: [CollaborationWhereInput!]
  OR: [CollaborationWhereInput!]
  NOT: [CollaborationWhereInput!]
  id: IDFilter
  name: StringFilter
  sortOrder: IntNullableFilter
  description: StringFilter
  requireTime: IntNullableFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  startTime: DateTimeNullableFilter
  endTime: DateTimeNullableFilter
  progress: IntNullableFilter
  collabLink: StringFilter
  achvLink: StringFilter
  state: StringNullableFilter
  posts: PostManyRelationFilter
  publishTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input CollaborationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  sortOrder: OrderDirection
  description: OrderDirection
  requireTime: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  progress: OrderDirection
  collabLink: OrderDirection
  achvLink: OrderDirection
  state: OrderDirection
  publishTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CollaborationUpdateInput {
  name: String
  sortOrder: Int
  description: String
  requireTime: Int
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  startTime: DateTime
  endTime: DateTime
  progress: Int
  collabLink: String
  achvLink: String
  state: String
  posts: PostRelateToManyForUpdateInput
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input CollaborationUpdateArgs {
  where: CollaborationWhereUniqueInput!
  data: CollaborationUpdateInput!
}

input CollaborationCreateInput {
  name: String
  sortOrder: Int
  description: String
  requireTime: Int
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  startTime: DateTime
  endTime: DateTime
  progress: Int
  collabLink: String
  achvLink: String
  state: String
  posts: PostRelateToManyForCreateInput
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type DataSet {
  id: ID!
  name: String
  sortOrder: Int
  state: String
  description: String
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  gallery(where: GalleryWhereInput! = {}, orderBy: [GalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryWhereUniqueInput): [Gallery!]
  galleryCount(where: GalleryWhereInput! = {}): Int
  publishTime: DateTime
  link: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input DataSetWhereUniqueInput {
  id: ID
}

input DataSetWhereInput {
  AND: [DataSetWhereInput!]
  OR: [DataSetWhereInput!]
  NOT: [DataSetWhereInput!]
  id: IDFilter
  name: StringFilter
  sortOrder: IntNullableFilter
  state: StringNullableFilter
  description: StringFilter
  relatedPosts: PostManyRelationFilter
  gallery: GalleryManyRelationFilter
  publishTime: DateTimeNullableFilter
  link: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input DataSetOrderByInput {
  id: OrderDirection
  name: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  description: OrderDirection
  publishTime: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input DataSetUpdateInput {
  name: String
  sortOrder: Int
  state: String
  description: String
  relatedPosts: PostRelateToManyForUpdateInput
  gallery: GalleryRelateToManyForUpdateInput
  publishTime: DateTime
  link: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input DataSetUpdateArgs {
  where: DataSetWhereUniqueInput!
  data: DataSetUpdateInput!
}

input DataSetCreateInput {
  name: String
  sortOrder: Int
  state: String
  description: String
  relatedPosts: PostRelateToManyForCreateInput
  gallery: GalleryRelateToManyForCreateInput
  publishTime: DateTime
  link: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Feature {
  id: ID!
  name: String
  subtitle: String
  sortOrder: Int
  state: String
  description: String
  featurePost: Post
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input FeatureWhereUniqueInput {
  id: ID
}

input FeatureWhereInput {
  AND: [FeatureWhereInput!]
  OR: [FeatureWhereInput!]
  NOT: [FeatureWhereInput!]
  id: IDFilter
  name: StringFilter
  subtitle: StringFilter
  sortOrder: IntNullableFilter
  state: StringNullableFilter
  description: StringFilter
  featurePost: PostWhereInput
  publishTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input FeatureOrderByInput {
  id: OrderDirection
  name: OrderDirection
  subtitle: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  description: OrderDirection
  publishTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input FeatureUpdateInput {
  name: String
  subtitle: String
  sortOrder: Int
  state: String
  description: String
  featurePost: PostRelateToOneForUpdateInput
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input FeatureUpdateArgs {
  where: FeatureWhereUniqueInput!
  data: FeatureUpdateInput!
}

input FeatureCreateInput {
  name: String
  subtitle: String
  sortOrder: Int
  state: String
  description: String
  featurePost: PostRelateToOneForCreateInput
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Gallery {
  id: ID!
  data(where: DataSetWhereInput! = {}, orderBy: [DataSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DataSetWhereUniqueInput): [DataSet!]
  dataCount(where: DataSetWhereInput! = {}): Int
  link: String
  heroImage: Photo
  writer(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  writerCount(where: AuthorWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input GalleryWhereUniqueInput {
  id: ID
}

input GalleryWhereInput {
  AND: [GalleryWhereInput!]
  OR: [GalleryWhereInput!]
  NOT: [GalleryWhereInput!]
  id: IDFilter
  data: DataSetManyRelationFilter
  link: StringFilter
  heroImage: PhotoWhereInput
  writer: AuthorManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input GalleryOrderByInput {
  id: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input GalleryUpdateInput {
  data: DataSetRelateToManyForUpdateInput
  link: String
  heroImage: PhotoRelateToOneForUpdateInput
  writer: AuthorRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input GalleryUpdateArgs {
  where: GalleryWhereUniqueInput!
  data: GalleryUpdateInput!
}

input GalleryCreateInput {
  data: DataSetRelateToManyForCreateInput
  link: String
  heroImage: PhotoRelateToOneForCreateInput
  writer: AuthorRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Project {
  id: ID!
  name: String
  subtitle: String
  sortOrder: Int
  state: String
  description: String
  leading: String
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  heroVideo: Video
  heroImage: Photo
  heroImageSize: String
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  isFeatured: Boolean
  writers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  writersCount(where: AuthorWhereInput! = {}): Int
  title_style: String
  style: String
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  javascript: String
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ProjectWhereUniqueInput {
  id: ID
  name: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  name: StringFilter
  subtitle: StringFilter
  sortOrder: IntNullableFilter
  state: StringNullableFilter
  description: StringFilter
  leading: StringNullableFilter
  categories: CategoryManyRelationFilter
  heroVideo: VideoWhereInput
  heroImage: PhotoWhereInput
  heroImageSize: StringNullableFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  isFeatured: BooleanFilter
  writers: AuthorManyRelationFilter
  title_style: StringNullableFilter
  style: StringFilter
  tags: TagManyRelationFilter
  posts: PostManyRelationFilter
  javascript: StringFilter
  publishTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  name: OrderDirection
  subtitle: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  description: OrderDirection
  leading: OrderDirection
  heroImageSize: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  isFeatured: OrderDirection
  title_style: OrderDirection
  style: OrderDirection
  javascript: OrderDirection
  publishTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectUpdateInput {
  name: String
  subtitle: String
  sortOrder: Int
  state: String
  description: String
  leading: String
  categories: CategoryRelateToManyForUpdateInput
  heroVideo: VideoRelateToOneForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  heroImageSize: String
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  isFeatured: Boolean
  writers: AuthorRelateToManyForUpdateInput
  title_style: String
  style: String
  tags: TagRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  javascript: String
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  name: String
  subtitle: String
  sortOrder: Int
  state: String
  description: String
  leading: String
  categories: CategoryRelateToManyForCreateInput
  heroVideo: VideoRelateToOneForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  heroImageSize: String
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  isFeatured: Boolean
  writers: AuthorRelateToManyForCreateInput
  title_style: String
  style: String
  tags: TagRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  javascript: String
  publishTime: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ProjectChecklist {
  id: ID!
  project: Post
  asanaCheck: Boolean
  uiCheck: Boolean
  performanceCheck: Boolean
  ga: Boolean
  gtm: Boolean
  og: Boolean
  module: String
  document: String
  asana: String
  tracking: String
  sourceCode: String
  gaLink: String
  retro: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ProjectChecklistWhereUniqueInput {
  id: ID
}

input ProjectChecklistWhereInput {
  AND: [ProjectChecklistWhereInput!]
  OR: [ProjectChecklistWhereInput!]
  NOT: [ProjectChecklistWhereInput!]
  id: IDFilter
  project: PostWhereInput
  asanaCheck: BooleanFilter
  uiCheck: BooleanFilter
  performanceCheck: BooleanFilter
  ga: BooleanFilter
  gtm: BooleanFilter
  og: BooleanFilter
  module: StringFilter
  document: StringFilter
  asana: StringFilter
  tracking: StringFilter
  sourceCode: StringFilter
  gaLink: StringFilter
  retro: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input ProjectChecklistOrderByInput {
  id: OrderDirection
  asanaCheck: OrderDirection
  uiCheck: OrderDirection
  performanceCheck: OrderDirection
  ga: OrderDirection
  gtm: OrderDirection
  og: OrderDirection
  module: OrderDirection
  document: OrderDirection
  asana: OrderDirection
  tracking: OrderDirection
  sourceCode: OrderDirection
  gaLink: OrderDirection
  retro: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectChecklistUpdateInput {
  project: PostRelateToOneForUpdateInput
  asanaCheck: Boolean
  uiCheck: Boolean
  performanceCheck: Boolean
  ga: Boolean
  gtm: Boolean
  og: Boolean
  module: String
  document: String
  asana: String
  tracking: String
  sourceCode: String
  gaLink: String
  retro: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input ProjectChecklistUpdateArgs {
  where: ProjectChecklistWhereUniqueInput!
  data: ProjectChecklistUpdateInput!
}

input ProjectChecklistCreateInput {
  project: PostRelateToOneForCreateInput
  asanaCheck: Boolean
  uiCheck: Boolean
  performanceCheck: Boolean
  ga: Boolean
  gtm: Boolean
  og: Boolean
  module: String
  document: String
  asana: String
  tracking: String
  sourceCode: String
  gaLink: String
  retro: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type ProjectNote {
  id: ID!
  post(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postCount(where: PostWhereInput! = {}): Int
  title: String
  writers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  writersCount(where: AuthorWhereInput! = {}): Int
  category(where: NoteCategoryWhereInput! = {}, orderBy: [NoteCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteCategoryWhereUniqueInput): [NoteCategory!]
  categoryCount(where: NoteCategoryWhereInput! = {}): Int
  publishTime: DateTime
  content: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input ProjectNoteWhereUniqueInput {
  id: ID
}

input ProjectNoteWhereInput {
  AND: [ProjectNoteWhereInput!]
  OR: [ProjectNoteWhereInput!]
  NOT: [ProjectNoteWhereInput!]
  id: IDFilter
  post: PostManyRelationFilter
  title: StringFilter
  writers: AuthorManyRelationFilter
  category: NoteCategoryManyRelationFilter
  publishTime: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input NoteCategoryManyRelationFilter {
  every: NoteCategoryWhereInput
  some: NoteCategoryWhereInput
  none: NoteCategoryWhereInput
}

input ProjectNoteOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publishTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectNoteUpdateInput {
  post: PostRelateToManyForUpdateInput
  title: String
  writers: AuthorRelateToManyForUpdateInput
  category: NoteCategoryRelateToManyForUpdateInput
  publishTime: DateTime
  content: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input NoteCategoryRelateToManyForUpdateInput {
  disconnect: [NoteCategoryWhereUniqueInput!]
  set: [NoteCategoryWhereUniqueInput!]
  create: [NoteCategoryCreateInput!]
  connect: [NoteCategoryWhereUniqueInput!]
}

input ProjectNoteUpdateArgs {
  where: ProjectNoteWhereUniqueInput!
  data: ProjectNoteUpdateInput!
}

input ProjectNoteCreateInput {
  post: PostRelateToManyForCreateInput
  title: String
  writers: AuthorRelateToManyForCreateInput
  category: NoteCategoryRelateToManyForCreateInput
  publishTime: DateTime
  content: JSON
  apiData: JSON
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input NoteCategoryRelateToManyForCreateInput {
  create: [NoteCategoryCreateInput!]
  connect: [NoteCategoryWhereUniqueInput!]
}

type NoteCategory {
  id: ID!
  slug: String
  title: String
  isFeatured: Boolean
  state: String
  note(where: ProjectNoteWhereInput! = {}, orderBy: [ProjectNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectNoteWhereUniqueInput): [ProjectNote!]
  noteCount(where: ProjectNoteWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input NoteCategoryWhereUniqueInput {
  id: ID
  slug: String
}

input NoteCategoryWhereInput {
  AND: [NoteCategoryWhereInput!]
  OR: [NoteCategoryWhereInput!]
  NOT: [NoteCategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  isFeatured: BooleanFilter
  state: StringNullableFilter
  note: ProjectNoteManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input NoteCategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  isFeatured: OrderDirection
  state: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NoteCategoryUpdateInput {
  slug: String
  title: String
  isFeatured: Boolean
  state: String
  note: ProjectNoteRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input NoteCategoryUpdateArgs {
  where: NoteCategoryWhereUniqueInput!
  data: NoteCategoryUpdateInput!
}

input NoteCategoryCreateInput {
  slug: String
  title: String
  isFeatured: Boolean
  state: String
  note: ProjectNoteRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

type Quote {
  id: ID!
  name: String
  sortOrder: Int
  state: String
  byline: String
  writer: Author
  publishTime: DateTime
  link: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
}

input QuoteWhereUniqueInput {
  id: ID
}

input QuoteWhereInput {
  AND: [QuoteWhereInput!]
  OR: [QuoteWhereInput!]
  NOT: [QuoteWhereInput!]
  id: IDFilter
  name: StringFilter
  sortOrder: IntNullableFilter
  state: StringNullableFilter
  byline: StringFilter
  writer: AuthorWhereInput
  publishTime: DateTimeNullableFilter
  link: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
}

input QuoteOrderByInput {
  id: OrderDirection
  name: OrderDirection
  sortOrder: OrderDirection
  state: OrderDirection
  byline: OrderDirection
  publishTime: OrderDirection
  link: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input QuoteUpdateInput {
  name: String
  sortOrder: Int
  state: String
  byline: String
  writer: AuthorRelateToOneForUpdateInput
  publishTime: DateTime
  link: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
}

input AuthorRelateToOneForUpdateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
  disconnect: Boolean
}

input QuoteUpdateArgs {
  where: QuoteWhereUniqueInput!
  data: QuoteUpdateInput!
}

input QuoteCreateInput {
  name: String
  sortOrder: Int
  state: String
  byline: String
  writer: AuthorRelateToOneForCreateInput
  publishTime: DateTime
  link: String
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
}

input AuthorRelateToOneForCreateInput {
  create: AuthorCreateInput
  connect: AuthorWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createEditorChoice(data: EditorChoiceCreateInput!): EditorChoice
  createEditorChoices(data: [EditorChoiceCreateInput!]!): [EditorChoice]
  updateEditorChoice(where: EditorChoiceWhereUniqueInput!, data: EditorChoiceUpdateInput!): EditorChoice
  updateEditorChoices(data: [EditorChoiceUpdateArgs!]!): [EditorChoice]
  deleteEditorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  deleteEditorChoices(where: [EditorChoiceWhereUniqueInput!]!): [EditorChoice]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createPageVariable(data: PageVariableCreateInput!): PageVariable
  createPageVariables(data: [PageVariableCreateInput!]!): [PageVariable]
  updatePageVariable(where: PageVariableWhereUniqueInput!, data: PageVariableUpdateInput!): PageVariable
  updatePageVariables(data: [PageVariableUpdateArgs!]!): [PageVariable]
  deletePageVariable(where: PageVariableWhereUniqueInput!): PageVariable
  deletePageVariables(where: [PageVariableWhereUniqueInput!]!): [PageVariable]
  createAward(data: AwardCreateInput!): Award
  createAwards(data: [AwardCreateInput!]!): [Award]
  updateAward(where: AwardWhereUniqueInput!, data: AwardUpdateInput!): Award
  updateAwards(data: [AwardUpdateArgs!]!): [Award]
  deleteAward(where: AwardWhereUniqueInput!): Award
  deleteAwards(where: [AwardWhereUniqueInput!]!): [Award]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createAudioFile(data: AudioFileCreateInput!): AudioFile
  createAudioFiles(data: [AudioFileCreateInput!]!): [AudioFile]
  updateAudioFile(where: AudioFileWhereUniqueInput!, data: AudioFileUpdateInput!): AudioFile
  updateAudioFiles(data: [AudioFileUpdateArgs!]!): [AudioFile]
  deleteAudioFile(where: AudioFileWhereUniqueInput!): AudioFile
  deleteAudioFiles(where: [AudioFileWhereUniqueInput!]!): [AudioFile]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createCollaboration(data: CollaborationCreateInput!): Collaboration
  createCollaborations(data: [CollaborationCreateInput!]!): [Collaboration]
  updateCollaboration(where: CollaborationWhereUniqueInput!, data: CollaborationUpdateInput!): Collaboration
  updateCollaborations(data: [CollaborationUpdateArgs!]!): [Collaboration]
  deleteCollaboration(where: CollaborationWhereUniqueInput!): Collaboration
  deleteCollaborations(where: [CollaborationWhereUniqueInput!]!): [Collaboration]
  createDataSet(data: DataSetCreateInput!): DataSet
  createDataSets(data: [DataSetCreateInput!]!): [DataSet]
  updateDataSet(where: DataSetWhereUniqueInput!, data: DataSetUpdateInput!): DataSet
  updateDataSets(data: [DataSetUpdateArgs!]!): [DataSet]
  deleteDataSet(where: DataSetWhereUniqueInput!): DataSet
  deleteDataSets(where: [DataSetWhereUniqueInput!]!): [DataSet]
  createFeature(data: FeatureCreateInput!): Feature
  createFeatures(data: [FeatureCreateInput!]!): [Feature]
  updateFeature(where: FeatureWhereUniqueInput!, data: FeatureUpdateInput!): Feature
  updateFeatures(data: [FeatureUpdateArgs!]!): [Feature]
  deleteFeature(where: FeatureWhereUniqueInput!): Feature
  deleteFeatures(where: [FeatureWhereUniqueInput!]!): [Feature]
  createGallery(data: GalleryCreateInput!): Gallery
  createGalleries(data: [GalleryCreateInput!]!): [Gallery]
  updateGallery(where: GalleryWhereUniqueInput!, data: GalleryUpdateInput!): Gallery
  updateGalleries(data: [GalleryUpdateArgs!]!): [Gallery]
  deleteGallery(where: GalleryWhereUniqueInput!): Gallery
  deleteGalleries(where: [GalleryWhereUniqueInput!]!): [Gallery]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createProjectChecklist(data: ProjectChecklistCreateInput!): ProjectChecklist
  createProjectChecklists(data: [ProjectChecklistCreateInput!]!): [ProjectChecklist]
  updateProjectChecklist(where: ProjectChecklistWhereUniqueInput!, data: ProjectChecklistUpdateInput!): ProjectChecklist
  updateProjectChecklists(data: [ProjectChecklistUpdateArgs!]!): [ProjectChecklist]
  deleteProjectChecklist(where: ProjectChecklistWhereUniqueInput!): ProjectChecklist
  deleteProjectChecklists(where: [ProjectChecklistWhereUniqueInput!]!): [ProjectChecklist]
  createProjectNote(data: ProjectNoteCreateInput!): ProjectNote
  createProjectNotes(data: [ProjectNoteCreateInput!]!): [ProjectNote]
  updateProjectNote(where: ProjectNoteWhereUniqueInput!, data: ProjectNoteUpdateInput!): ProjectNote
  updateProjectNotes(data: [ProjectNoteUpdateArgs!]!): [ProjectNote]
  deleteProjectNote(where: ProjectNoteWhereUniqueInput!): ProjectNote
  deleteProjectNotes(where: [ProjectNoteWhereUniqueInput!]!): [ProjectNote]
  createNoteCategory(data: NoteCategoryCreateInput!): NoteCategory
  createNoteCategories(data: [NoteCategoryCreateInput!]!): [NoteCategory]
  updateNoteCategory(where: NoteCategoryWhereUniqueInput!, data: NoteCategoryUpdateInput!): NoteCategory
  updateNoteCategories(data: [NoteCategoryUpdateArgs!]!): [NoteCategory]
  deleteNoteCategory(where: NoteCategoryWhereUniqueInput!): NoteCategory
  deleteNoteCategories(where: [NoteCategoryWhereUniqueInput!]!): [NoteCategory]
  createQuote(data: QuoteCreateInput!): Quote
  createQuotes(data: [QuoteCreateInput!]!): [Quote]
  updateQuote(where: QuoteWhereUniqueInput!, data: QuoteUpdateInput!): Quote
  updateQuotes(data: [QuoteUpdateArgs!]!): [Quote]
  deleteQuote(where: QuoteWhereUniqueInput!): Quote
  deleteQuotes(where: [QuoteWhereUniqueInput!]!): [Quote]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  editorChoices(where: EditorChoiceWhereInput! = {}, orderBy: [EditorChoiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditorChoiceWhereUniqueInput): [EditorChoice!]
  editorChoice(where: EditorChoiceWhereUniqueInput!): EditorChoice
  editorChoicesCount(where: EditorChoiceWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  pageVariables(where: PageVariableWhereInput! = {}, orderBy: [PageVariableOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageVariableWhereUniqueInput): [PageVariable!]
  pageVariable(where: PageVariableWhereUniqueInput!): PageVariable
  pageVariablesCount(where: PageVariableWhereInput! = {}): Int
  awards(where: AwardWhereInput! = {}, orderBy: [AwardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AwardWhereUniqueInput): [Award!]
  award(where: AwardWhereUniqueInput!): Award
  awardsCount(where: AwardWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  audioFiles(where: AudioFileWhereInput! = {}, orderBy: [AudioFileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AudioFileWhereUniqueInput): [AudioFile!]
  audioFile(where: AudioFileWhereUniqueInput!): AudioFile
  audioFilesCount(where: AudioFileWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  collaborations(where: CollaborationWhereInput! = {}, orderBy: [CollaborationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CollaborationWhereUniqueInput): [Collaboration!]
  collaboration(where: CollaborationWhereUniqueInput!): Collaboration
  collaborationsCount(where: CollaborationWhereInput! = {}): Int
  dataSets(where: DataSetWhereInput! = {}, orderBy: [DataSetOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DataSetWhereUniqueInput): [DataSet!]
  dataSet(where: DataSetWhereUniqueInput!): DataSet
  dataSetsCount(where: DataSetWhereInput! = {}): Int
  features(where: FeatureWhereInput! = {}, orderBy: [FeatureOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FeatureWhereUniqueInput): [Feature!]
  feature(where: FeatureWhereUniqueInput!): Feature
  featuresCount(where: FeatureWhereInput! = {}): Int
  galleries(where: GalleryWhereInput! = {}, orderBy: [GalleryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryWhereUniqueInput): [Gallery!]
  gallery(where: GalleryWhereUniqueInput!): Gallery
  galleriesCount(where: GalleryWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  projectChecklists(where: ProjectChecklistWhereInput! = {}, orderBy: [ProjectChecklistOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectChecklistWhereUniqueInput): [ProjectChecklist!]
  projectChecklist(where: ProjectChecklistWhereUniqueInput!): ProjectChecklist
  projectChecklistsCount(where: ProjectChecklistWhereInput! = {}): Int
  projectNotes(where: ProjectNoteWhereInput! = {}, orderBy: [ProjectNoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectNoteWhereUniqueInput): [ProjectNote!]
  projectNote(where: ProjectNoteWhereUniqueInput!): ProjectNote
  projectNotesCount(where: ProjectNoteWhereInput! = {}): Int
  noteCategories(where: NoteCategoryWhereInput! = {}, orderBy: [NoteCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteCategoryWhereUniqueInput): [NoteCategory!]
  noteCategory(where: NoteCategoryWhereUniqueInput!): NoteCategory
  noteCategoriesCount(where: NoteCategoryWhereInput! = {}): Int
  quotes(where: QuoteWhereInput! = {}, orderBy: [QuoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: QuoteWhereUniqueInput): [Quote!]
  quote(where: QuoteWhereUniqueInput!): Quote
  quotesCount(where: QuoteWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
