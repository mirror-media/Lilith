// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int     @id @default(autoincrement())
  name        String  @default("")
  email       String  @unique @default("")
  password    String
  role        String
  isProtected Boolean @default(false)
}

model Term {
  id                  Int         @id @default(autoincrement())
  termNumber          Int
  startDate           DateTime
  endDate             DateTime?
  description         String?
  from_Committee_term Committee[] @relation("Committee_term")
  from_People_term    People[]    @relation("People_term")
}

model Committee {
  id                     Int       @id @default(autoincrement())
  term                   Term?     @relation("Committee_term", fields: [termId], references: [id])
  termId                 Int?      @map("term")
  startDate              DateTime
  endDate                DateTime?
  session                String    @default("")
  name                   String    @default("")
  members                People[]  @relation("Committee_members")
  description            String?
  from_People_committees People[]  @relation("People_committees")
  from_Meeting_committee Meeting[] @relation("Meeting_committee")

  @@index([termId])
}

model People {
  id                      Int         @id @default(autoincrement())
  type                    String
  name                    String      @default("")
  term                    Term?       @relation("People_term", fields: [termId], references: [id])
  termId                  Int?        @map("term")
  party                   People?     @relation("People_party", fields: [partyId], references: [id])
  partyId                 Int?        @map("party")
  committees              Committee[] @relation("People_committees")
  description             String?
  from_Committee_members  Committee[] @relation("Committee_members")
  from_People_party       People[]    @relation("People_party")
  from_Proposal_proposers Proposal[]  @relation("Proposal_proposers")
  from_Proposal_coSigners Proposal[]  @relation("Proposal_coSigners")

  @@index([termId])
  @@index([partyId])
}

model Government {
  id                       Int        @id @default(autoincrement())
  category                 String     @default("")
  name                     String     @default("")
  description              String?
  from_Budget_government   Budget[]   @relation("Budget_government")
  from_Proposal_government Proposal[] @relation("Proposal_government")
}

model Budget {
  id                   Int         @id @default(autoincrement())
  government           Government? @relation("Budget_government", fields: [governmentId], references: [id])
  governmentId         Int?        @map("government")
  type                 String
  year                 Int
  majorCategory        String      @default("")
  mediumCategory       String      @default("")
  minorCategory        String      @default("")
  projectName          String?
  projectDescription   String?
  budgetAmount         Int
  lastYearSettlement   Int?
  budgetUrl            String?
  description          String?
  from_Proposal_budget Proposal[]  @relation("Proposal_budget")

  @@index([governmentId])
}

model Meeting {
  id                            Int                @id @default(autoincrement())
  location                      String
  type                          String
  committee                     Committee?         @relation("Meeting_committee", fields: [committeeId], references: [id])
  committeeId                   Int?               @map("committee")
  meetingDate                   DateTime
  meetingRecordUrl              String?
  description                   String?
  from_Proposal_meetings        Proposal[]         @relation("Proposal_meetings")
  from_Proposal_unfreezeHistory Proposal[]         @relation("Proposal_unfreezeHistory")
  from_RecognitionImage_meeting RecognitionImage[] @relation("RecognitionImage_meeting")

  @@index([committeeId])
}

model Proposal {
  id                                Int         @id @default(autoincrement())
  government                        Government? @relation("Proposal_government", fields: [governmentId], references: [id])
  governmentId                      Int?        @map("government")
  meetings                          Meeting[]   @relation("Proposal_meetings")
  mergedProposals                   Proposal[]  @relation("Proposal_mergedProposals")
  historicalProposals               Proposal[]  @relation("Proposal_historicalProposals")
  proposers                         People[]    @relation("Proposal_proposers")
  coSigners                         People[]    @relation("Proposal_coSigners")
  proposalTypes                     String
  result                            String?
  reductionAmount                   Int?
  freezeAmount                      Int?
  budgetImageUrl                    String?
  budget                            Budget?     @relation("Proposal_budget", fields: [budgetId], references: [id])
  budgetId                          Int?        @map("budget")
  unfreezeStatus                    String?
  unfreezeHistory                   Meeting[]   @relation("Proposal_unfreezeHistory")
  description                       String?
  from_Proposal_mergedProposals     Proposal[]  @relation("Proposal_mergedProposals")
  from_Proposal_historicalProposals Proposal[]  @relation("Proposal_historicalProposals")

  @@index([governmentId])
  @@index([budgetId])
}

model RecognitionImage {
  id                           Int                 @id @default(autoincrement())
  meeting                      Meeting?            @relation("RecognitionImage_meeting", fields: [meetingId], references: [id])
  meetingId                    Int?                @map("meeting")
  imageUrl                     String              @default("")
  description                  String?
  from_RecognitionStatus_image RecognitionStatus[] @relation("RecognitionStatus_image")

  @@index([meetingId])
}

model RecognitionStatus {
  id                       Int               @id @default(autoincrement())
  image                    RecognitionImage? @relation("RecognitionStatus_image", fields: [imageId], references: [id])
  imageId                  Int?              @map("image")
  type                     String
  governmentBudgetResult   String?
  budgetCategoryResult     String?
  budgetAmountResult       String?
  budgetTypeResult         String?
  freezeReduceAmountResult String?
  description              String?

  @@index([imageId])
}
